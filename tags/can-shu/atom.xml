<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: 参数 | 挨踢夜归人]]></title>
  <link href="http://blog.loudou.info//tags/can-shu/atom.xml" rel="self"/>
  <link href="http://blog.loudou.info/"/>
  <updated>2014-10-09T17:58:06+08:00</updated>
  <id>http://blog.loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[blockdev 命令及相关概念]]></title>
    <link href="http://blog.loudou.info/blog/2014/08/20/blockdev-ming-ling-ji-xiang-guan-gai-nian/"/>
    <updated>2014-08-20T23:36:02+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/08/20/blockdev-ming-ling-ji-xiang-guan-gai-nian</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">命令本身</a></li>
  <li><a href="#report-">report 的内容</a></li>
</ul>

<h2 id="section">命令本身</h2>

<p><code>blockdev</code> 是直接调用 <code>ioctl</code> 函数的一个命令.</p>

<p>其原生帮助如下:</p>

<p>```bash
$ blockdev</p>

<p>用法:
  blockdev -V
  blockdev –report [devices]
  blockdev [-v|-q] commands devices</p>

<p>可用命令:
    # 这里暂时省略.
```</p>

<ul>
  <li><code>-V</code> 自然是查看版本号了, 这里就不多说    </li>
  <li><code>--report</code> 用来查看硬盘的相关配置参数, 不传硬盘的话, 会显示所有硬盘    </li>
  <li>最后一种用法, 就是调用各种命令, 对硬盘进行设置. 或单个参数的查看.</li>
</ul>

<h2 id="report-">report 的内容</h2>

<p><code>bash
$ blockdev --report
RO    RA    SSZ    BSZ    StartSec          Size    Device
rw   256    512   4096           0   21474836480    /dev/xvda
</code></p>

<p>调用 blockdev 时需要注意使用 <code>root</code> 用户, 或者 <code>sudo</code></p>

<p>现在来看一下这些字段都是些什么含义</p>

<table>
  <tbody>
    <tr>
      <td>字段</td>
      <td>全称</td>
      <td>含义</td>
    </tr>
    <tr>
      <td>RO</td>
      <td>readonly</td>
      <td>硬盘的读写状态. <code>rw</code> 表示可读可写, <code>ro</code> 则表示只读</td>
    </tr>
    <tr>
      <td>RA</td>
      <td>readahead</td>
      <td><code>预读</code> 的大小. Linux 实际大小为 readahead * 2 (KB)</td>
    </tr>
    <tr>
      <td>SSZ</td>
      <td>sector size</td>
      <td>Linux 中<code>扇区</code>(sector) 大小, 单位 <code>byte</code></td>
    </tr>
    <tr>
      <td>BSZ</td>
      <td>block size</td>
      <td>Linux 中<code>块</code>大小 , 单位 <code>byte</code></td>
    </tr>
    <tr>
      <td>StarcSec</td>
      <td>start sector</td>
      <td>当前设备是从第几个 sector 开始的</td>
    </tr>
    <tr>
      <td>Size</td>
      <td>…</td>
      <td>设备的大小, 不支持 -h 参数变得可读 Orz</td>
    </tr>
    <tr>
      <td>Device</td>
      <td>…</td>
      <td>硬盘对应的设备文件</td>
    </tr>
  </tbody>
</table>

<p>想必你现在和我一样, 表格里面的东西看得晕晕乎乎的.</p>

<p>下面我们简单说明一下</p>

<h4 id="section-1">预读</h4>

<p>当 Linux 向磁盘发起 IO 时, 会进行所谓的<code>预读</code>操作.
即, 会比 CPU 操作需要的内容多从读取一小块内容.</p>

<blockquote>
  <p>当然, 如果发现下一次 IO 是随机的, 便会中断当前预读</p>
</blockquote>

<p>而 <code>readahead</code> 项, 就是配置需要提前读取的内容大小</p>

<p>在 tuning<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 数据服务器, 需要关注这个参数  <br />
不过, 一般情况下, 使用默认的 256 (即预读 512KB) 就足够了.</p>

<h4 id="section-2">扇区</h4>

<p><code>扇区</code>是硬盘的物理属性. 也是操作系统读取数据的最小单位.</p>

<h4 id="section-3">块</h4>

<p><code>块</code> 是操作系统在存储文件时的最小单位. 不论文件真实大小, 其占据的硬盘空间一定是块的整数倍.</p>

<p>一个只有一个字符的文件却占据 4K 空间, 就是这个原因</p>

<p><code>bash
$ cat txt
1
$ du -h txt
4.0K    txt
</code></p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>不知道怎么翻译好… 有调优的意思, 但又有试探性<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
