<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: 磁盘 | 挨踢夜归人]]></title>
  <link href="http://blog.loudou.info//tags/ci-pan/atom.xml" rel="self"/>
  <link href="http://blog.loudou.info/"/>
  <updated>2014-11-13T21:25:23+08:00</updated>
  <id>http://blog.loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[blockdev 命令及相关概念]]></title>
    <link href="http://blog.loudou.info/blog/2014/08/20/blockdev-ming-ling-ji-xiang-guan-gai-nian/"/>
    <updated>2014-08-20T23:36:02+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/08/20/blockdev-ming-ling-ji-xiang-guan-gai-nian</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">命令本身</a></li>
  <li><a href="#report-">report 的内容</a></li>
</ul>

<h2 id="section">命令本身</h2>

<p><code>blockdev</code> 是直接调用 <code>ioctl</code> 函数的一个命令.</p>

<p>其原生帮助如下:</p>

<p>```bash
$ blockdev</p>

<p>用法:
  blockdev -V
  blockdev –report [devices]
  blockdev [-v|-q] commands devices</p>

<p>可用命令:
    # 这里暂时省略.
```</p>

<ul>
  <li><code>-V</code> 自然是查看版本号了, 这里就不多说    </li>
  <li><code>--report</code> 用来查看硬盘的相关配置参数, 不传硬盘的话, 会显示所有硬盘    </li>
  <li>最后一种用法, 就是调用各种命令, 对硬盘进行设置. 或单个参数的查看.</li>
</ul>

<h2 id="report-">report 的内容</h2>

<p><code>bash
$ blockdev --report
RO    RA    SSZ    BSZ    StartSec          Size    Device
rw   256    512   4096           0   21474836480    /dev/xvda
</code></p>

<p>调用 blockdev 时需要注意使用 <code>root</code> 用户, 或者 <code>sudo</code></p>

<p>现在来看一下这些字段都是些什么含义</p>

<table>
  <tbody>
    <tr>
      <td>字段</td>
      <td>全称</td>
      <td>含义</td>
    </tr>
    <tr>
      <td>RO</td>
      <td>readonly</td>
      <td>硬盘的读写状态. <code>rw</code> 表示可读可写, <code>ro</code> 则表示只读</td>
    </tr>
    <tr>
      <td>RA</td>
      <td>readahead</td>
      <td><code>预读</code> 的大小. Linux 实际大小为 readahead * 2 (KB)</td>
    </tr>
    <tr>
      <td>SSZ</td>
      <td>sector size</td>
      <td>Linux 中<code>扇区</code>(sector) 大小, 单位 <code>byte</code></td>
    </tr>
    <tr>
      <td>BSZ</td>
      <td>block size</td>
      <td>Linux 中<code>块</code>大小 , 单位 <code>byte</code></td>
    </tr>
    <tr>
      <td>StarcSec</td>
      <td>start sector</td>
      <td>当前设备是从第几个 sector 开始的</td>
    </tr>
    <tr>
      <td>Size</td>
      <td>…</td>
      <td>设备的大小, 不支持 -h 参数变得可读 Orz</td>
    </tr>
    <tr>
      <td>Device</td>
      <td>…</td>
      <td>硬盘对应的设备文件</td>
    </tr>
  </tbody>
</table>

<p>想必你现在和我一样, 表格里面的东西看得晕晕乎乎的.</p>

<p>下面我们简单说明一下</p>

<h4 id="section-1">预读</h4>

<p>当 Linux 向磁盘发起 IO 时, 会进行所谓的<code>预读</code>操作.
即, 会比 CPU 操作需要的内容多从读取一小块内容.</p>

<blockquote>
  <p>当然, 如果发现下一次 IO 是随机的, 便会中断当前预读</p>
</blockquote>

<p>而 <code>readahead</code> 项, 就是配置需要提前读取的内容大小</p>

<p>在 tuning<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 数据服务器, 需要关注这个参数  <br />
不过, 一般情况下, 使用默认的 256 (即预读 512KB) 就足够了.</p>

<h4 id="section-2">扇区</h4>

<p><code>扇区</code>是硬盘的物理属性. 也是操作系统读取数据的最小单位.</p>

<h4 id="section-3">块</h4>

<p><code>块</code> 是操作系统在存储文件时的最小单位. 不论文件真实大小, 其占据的硬盘空间一定是块的整数倍.</p>

<p>一个只有一个字符的文件却占据 4K 空间, 就是这个原因</p>

<p><code>bash
$ cat txt
1
$ du -h txt
4.0K    txt
</code></p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>不知道怎么翻译好… 有调优的意思, 但又有试探性<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[df 与 du 结果不匹配问题]]></title>
    <link href="http://blog.loudou.info/blog/2014/08/04/df-yu-du-jie-guo-bu-pi-pei-wen-ti/"/>
    <updated>2014-08-04T22:03:28+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/08/04/df-yu-du-jie-guo-bu-pi-pei-wen-ti</id>
    <content type="html"><![CDATA[<p>du 与 df 与 文件描述符不得不说的故事</p>

<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">案发现场</a></li>
  <li><a href="#section-1">侦探们</a>    <ul>
      <li><a href="#df">df</a></li>
      <li><a href="#du">du</a></li>
      <li><a href="#lsof">lsof</a></li>
    </ul>
  </li>
  <li><a href="#section-2">真相只有一个</a></li>
  <li><a href="#section-3">现场还原</a></li>
</ul>

<h2 id="section">案发现场</h2>

<p>开发同学接到了 cacti 的预警. 一台生产机器硬盘吃紧, 使用量达到了 90% 以上</p>

<p>这里不方便给截图, 请看官们自行脑补…</p>

<h2 id="section-1">侦探们</h2>

<h3 id="df">df</h3>
<p>首先, 我们派出第一位侦探 <code>df</code>, 以确认被占用的硬盘.</p>

<p><code>df</code> 给出的调查报告如下</p>

<p><code>
ralph -&gt; df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1       20G   19G  972K 100% /
tmpfs           245M     0  245M   0% /dev/shm
/dev/xvdb1       40G  6.9G   31G  19% /data
</code></p>

<p>根据 <code>df</code> 先生的报告, 我们确认被占用的磁盘为 /dev/xvda1, 其挂载目录为 <code>/</code></p>

<h3 id="du">du</h3>

<p>接下来, 该 <code>du</code> 先生出场了, 他会帮我们找到那该死的大文件在哪目录下面的.</p>

<p>我们先看他的第一次报告.</p>

<p><code>
ralph -&gt; du --max-depth=1 -h /
164K    /dev
5.9M    /bin
0       /sys
4.0K    /mnt
18M     /lib64
39M     /boot
292M    /var
603M    /root
5.5G    /usr
4.0K    /selinux
6.7G    /data
9.4M    /sbin
0       /proc
6.6M    /etc
75M     /tmp
239M    /lib
4.0K    /opt
4.0K    /media
699M    /home
20K     /lost+found
4.0K    /srv
15G     /
</code></p>

<p>嗯, 从 <code>/</code> 中减掉 <code>/data</code> 目录下的 6.7G. 还有 8.3G.</p>

<p>O_O’’’</p>

<p><code>du</code> !!!! 你玩儿我呢吧… <code>df</code> 已经明确除了 <code>/data</code>, <code>/</code> 目录下应该还有 19G 文件. 是不是不想干了!!!</p>

<h3 id="lsof">lsof</h3>

<p>这时, <code>lsof</code> 主动站出来说话了: 逗逼攻城狮, <em>说不定是有进程在向已删除的文件写数据啊!</em></p>

<p><code>
ralph -&gt; lsof |grep delete
grep      12574  ralph  txt       REG  202,1    106232  720903 /bin/grep (deleted)
grep      12574  ralph    1u      CHR  136,2       0t0       5 /dev/pts/2 (deleted)
grep      12574  ralph    2u      CHR  136,2       0t0       5 /dev/pts/2 (deleted)
python    28230  ralph    3w      REG  202,1 734003200  401905 /home/ralph/tmp/write.log (deleted)
</code></p>

<p>嗯~ 原来如此…杀掉这个 <code>28239</code> 这个 Python 进程后, 磁盘占用恢复正常</p>

<h2 id="section-2">真相只有一个</h2>

<ul>
  <li>
    <p>首先, 在 Linux 系统下, 当一个程序以 <code>写模式</code> 打开一个文件后, 会在进程中保留一个<code>文件描述符</code>, 以便进程对磁盘进行写操作. <code>文件描述符</code> 在 <code>/proc</code> 文件系统下, 表现为一个<code>软链接</code>, 只占用 64 个字节的空间.</p>
  </li>
  <li>
    <p>其次, 而在 Linux 的文件系统中, 我们看到的所谓文件只是一个叫<code>硬链接</code>的东西, 而且可以有多个<code>硬链接</code>指向同一个文件(调..啊不,和 <code>ln</code> 妹纸沟通过就知道). 当指向某一文件块的所有<code>硬链接</code>被删除后, Linux 才会回收对相应磁盘空间的占用</p>
  </li>
</ul>

<p>而此次事件的原因, 正好是<code>文件描述符</code>和<code>硬链接</code>指向同一块磁盘空间造成的.</p>

<p>故事应该是这样发生的:</p>

<ol>
  <li>Python 进程打开了 <code>write.log</code> 的文件描述符, 进行写操作. 但却忘记关闭其描述符   </li>
  <li>Linux 上部署的定时清理程序开始工作, 清理掉了 <code>write.log</code> 文件最后一个硬链接</li>
  <li>因为 Python 进程的文件描述符没有关闭, Linux 内核”不敢”回收这块已经没有硬链接的磁盘空间.</li>
  <li>磁盘空间仍被占用, 但对应目录下却没有<code>文件</code>.</li>
</ol>

<h2 id="section-3">现场还原</h2>

<p>呃, 实际上, 公司的开发语言使用的是 java. 而且, 解决问题时并没有及时截图什么的. 所以, 上面那些数据就是用<code>Python</code> 还原现场时的数据了.</p>

<p>这里再附上 Python 脚本.</p>

<p>```python
#!/usr/bin/env python</p>

<p>fobj = open(‘write.log’, ‘w’)</p>

<p>whil True:
    fobj.write(‘*’ * 1024 * 1024)
```</p>

<p>如果不想写太多数据出来, 可以用下面这个版本</p>

<p>```
#!/usr/bin/env python</p>

<p>fobj = open(‘write.log’, ‘w’)</p>

<p>fobj.write(‘*’ * 1024 * 1024)</p>

<p>while True:
    pass
```</p>

<p>死循环的目的都是为了模拟文件描述符占用</p>

]]></content>
  </entry>
  
</feed>
