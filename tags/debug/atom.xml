<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: debug | Test Notes By _漏斗]]></title>
  <link href="http://Ralph-Wang.github.io//tags/debug/atom.xml" rel="self"/>
  <link href="http://Ralph-Wang.github.io/"/>
  <updated>2014-07-22T20:14:24+08:00</updated>
  <id>http://Ralph-Wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning the Bash Shell 笔记-Debug]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/06/11/learning-the-bash-shell-bi-ji-debug/"/>
    <updated>2014-06-11T10:40:33+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/06/11/learning-the-bash-shell-bi-ji-debug</id>
    <content type="html"><![CDATA[<p>任何开发测试工作都离不开的话题 &mdash; Debug.</p>

<p>bash 脚本自然也不能免俗</p>

<!--more-->


<h2>显示每一步执行的命令</h2>

<p>默认情况下, bash 脚本执行时不会像 Windows 的 bat 一样显示每一次执行的命令.
虽然说这功能在执行时比较难看, 但在 Debug
时可以帮助我们查看脚本是执行到哪一行出现的问题</p>

<p>如果想让 bash 脚本运行时显示每行命令, 则需要在脚本开始添加如下命令:
<code>bash
set -o [noexec|verbose|xtrace]
</code></p>

<p>参数说明:</p>

<ul>
<li><p><code>noexec</code>  不执行脚本, 只检查语法错误</p></li>
<li><p><code>verbose</code> 显示每一行命令 (开启这个功能后 bash 就和 bat 很像了)</p></li>
<li><p><code>xtrace</code>  比 verbose 更详细的显示, 具体显示信息由 <code>PS4</code> 变量配置</p></li>
</ul>


<h2>几个 fake signal</h2>

<h3>EXIT</h3>

<p>在脚本退出时会触发该信号</p>

<p>```bash exit.sh</p>

<h1>!/bin/sh</h1>

<p>trap &lsquo;echo exiting the script&rsquo; EXIT</p>

<p>echo &lsquo;starting the script&rsquo;
```</p>

<p>执行结果:</p>

<p><code>bash
$./exit.sh
starting the script
exiting the script
</code></p>

<h3>DEBUG</h3>

<p>每一行命令执行前都会触发这个信号, 开启 <code>set -o functrace</code> 后函数内部也会触发</p>

<p>```bash debug.sh</p>

<h1>!/bin/sh</h1>

<p>trap &lsquo;echo execute $LINENO&rsquo; DEBUG</p>

<p>for ((<em>i=0;</em>i&lt;2;<em>i++))
do
echo $</em>i
done
```</p>

<p>执行结果:</p>

<p><code>bash
$./debug.sh
execute 5
execute 5
execute 7
0
execute 5
execute 5
execute 7
1
execute 5
execute 5
</code></p>

<h3>ERR</h3>

<p>当有命令执行后的返回值不是 0 时触发该信号
```bash err.sh</p>

<h1>!/bin/sh</h1>

<p>trap &lsquo;echo Error with status $?&rsquo; ERR</p>

<p>function bad
{</p>

<pre><code>return 111
</code></pre>

<p>}</p>

<p>bad
<code>
执行结果
</code>bash
$./err.sh
Error with status 111
```</p>

<h3>RETURN</h3>

<p>当用 <code>source</code> 执行脚本返回后触发该信号</p>

<p>若执行 <code>set -o functrace</code>, 则函数返回后也能触发该信号
<code>bash x.sh
echo "Hello World"
</code>
```bash return.sh</p>

<h1>!/bin/sh</h1>

<p>trap &lsquo;echo debug occured&rsquo; DEBUG
trap &lsquo;echo return occured&rsquo; RETURN</p>

<p>source ./x.sh
<code>
执行结果
</code>bash
debug occured
Hello World
return occured
```</p>

<h2>一个简易的 Debugger</h2>

<p>一个 Debugger 需要的功能点:</p>

<ul>
<li><p>断点</p></li>
<li><p>逐步执行</p></li>
<li><p>变量监视</p></li>
<li><p>显示当前执行位置和断点位置</p></li>
<li><p>不需要改动源码即可进行 Debug</p></li>
</ul>


<h2>实现原理:</h2>

<p>利用 <code>DEBUG</code> 信号中断执行. 进而进入 debug 命令行</p>

<h2>核心数组:</h2>

<ul>
<li><p><code>_lines</code> 用来存储所有 Debug 脚本的代码</p></li>
<li><p><code>_linebp</code> 用来存储断点行号</p></li>
</ul>


<p>文件结构:</p>

<blockquote><p>bashdb  # 主脚本, 即驱动器</p>

<p>bashdb.pre # 添加到原脚本头的部分</p>

<p>bashdb.fns # 定义的函数们</p></blockquote>

<p>```bash bashdb</p>

<h1>!/bin/sh</h1>

<p>_dbname=${0##*/}
echo &lsquo;Bash Debugger Version 1.0&rsquo;</p>

<p>if (( $# &lt; 1 ))
then</p>

<pre><code>echo "$_dbname Usage: $_dbname filename." &gt;&amp;2
exit 1
</code></pre>

<p>fi</p>

<p>_guineapig=$1</p>

<p>if [ -r $_guineapig ]
then</p>

<pre><code>echo "$_dbname: file '$1' is not readable." &gt;&amp;2
exit 1
</code></pre>

<p>fi</p>

<p>shift</p>

<p><em>tmpdir=/tmp
</em>libdir=.
<em>debugfile=$</em>tmpdir/bashdb.$$ # tmp file for script debugged</p>

<p>cat $<em>libdir/bashdb.pre $</em>guineapig > $<em>debugfile
exec bash $</em>debugfile $<em>guineapig $</em>tmpdir $_libdir &ldquo;$@&rdquo;
```</p>

<blockquote><p>关于 <code>exec</code> 命令</p>

<blockquote><p>执行其参数, 用其并替代当前进程. 脚本中在 <code>exec</code> 后的命令都不会执行
在 cli 中执行 exec 后&hellip; 当前 shell 会直接退出</p></blockquote></blockquote>

<p>```bash bashdb.pre</p>

<h1>!/bin/sh</h1>

<p><em>debugfile=$0
</em>guineapig=$1</p>

<p><em>tmpdir=$2
</em>libdir=$3</p>

<p>shift 3</p>

<h1>将所有函数加载进来</h1>

<p>source $_libdir/bashdb.fns</p>

<p><em>linebp=
let </em>trace=0
let _i=0</p>

<p>{</p>

<pre><code>while read
do
    _line[$_i]=$REPLY
    let _i=$_i+1
done
</code></pre>

<p>} &lt; $_guineapig</p>

<h1>退出时清除临时文件</h1>

<p>trap _cleanup EXIT</p>

<p>let _steps=1</p>

<h1>减掉 bashdb.pre 的行数</h1>

<p>trap &lsquo;_steptrap $(($LINENO &ndash; 32))&rsquo; DEBUG
```</p>

<p>```bash bashdb.fns</p>

<h1>!/bin/sh</h1>

<h1>Debugger 的主要函数 _steptrap</h1>

<h1>每一行代码执行前, 这个函数都会被调用</h1>

<p>function _steptrap
{</p>

<pre><code>_curlline=$1
(( $trace )) &amp;&amp; _msg "Line $_curlline: ${_lines[$_curlline]}"

if (( $_steps &gt;= 0 ))
then
    let _steps=$_steps-1
fi

# check if there is a breakpoint
if _at_linenumbp
then
    _msg "Reached breakpoint at $_curlline"
    _cmdloop
fi

# check if there is a break condition
if [ -n "$_brcond" ] &amp;&amp; eval $_brcond 
then
    _msg "Break condition $_brcond true at line $_curlline"
    _cmdloop

# check if there are no more steps
if (( $_steps == 0 ))
then
    _msg "Stopped at line $_curlline"
    _cmdloop
fi
</code></pre>

<p>}</p>

<h1>命令处理函数 _cmdloop</h1>

<p>function _cmdloop
{</p>

<pre><code>local cmd args

while read -e -p "bash&gt; " cmd args
do
    case $cmd in
        \?|h ) # 显示命令菜单
            _menu ;;
        bc ) # 设置中断条件
            _setbc $args ;;
        bp ) # 设置断点
            _setbp $args ;;
        cb ) # 清除一个或全部断点
            _clearbp $args ;;
        ds ) # 显示脚本和断点
            _displayscript ;;
        g ) # 运行脚本直到断点
            return ;;
        q ) # 退出
            exit ;;
        s ) # 执行 N 行, 默认 1 行
            let _steps=${args:-1}
        x ) # 开关显示所在行
            _xtrace ;;
        !* ) # 执行 shell 命令
            eval ${cmd#!} $args;;
        * )
            _msg "Invalid command: '$cmd'" ;;
    esac
done
</code></pre>

<p>}</p>

<h1>设置断点命令对应函数 _setbp</h1>

<p>functrace _setbp
{</p>

<pre><code># 没有参数就显示断点信息
if [ -z "$1" ]
then
    _listbp
elif [ $(echo $1 | grep '^[0-9]*') ]
then
    if [ -n "${list[$1]" ]
    then # 将新断点与旧断点重新排序放入 _linebp
        _linebp=($(echo $( (for i in ${_linebp[@]} $1;do
        echo $i; done) | sort -n) ))
    else # 空行不能设置断点
        _msg "Breakpoints can only be set on non-blank lines"
    fi
else
    _msg "Please specify a numeric line number"
fi
</code></pre>

<p>}</p>

<h2>其它函数这里省略</h2>

<p>```</p>
]]></content>
  </entry>
  
</feed>
