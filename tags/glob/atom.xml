<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: glob | 挨踢夜归人]]></title>
  <link href="http://blog.loudou.info//tags/glob/atom.xml" rel="self"/>
  <link href="http://blog.loudou.info/"/>
  <updated>2015-02-15T22:03:46+08:00</updated>
  <id>http://blog.loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BASH 中 的正则表达式(误)]]></title>
    <link href="http://blog.loudou.info/blog/2014/10/09/bash-zhong-de-zheng-ze-biao-da-shi-wu/"/>
    <updated>2014-10-09T14:45:30+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/10/09/bash-zhong-de-zheng-ze-biao-da-shi-wu</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">源</a></li>
  <li><a href="#section-1">思考</a></li>
  <li><a href="#section-2">总结</a></li>
</ul>

<h2 id="section">源</h2>

<p>今天在写一个 bash 脚本时, 有一部分需要判断 ip 的格式.  <br />
这样的功能自然就想到了高大上的<code>正则表达式</code>同学.</p>

<p>但记得 bash 并不直接支持正则表达式. 于是用 <code>sed</code> 实现了这个功能.</p>

<p>不过, 因为好奇大牛们是怎么处理类似问题的, 仍然去搜索了一下.</p>

<p>发现原来 bash 也支持正则表达式(误).   <br />
大概说法是这样的. 在 <code>[[ ]]</code> 中写正则就可以了. 下面是一个例子</p>

<p><code>bash
if [[ 1 =~ [0-9] ]];then echo 0;fi
</code></p>

<p>于是用这种方式, 完成了最初那个 ip 格式判断的需求…</p>

<p>好吧, 我承认是直接抄这里的: <a href="http://openwares.net/linux/bash_regex_ip_port.html">BASH脚本中使用正则表达式检查IP地址和端口号</a></p>

<blockquote>
  <p>PS. 测试过 255.255.255.256 这样的 ip 是不通过的 : )</p>
</blockquote>

<h2 id="section-1">思考</h2>

<p>一般来说, 需求完成了. 我们就可以收工了.  <br />
但本着逗[哔]的探究精神, 对 <code>[[ ]]</code> 做了如下测试</p>

<p><code>bash
if [[ 1 = [0-9] ]]];then echo 0;fi
</code></p>

<p>结果输出: 0.</p>

<p>哇嚓, 所以 <code>=</code> 就可以了吗? 那 <code>=~</code> 是用来干嘛的???</p>

<p>正则的话, 除了 match 还有 search 方式.  <br />
Ok, 测试下:</p>

<p><code>bash
if [[ abc123ddd = [0-9] ]];then echo 0;fi
if [[ abc123ddd =~ [0-9] ]];then echo 0;fi
</code></p>

<p>第一行无输出, 第二行输出: 0.</p>

<p>明了: <code>=</code> 是完全匹配, 即 match; <code>=~</code> 部分匹配, 即 search</p>

<p>好了, 再来试一下其它元字符</p>

<p><code>bash
if [[ 12 = [0-9]. ]];then echo 0;fi
</code></p>

<p>没结果输出</p>

<p>哇嚓, 这又是怎么回事…</p>

<p><code>bash
if [[ 12 = [0-9]* ]];then echo 0;fi
</code></p>

<p>输出: 0.</p>

<p>难道…</p>

<p><code>bash
if [[ 12 = ?? ]];then echo 0;fi
if [[ 12 = * ]];then echo 0;fi
</code></p>

<p>以上两行均有输出.</p>

<p>原来如此, <code>[[ ]]</code> 并不支持正则表达式.
它所支持的是 <code>glob</code> 表达式, 也就是我们常说的 <code>通配符</code></p>

<h2 id="section-2">总结</h2>

<p>探索结束. 总结一下</p>

<ol>
  <li><code>[[ expression ]]</code> 并不支持正则表达式, 其支持的是 <code>glob</code> 表达式</li>
  <li><code>[[ ]]</code> 中可以用 <code>=</code> 表达匹配, 要示左侧字符串和右侧 <code>glob</code> 完全匹配</li>
  <li>也可以使用 <code>=~</code> 进行搜索, 只要左侧字符串有部分与右侧匹配即可</li>
</ol>

<hr />
]]></content>
  </entry>
  
</feed>
