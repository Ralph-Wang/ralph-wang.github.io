<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: 分布式 | 挨踢夜归人]]></title>
  <link href="http://loudou.info//tags/fen-bu-shi/atom.xml" rel="self"/>
  <link href="http://loudou.info/"/>
  <updated>2016-01-29T11:12:18+08:00</updated>
  <id>http://loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Python 搞一个分布式系统玩?]]></title>
    <link href="http://loudou.info/blog/2015/06/05/yong-python-gao-yi-ge-fen-bu-shi-xi-tong-wan/"/>
    <updated>2015-06-05T17:08:19+08:00</updated>
    <id>http://loudou.info/blog/2015/06/05/yong-python-gao-yi-ge-fen-bu-shi-xi-tong-wan</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">抽离队列</a></li>
  <li><a href="#section-1">任务分配</a></li>
  <li><a href="#section-2">任务处理</a></li>
  <li><a href="#section-3">结果输出</a></li>
  <li><a href="#section-4">一些思考</a></li>
</ul>

<p>最近在撸廖雪峰老师的 Python 教程. 算是对自己做一遍查缺补漏吧.</p>

<p>看到分布式进程一节, 自己做了一些发散. 现在写下来, 算是补一补长达 4 个月的博文空白…</p>

<p>基础的代码和结构见<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431929340191970154d52b9d484b88a7b343708fcc60000">原教程</a></p>

<h2 id="section">抽离队列</h2>

<p>为了让任务的分配和执行更自由的启动和停止.
我们必须把队列独立出来.</p>

<p>另外, 因为访问队列的客户端是共用的, 也抽离出来</p>

<p>```python base.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from multiprocessing.managers import BaseManager</p>

<p>class _QueueManagerServer(BaseManager):
    pass</p>

<p>def QueueManagerServer(task_queue, result_queue):
    _QueueManagerServer.register(‘get_task_queue’, callable=lambda: task_queue)
    _QueueManagerServer.register(‘get_result_queue’, callable=lambda: result_queue)
    return _QueueManagerServer</p>

<p>class _QueueManagerClient(BaseManager):
    pass</p>

<p>def QueueManagerClient():
    _QueueManagerClient.register(‘get_task_queue’)
    _QueueManagerClient.register(‘get_result_queue’)
    return _QueueManagerClient
```</p>

<p>因为具体的队列是在<strong>队列程序</strong>(<code>q.py</code>)中创建的, 所以这里 <code>base.py</code> 只提供一个函数.</p>

<p>客户端虽然不需要在使用时绑定具体队列, 但为了接口调用的一致, 仍然封装到一个函数</p>

<p>```python q.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from base import QueueManagerServer
from multiprocessing import Queue</p>

<p>task_queue = Queue()
result_queue = Queue()</p>

<p>Server = QueueManagerServer(task_queue, result_queue)</p>

<p>manager = Server(address=(‘0.0.0.0’, 5000), authkey=b’secret’)</p>

<p>manager.start()</p>

<p>manager.join()
```</p>

<p>这里最后一定要调用 join 来防止程序直接退出.</p>

<h2 id="section-1">任务分配</h2>

<p>这里我们让处理器”分布式”的向某个 webserver 发请求.</p>

<p>因为只是一个示例, 我们就直接向队列里输入要请求的 url.</p>

<p>```python dispatcher.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from base import QueueManagerClient</p>

<p>client = QueueManagerClient()(address=(‘0.0.0.0’, 5000), authkey=b’secret’)</p>

<p>client.connect()</p>

<p>task = client.get_task_queue()</p>

<p>n = 1000000
for i in xrange(n):
    task.put(‘http://localhost:8888/?q={0}’.format(i))
```</p>

<h2 id="section-2">任务处理</h2>

<p>因为不太喜欢依赖 <code>try...except</code>, 所以在取数据前加上一队列空的检查</p>

<p>```python worker.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from base import QueueManagerClient
import time, random
import requests</p>

<p>client = QueueManagerClient()(address=(‘0.0.0.0’, 5000), authkey=b’secret’)</p>

<p>print ‘connect to queue…’
client.connect()</p>

<p>task = client.get_task_queue()
result = client.get_result_queue()</p>

<p>def get(url):
    start = time.time()
    try:
        requests.get(url)
    except:
        ok = 0
    else:
        ok = 1
    finally:
        rt = time.time() - start
        return {‘ok’: ok, ‘rt’: rt}</p>

<p>while True:
    if task.empty():
        print ‘no task yet, wait 5s…’
        time.sleep(5)
        continue
    try:
        i = task.get(timeout=10)
        print ‘get {0}…‘.format(i)
        print ‘request…’
        o = get(i)
        result.put({‘i’: i, ‘o’: o})
    except Exception, e:
        print ‘Error: {0}’.format(e)
```</p>

<h2 id="section-3">结果输出</h2>

<p>这里我把结果输出也抽离出来了.</p>

<p>实际上应该根据应用来决定是放到 <code>dispatcher.py</code> 里, 还是抽离出来</p>

<p>```python output.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from base import QueueManagerClient
import time</p>

<p>client = QueueManagerClient()(address=(‘0.0.0.0’, 5000), authkey=b’secret’)</p>

<p>client.connect()</p>

<p>result = client.get_result_queue()</p>

<p>while True:
    if result.empty():
        print ‘no result yet, wait 5s’
        time.sleep(5)
        continue
    try:
        print result.get(timeout=2)
    except Exception as e:
        print ‘Error: {0}’.format(e)
```</p>

<h2 id="section-4">一些思考</h2>

<p>实际上因为 QueueManager 的协议对开发者并不透明,
这样的<strong>分布式</strong>系统只能完全由 <code>Python</code> 来构建.</p>

<p>如果某部分需要更换语言会变得比较吃力.</p>

<p>相对的, 如果将队列更换成其它透明的队列服务(如, <code>memcacheq</code>), 
再定义好队列的数据格式. 便可以很容易的实现跨语言的<strong>分布式</strong>系统</p>

<hr />
]]></content>
  </entry>
  
</feed>
