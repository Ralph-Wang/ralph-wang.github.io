<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: bash | 挨踢夜归人]]></title>
  <link href="http://blog.loudou.info//tags/bash/atom.xml" rel="self"/>
  <link href="http://blog.loudou.info/"/>
  <updated>2015-02-16T15:33:49+08:00</updated>
  <id>http://blog.loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BASH 特别的 Patch 技巧]]></title>
    <link href="http://blog.loudou.info/blog/2014/10/18/bash-te-bie-de-patch-ji-qiao/"/>
    <updated>2014-10-18T21:43:24+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/10/18/bash-te-bie-de-patch-ji-qiao</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">问题</a></li>
  <li><a href="#section-1">解决方案</a></li>
  <li><a href="#section-2">相关工具</a></li>
</ul>

<h2 id="section">问题</h2>

<p>9 月底爆出的 bash 漏洞, Mac 自然也受到影响.</p>

<p>但当时并没有找到苹果官方的解决方案,  <br />
而 bash 官方释出的补丁方式完全看不懂怎么用…  <br />
再加上就快升级 10.10 了.</p>

<p>想着也许会在升级时把补丁打上呢.  <br />
(呃, 其实是懒得研究官方补丁怎么用)  <br />
也就放着没管了</p>

<p>但昨天升级完后, 却发现并没有打上补丁.</p>

<p>只好硬着头皮上了.</p>

<h2 id="section-1">解决方案<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h2>

<p>因为官方的补丁都是打在源码上的,  <br />
所以我们需要去 <a href="http://ftp.gnu.org/gnu/bash/">http://ftp.gnu.org/gnu/bash/</a> 下载 bash 的源码</p>

<p>没什么特别的需求的话, 就直接选最新的 4.3 版本好了. 懒人点 <a href="http://ftp.gnu.org/gnu/bash/bash-4.3.tar.gz">这里</a></p>

<p>下载完成后直接解压即可</p>

<p><code>bash
$ tar zxvf bash-4.3.tar.gz
</code></p>

<p>现在不着急编译安装, 因为我们还需要在源码上打补丁.</p>

<p>我们需要到 <a href="http://ftp.gnu.org/gnu/bash/bash-4.3-patches/">bash-4.3-patches</a> 目录下把 01~30 补丁全部下载下来.</p>

<p>因为不想一个一个点, 所以玩了点小花样:</p>

<p><code>bash
$ seq -f %02g 30| xargs -Ix curl -O &lt;path-of-patches&gt;/bash43-0x
</code></p>

<p>好了, 把下载好的这些个补丁放到 bash 的源码目录下. 用 patch “一个一个”把补丁打上吧.</p>

<p><code>bash
$ for i in `seq -f %02g 30`; do patch -p0 &lt; bash43-0$i;done
</code></p>

<blockquote>
  <p>这里因为变量在重定向符后面, 所以不能用 xargs 进行</p>
</blockquote>

<p>好了, 接下来就是编译安装 -&gt; 替换原有 bash, 就好了</p>

<h2 id="section-2">相关工具</h2>

<p>patch: <a href="http://blog.chinaunix.net/uid-9525959-id-2001542.html">这里</a>有一篇文章讲得蛮详细的, 就不重新造轮子了.</p>

<p>两个 bug 的测试代码:</p>

<p><code>bash
env x='() { :;}; echo Your bash is Fucked'  bash -c "echo just test"
</code></p>

<p>没漏洞的 bash 是不会被 Fuck 的</p>

<p><code>bash
env X='() { (a)=&gt;\' bash -c "echo date"; cat echo} 
</code></p>

<p>没漏洞的 bash 看到的是 date 字样.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>因为是用官方源码打补丁, 所以 *NIX 系统通用<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BASH 中 的正则表达式(误)]]></title>
    <link href="http://blog.loudou.info/blog/2014/10/09/bash-zhong-de-zheng-ze-biao-da-shi-wu/"/>
    <updated>2014-10-09T14:45:30+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/10/09/bash-zhong-de-zheng-ze-biao-da-shi-wu</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">源</a></li>
  <li><a href="#section-1">思考</a></li>
  <li><a href="#section-2">总结</a></li>
</ul>

<h2 id="section">源</h2>

<p>今天在写一个 bash 脚本时, 有一部分需要判断 ip 的格式.  <br />
这样的功能自然就想到了高大上的<code>正则表达式</code>同学.</p>

<p>但记得 bash 并不直接支持正则表达式. 于是用 <code>sed</code> 实现了这个功能.</p>

<p>不过, 因为好奇大牛们是怎么处理类似问题的, 仍然去搜索了一下.</p>

<p>发现原来 bash 也支持正则表达式(误).   <br />
大概说法是这样的. 在 <code>[[ ]]</code> 中写正则就可以了. 下面是一个例子</p>

<p><code>bash
if [[ 1 =~ [0-9] ]];then echo 0;fi
</code></p>

<p>于是用这种方式, 完成了最初那个 ip 格式判断的需求…</p>

<p>好吧, 我承认是直接抄这里的: <a href="http://openwares.net/linux/bash_regex_ip_port.html">BASH脚本中使用正则表达式检查IP地址和端口号</a></p>

<blockquote>
  <p>PS. 测试过 255.255.255.256 这样的 ip 是不通过的 : )</p>
</blockquote>

<h2 id="section-1">思考</h2>

<p>一般来说, 需求完成了. 我们就可以收工了.  <br />
但本着逗[哔]的探究精神, 对 <code>[[ ]]</code> 做了如下测试</p>

<p><code>bash
if [[ 1 = [0-9] ]]];then echo 0;fi
</code></p>

<p>结果输出: 0.</p>

<p>哇嚓, 所以 <code>=</code> 就可以了吗? 那 <code>=~</code> 是用来干嘛的???</p>

<p>正则的话, 除了 match 还有 search 方式.  <br />
Ok, 测试下:</p>

<p><code>bash
if [[ abc123ddd = [0-9] ]];then echo 0;fi
if [[ abc123ddd =~ [0-9] ]];then echo 0;fi
</code></p>

<p>第一行无输出, 第二行输出: 0.</p>

<p>明了: <code>=</code> 是完全匹配, 即 match; <code>=~</code> 部分匹配, 即 search</p>

<p>好了, 再来试一下其它元字符</p>

<p><code>bash
if [[ 12 = [0-9]. ]];then echo 0;fi
</code></p>

<p>没结果输出</p>

<p>哇嚓, 这又是怎么回事…</p>

<p><code>bash
if [[ 12 = [0-9]* ]];then echo 0;fi
</code></p>

<p>输出: 0.</p>

<p>难道…</p>

<p><code>bash
if [[ 12 = ?? ]];then echo 0;fi
if [[ 12 = * ]];then echo 0;fi
</code></p>

<p>以上两行均有输出.</p>

<p>原来如此, <code>[[ ]]</code> 并不支持正则表达式.
它所支持的是 <code>glob</code> 表达式, 也就是我们常说的 <code>通配符</code></p>

<h2 id="section-2">总结</h2>

<p>探索结束. 总结一下</p>

<ol>
  <li><code>[[ expression ]]</code> 并不支持正则表达式, 其支持的是 <code>glob</code> 表达式</li>
  <li><code>[[ ]]</code> 中可以用 <code>=</code> 表达匹配, 要示左侧字符串和右侧 <code>glob</code> 完全匹配</li>
  <li>也可以使用 <code>=~</code> 进行搜索, 只要左侧字符串有部分与右侧匹配即可</li>
</ol>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux bash 的 C-s]]></title>
    <link href="http://blog.loudou.info/blog/2014/08/13/linux-bash-de-c-s/"/>
    <updated>2014-08-13T22:22:02+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/08/13/linux-bash-de-c-s</id>
    <content type="html"><![CDATA[<p>putty 莫名不响应问题…</p>

<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">事故</a></li>
  <li><a href="#emacs">缘起 emacs</a></li>
  <li><a href="#c-sc-q">C-s/C-q</a></li>
  <li><a href="#c-s-">取消 C-s 绑定</a></li>
</ul>

<h2 id="section">事故</h2>

<p>在 Windows 下, 一直使用 putty 作为连接远程 Linux 的工具.</p>

<p>偶尔会出现 putty 不响应的现象. 一直不知道是什么问题.  <br />
遇到了也就是重启一下 putty. 也就没有太理会它</p>

<p>今天一次逗[哔]的尝试, 却找到了这个问题的源头:</p>

<blockquote>
  <p>该死的 C-s</p>
</blockquote>

<h2 id="emacs">缘起 emacs</h2>

<p><code>emacs</code> 中 <code>C-s</code> 和 <code>C-r</code> 对应的<code>向下</code>搜索和<code>向上</code>搜索  <br />
而 <code>bash</code> 的编辑快捷键默认采用的便是 emacs 模式.  <br />
便试了试 <code>C-s</code>. 结果出现了不响应的情况.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>搜索到下<a href="http://tianya23.blog.51cto.com/1081650/740207">这篇文章</a></p>

<h2 id="c-sc-q">C-s/C-q</h2>

<p>bash 中 <code>C-s</code> 和 <code>C-q</code> 是代表了一对<code>流控制符</code>.  <br />
其作用就是<code>停止</code>和<code>重启</code>从一个设备向另一个设备的输出流.  <br />
以前是用来切断速率过低的传输过程的(具体有多低, 我也不知道)    </p>

<p>现在的网络比以往要快很多,  <br />
所以这两个控制符也就没什么大用了  <br />
只需要记住, 误敲 <code>C-s</code> 导致 bash 不响应时,    </p>

<blockquote>
  <p>敲下<code>C-q</code> 即可恢复    </p>
</blockquote>

<p>—2014-09-05—</p>

<h2 id="c-s-">取消 C-s 绑定</h2>

<p><code>stty stop undef</code></p>

<p>若要长期生效, 可以写到个人 profile 中</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>bash 中 <code>C-r</code> 仍是<code>向上</code>搜索. 不过,搜索目标是命令历史<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning the Bash Shell 笔记-Debug]]></title>
    <link href="http://blog.loudou.info/blog/2014/06/11/learning-the-bash-shell-bi-ji-debug/"/>
    <updated>2014-06-11T10:40:33+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/06/11/learning-the-bash-shell-bi-ji-debug</id>
    <content type="html"><![CDATA[<p>任何开发测试工作都离不开的话题 – Debug. </p>

<p>bash 脚本自然也不能免俗
<!--more--></p>

<h2 id="section">显示每一步执行的命令</h2>

<p>默认情况下, bash 脚本执行时不会像 Windows 的 bat 一样显示每一次执行的命令.
虽然说这功能在执行时比较难看, 但在 Debug
时可以帮助我们查看脚本是执行到哪一行出现的问题</p>

<p>如果想让 bash 脚本运行时显示每行命令, 则需要在脚本开始添加如下命令:</p>

<p><code>bash
set -o [noexec|verbose|xtrace]
</code></p>

<p>参数说明:</p>

<ul>
  <li>
    <p><code>noexec</code>	不执行脚本, 只检查语法错误</p>
  </li>
  <li>
    <p><code>verbose</code>	显示每一行命令 (开启这个功能后 bash 就和 bat 很像了)</p>
  </li>
  <li>
    <p><code>xtrace</code>	比 verbose 更详细的显示, 具体显示信息由 <code>PS4</code> 变量配置</p>
  </li>
</ul>

<h2 id="fake-signal">几个 fake signal</h2>

<h3 id="exit">EXIT</h3>

<p>在脚本退出时会触发该信号</p>

<p>```bash exit.sh
#!/bin/sh</p>

<p>trap ‘echo exiting the script’ EXIT</p>

<p>echo ‘starting the script’
```</p>

<p>执行结果:</p>

<p><code>bash
$./exit.sh
starting the script
exiting the script
</code></p>

<h3 id="debug">DEBUG</h3>

<p>每一行命令执行前都会触发这个信号, 开启 <code>set -o functrace</code> 后函数内部也会触发</p>

<p>```bash debug.sh
#!/bin/sh</p>

<p>trap ‘echo execute $LINENO’ DEBUG</p>

<p>for ((_i=0;_i&lt;2;_i++))
do
echo $_i
done
```</p>

<p>执行结果:</p>

<p><code>bash
$./debug.sh
execute 5
execute 5
execute 7
0
execute 5
execute 5
execute 7
1
execute 5
execute 5
</code></p>

<h3 id="err">ERR</h3>
<p>当有命令执行后的返回值不是 0 时触发该信号</p>

<p>```bash err.sh
#!/bin/sh</p>

<p>trap ‘echo Error with status $?’ ERR</p>

<p>function bad
{
	return 111
}</p>

<p>bad
```</p>

<p>执行结果</p>

<p><code>bash
$./err.sh
Error with status 111
</code></p>

<h3 id="return">RETURN</h3>
<p>当用 <code>source</code> 执行脚本返回后触发该信号</p>

<p>若执行 <code>set -o functrace</code>, 则函数返回后也能触发该信号</p>

<p><code>bash x.sh
echo "Hello World"
</code></p>

<p>```bash return.sh
#!/bin/sh
trap ‘echo debug occured’ DEBUG
trap ‘echo return occured’ RETURN</p>

<p>source ./x.sh
```</p>

<p>执行结果</p>

<p><code>bash
debug occured
Hello World
return occured
</code></p>

<h2 id="debugger">一个简易的 Debugger</h2>

<p>一个 Debugger 需要的功能点:</p>

<ul>
  <li>
    <p>断点</p>
  </li>
  <li>
    <p>逐步执行</p>
  </li>
  <li>
    <p>变量监视</p>
  </li>
  <li>
    <p>显示当前执行位置和断点位置</p>
  </li>
  <li>
    <p>不需要改动源码即可进行 Debug</p>
  </li>
</ul>

<h2 id="section-1">实现原理:</h2>
<p>利用 <code>DEBUG</code> 信号中断执行. 进而进入 debug 命令行</p>

<h2 id="section-2">核心数组:</h2>
<ul>
  <li>
    <p><code>_lines</code> 用来存储所有 Debug 脚本的代码</p>
  </li>
  <li>
    <p><code>_linebp</code> 用来存储断点行号</p>
  </li>
</ul>

<p>文件结构:</p>

<blockquote>
  <p>bashdb  # 主脚本, 即驱动器</p>
</blockquote>

<blockquote>
  <p>bashdb.pre # 添加到原脚本头的部分</p>
</blockquote>

<blockquote>
  <p>bashdb.fns # 定义的函数们</p>
</blockquote>

<p>```bash bashdb
#!/bin/sh</p>

<p>_dbname=${0##*/}
echo ‘Bash Debugger Version 1.0’</p>

<p>if (( $# &lt; 1 ))
then
	echo “$_dbname Usage: $_dbname filename.” &gt;&amp;2
	exit 1
fi</p>

<p>_guineapig=$1</p>

<p>if [ -r $_guineapig ]
then
	echo “$_dbname: file ‘$1’ is not readable.” &gt;&amp;2
	exit 1
fi</p>

<p>shift</p>

<p>_tmpdir=/tmp
_libdir=.
_debugfile=$_tmpdir/bashdb.$$ # tmp file for script debugged</p>

<p>cat $_libdir/bashdb.pre $_guineapig &gt; $_debugfile
exec bash $_debugfile $_guineapig $_tmpdir $_libdir “$@”
```</p>

<blockquote>
  <p>关于 <code>exec</code> 命令
&gt; 执行其参数, 用其并替代当前进程. 脚本中在 <code>exec</code> 后的命令都不会执行
&gt; 在 cli 中执行 exec 后… 当前 shell 会直接退出</p>
</blockquote>

<p>```bash bashdb.pre
#!/bin/sh</p>

<p>_debugfile=$0
_guineapig=$1</p>

<p>_tmpdir=$2
_libdir=$3</p>

<p>shift 3</p>

<h1 id="section-3">将所有函数加载进来</h1>
<p>source $_libdir/bashdb.fns</p>

<p>_linebp=
let _trace=0
let _i=0</p>

<p>{
	while read
	do
		_line[$_i]=$REPLY
		let _i=$_i+1
	done
} &lt; $_guineapig</p>

<h1 id="section-4">退出时清除临时文件</h1>
<p>trap _cleanup EXIT</p>

<p>let _steps=1</p>

<h1 id="bashdbpre-">减掉 bashdb.pre 的行数</h1>
<p>trap ‘_steptrap $(($LINENO - 32))’ DEBUG
```</p>

<p>```bash bashdb.fns
#!/bin/sh</p>

<h1 id="debugger--steptrap">Debugger 的主要函数 _steptrap</h1>
<p># 每一行代码执行前, 这个函数都会被调用</p>

<p>function _steptrap
{
	_curlline=$1
	(( $trace )) &amp;&amp; _msg “Line $_curlline: ${_lines[$_curlline]}”</p>

<pre><code>if (( $_steps &gt;= 0 ))
then
	let _steps=$_steps-1
fi

# check if there is a breakpoint
if _at_linenumbp
then
	_msg "Reached breakpoint at $_curlline"
	_cmdloop
fi

# check if there is a break condition
if [ -n "$_brcond" ] &amp;&amp; eval $_brcond 
then
	_msg "Break condition $_brcond true at line $_curlline"
	_cmdloop

# check if there are no more steps
if (( $_steps == 0 ))
then
	_msg "Stopped at line $_curlline"
	_cmdloop
fi }
</code></pre>

<h1 id="cmdloop">命令处理函数 _cmdloop</h1>

<p>function _cmdloop
{
	local cmd args</p>

<pre><code>while read -e -p "bash&gt; " cmd args
do
	case $cmd in
		\?|h ) # 显示命令菜单
			_menu ;;
		bc ) # 设置中断条件
			_setbc $args ;;
		bp ) # 设置断点
			_setbp $args ;;
		cb ) # 清除一个或全部断点
			_clearbp $args ;;
		ds ) # 显示脚本和断点
			_displayscript ;;
		g ) # 运行脚本直到断点
			return ;;
		q ) # 退出
			exit ;;
		s ) # 执行 N 行, 默认 1 行
			let _steps=${args:-1}
		x ) # 开关显示所在行
			_xtrace ;;
		!* ) # 执行 shell 命令
			eval ${cmd#!} $args;;
		* )
			_msg "Invalid command: '$cmd'" ;;
	esac
done }
</code></pre>

<h1 id="setbp">设置断点命令对应函数 _setbp</h1>

<p>functrace _setbp
{
	# 没有参数就显示断点信息
	if [ -z “$1” ]
	then
		_listbp
	elif [ $(echo $1 | grep ‘^[0-9]*’) ]
	then
		if [ -n “${list[$1]” ]
		then # 将新断点与旧断点重新排序放入 _linebp
			_linebp=($(echo $( (for i in ${_linebp[@]} $1;do
			echo $i; done) | sort -n) ))
		else # 空行不能设置断点
			_msg “Breakpoints can only be set on non-blank lines”
		fi
	else
		_msg “Please specify a numeric line number”
	fi
}</p>

<h2 id="section-5">其它函数这里省略</h2>
<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning the Bash Shell 笔记-杂项]]></title>
    <link href="http://blog.loudou.info/blog/2014/06/05/learning-the-bash-shell-bi-ji-za-xiang/"/>
    <updated>2014-06-05T09:49:16+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/06/05/learning-the-bash-shell-bi-ji-za-xiang</id>
    <content type="html"><![CDATA[<p>一些零散的内容
<!--more-->
## getopts
getopts 主要用来定义和解析脚本支持的命令行选项.</p>

<p>简单用法如下:</p>

<p>```bash
while getopts “:ab:c” opt
do
	case $opt in
		a )
			statements for -a
			;;
		b )
			$OPTARG is the argument value of -b
			statements for -b
			;;
		c )
			statements for -c
			;;
		\? )
			other
	esac
done</p>

<p>shift $(($OPTIND - 1))</p>

<p>main scripts
```</p>

<ul>
  <li>
    <p>getopts 第一个字符串中声明支持的选项名 (只能单字符);
如果字符后面加有冒号(:)则表示该选项有对应的选项参数,
参数值会保存到变量<code>OPTARG</code>中</p>
  </li>
  <li>
    <p>执行过 getopt 后, 会在变量<code>OPTIND</code>中保存 (选项+选项参数) 的总个数. 用 shift $(($OPTIND - 1)) 来确保后续代码不受实际选项个数影响</p>
  </li>
  <li>
    <p>在声明所支持的选项时, 如果以冒号(:)开头, 可以忽略传入不合法的选项</p>
  </li>
</ul>

<h2 id="shell--make">shell 实现极简 make</h2>
<p>没有变量支持什么, 只是解释命令和依赖</p>

<p>```
#!/bin/sh</p>

<h1 id="set--o-verbose">set -o verbose</h1>

<p>makecmd()
{
    read target colon sources
    for src in $sources
    do
        if [ $src -nt $target ]
        then
            while read cmd
            do
                echo “$cmd”
                eval ${cmd#\t}
            done
            break
        fi
    done
}</p>

<p>makecmd &lt; Makefile
```</p>

<ul>
  <li>
    <p>只能处理一个命令, 不支持变量什么的</p>
  </li>
  <li>
    <p>用 read 从标准输入中读取 target colon sources</p>
  </li>
  <li>
    <p>循环判断 sources 中各依赖与 target 修改日期; <code>FILE1 -nt FIlE2</code>, <code>FILE1 -ot
FILE2</code> 用来比较两个文件修改时间</p>
  </li>
  <li>
    <p>eval “string” 将 string 作为 bash 命令解析</p>
  </li>
</ul>
]]></content>
  </entry>
  
</feed>
