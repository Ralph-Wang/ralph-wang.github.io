<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: jstack | 挨踢夜归人]]></title>
  <link href="http://ralph-wang.github.io//tags/jstack/atom.xml" rel="self"/>
  <link href="http://ralph-wang.github.io/"/>
  <updated>2014-09-05T20:31:16+08:00</updated>
  <id>http://ralph-wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 jstack 线程定位初体验]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/03/01/yong-jstack-xian-cheng-ding-wei-chu-ti-yan/"/>
    <updated>2014-03-01T22:42:48+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/03/01/yong-jstack-xian-cheng-ding-wei-chu-ti-yan</id>
    <content type="html"><![CDATA[<p>用 top + jstack 定位 java 线程问题
<!--more--></p>

<h3 id="section">1. 需要定位的程序</h3>

<p>首先, 写一个用于计算并输出蜚波那契数列的 java 程序, 大致的输出信息如下.</p>

<p><img src="/blogimgs/thread-fb.png" alt="Fibonacci" title="a Fibonacci Thread" /></p>

<p>这里特意写成<strong>死循环</strong>, 让它不停地去消耗 CPU</p>

<h3 id="top-">2. 用 top 命令定位进程号</h3>
<p>程序运行起来之后, 就该 <code>top</code> 命令出场了.</p>

<p>直接在命令行中输入</p>

<p><code>bash
$top
</code></p>

<p>看 <code>top</code> 命令的输出
<img src="/blogimgs/thread-top.png" alt="use top" title="use top" />
看到消耗 CPU 最高的就是一个 java 进程.</p>

<p>OK, 记下进程号 <strong>100162</strong></p>

<blockquote>
  <p>补充:  <br />
&gt; <code>top</code> 添加 -c 参数可以查看到命令的参数信息  <br />
&gt; 这样可以看到 java 具体执行的类, 定位更准确</p>
</blockquote>

<h3 id="top--h--p-">3. 用 top -H -p 命令定位到线程号</h3>
<p>现在, 我们知道消耗 CPU 最高的进程是哪个了. </p>

<p>但我们还不知道具体是哪个线程的问题, 所以不着急用 <code>jstack</code> 去获取 java 进程快照. </p>

<p>再次使用 <code>top</code> 命令, 不过, 这次我们加上 <code>-H -p</code> 参数来查看线程运行情况.</p>

<p><code>bash
$ top -H -p 100162
</code></p>

<blockquote>
  <p>注: <em>也可以 <code>top -p &lt;pid&gt;</code> 后再敲 H 打开子线程信息</em></p>
</blockquote>

<p>这次, 得到如下图的结果:
<img src="/blogimgs/thread-topHp.png" alt="use top -H -p (pid)" title="use top -H -p &lt;pid&gt;" /></p>

<p>消耗 CPU 最高的不再是 100162 了. 可以清楚的看到是线程 <strong>100172</strong></p>

<h3 id="jstack-">4. 用 jstack 定位到代码行</h3>
<p>下面, 就可以用 <code>jstack</code> 来导出进程的堆栈信息了.</p>

<p><code>bash
$jstack 100162
</code></p>

<ul>
  <li>这里不能直接使用 <code>jstack 100172</code>的形式, jstack 似乎只能对<strong>主线程</strong>使用</li>
  <li>jstack 不能导出堆栈问题解决: <a href="http://www.haply.info/blog/archives/305">jstack 不能导出堆栈</a></li>
</ul>

<p>然后, 在堆栈信息中找到 nid=0x27bc(100172 的 16 进制) 的线程.</p>

<p>就是下面的 <strong>Thread-0</strong> 线程了</p>

<p><img src="/blogimgs/thread-jstack.png" alt="use jstack" title="use jstack" /></p>

<p>全是 <code>Fibonacci.calcFibo (testJstack.java:28)</code></p>

<p>定位源码文件 <code>testJstack.java</code> 第 28 行, 最土最慢最二的蜚波那契数列算法…</p>

<p><img src="/blogimgs/thread-28.png" alt="get the criminal" title="get the criminal" /></p>

<p>问题定位结束</p>

<p>上完整源码</p>

<p><div><script src='https://gist.github.com/9290490.js?file=testJstack.java'></script>
<noscript><pre><code>public class testJstack {
    public static void main(String[] args) {
        Thread t = new Thread(new Fibonacci());
        t.start();
    }
}

class Fibonacci implements Runnable {
    public void run() {
        while (true) {
            for (int i = 0; i &lt; 20; i++) {
                System.out.println(calcFibo(i));
            }
        }
    }
    
    /**
     * 最土最慢的蜚波那契计算函数.
     * @return int
     */
    private int  calcFibo(final int n) {

        if (n == 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        } else {
            return calcFibo(n-1) + calcFibo(n-2);
        }
    }
}
</code></pre></noscript></div>
</p>

]]></content>
  </entry>
  
</feed>
