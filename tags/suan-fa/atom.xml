<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: 算法 | 挨踢夜归人]]></title>
  <link href="http://loudou.info//tags/suan-fa/atom.xml" rel="self"/>
  <link href="http://loudou.info/"/>
  <updated>2016-03-27T22:38:48+08:00</updated>
  <id>http://loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[几个排序算法(二)]]></title>
    <link href="http://loudou.info/blog/2015/10/14/ji-ge-pai-xu-suan-fa-er/"/>
    <updated>2015-10-14T17:21:15+08:00</updated>
    <id>http://loudou.info/blog/2015/10/14/ji-ge-pai-xu-suan-fa-er</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">归并排序</a></li>
  <li><a href="#section-1">原理</a></li>
  <li><a href="#section-4">快速排序</a>    <ul>
      <li><a href="#section-5">原理</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">归并排序</h2>

<h2 id="section-1">原理</h2>

<p><code>归并排序</code>的根基在于递归.</p>

<h4 id="section-2">初始状态</h4>

<p>两个数排序只需要将较小的那个放到前面就可以了.</p>

<p>那么, 对于两个列表而言, 当列表内只有一个数时. 可以很容易的合并成一个有序的列表</p>

<h4 id="section-3">基本推导</h4>

<p>两个有序的列表, 合并时总是从两个列表头取较小的值,
可以将两个有序列表合并成一个有序列表.</p>

<p>对于一个无序的列表, 可以将它不断分割, 直到得到初始状态中的<code>列表中只有一个数</code>
再逐次向止运算, 即可得到最终的排序结果</p>

<p>```python
def merge_sort(lst):
    if len(lst) == 1:
        return lst</p>

<pre><code>m = len(lst) / 2
left = merge_sort(lst[:m])
right = merge_sort(lst[m:])

merged = []
i = 0
j = 0
p = len(left)
q = len(right)
while i &lt; p and j &lt; q:
    if left[i] &lt; right[j]:
        merged.append(left[i])
        i += 1
    else:
        merged.append(right[j])
        j += 1

while i &lt; p:
    merged.append(left[i])
    i += 1
while j &lt; q:
    merged.append(right[j])
    j += 1
return merged ```
</code></pre>

<h2 id="section-4">快速排序</h2>

<h3 id="section-5">原理</h3>

<p><code>快速排序</code> 每一步都在找某一个特定元素的最终位置.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>具体方法就是, 选定一个特定的数. 将比它大的放到其右边. 比它小的放到其左边.</p>

<p>然后再分别对左边和右边做同样的事.</p>

<p>```python
def quick_sort(lst):
    “””  sort</p>

<pre><code>:type lst: list
:returns: list

"""
if lst == []:
    return []
pivot = lst.pop()
left = []
right = []
while lst:
    x = lst.pop()
    if x &lt; pivot:
        left.append(x)
    else:
        right.append(x)
return quick_sort(left) + [pivot] + quick_sort(right)
</code></pre>

<p>```</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>这是它被用来找第 N 大的数的原因<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几个排序算法(一)]]></title>
    <link href="http://loudou.info/blog/2015/10/06/ji-ge-pai-xu-suan-fa-yi/"/>
    <updated>2015-10-06T20:51:23+08:00</updated>
    <id>http://loudou.info/blog/2015/10/06/ji-ge-pai-xu-suan-fa-yi</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">插入排序</a>    <ul>
      <li><a href="#section-1">原理</a></li>
      <li><a href="#section-2">原地化</a></li>
    </ul>
  </li>
  <li><a href="#section-3">选择排序</a>    <ul>
      <li><a href="#section-4">原理</a></li>
      <li><a href="#section-5">原地化</a></li>
    </ul>
  </li>
  <li><a href="#section-6">冒泡排序</a>    <ul>
      <li><a href="#section-7">原理</a></li>
      <li><a href="#section-8">减少循环</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">插入排序</h2>

<h3 id="section-1">原理</h3>

<ol>
  <li>列表 A 是待排序列表, 列表 B 是空列表</li>
  <li>从列表 A 读数, 并插入列表 B. 插入时, 将元素放在顺序正确的位置</li>
  <li>当元素从列表 A 完全转移到列表 B 时, 排序完成</li>
</ol>

<p><code>python
def insert_sort(lst):
    ret = []
    for i in lst:
        for j in xrange(len(ret)):
            if ret[j] &gt; i:
                ret.insert(j, i)
        else:
            ret.append(i)
    return ret
</code></p>

<h3 id="section-2">原地化</h3>

<p>因为列表 A 和列表 B 中元素总和是一定的.
可以利用原始列表的已访问部分作为列表 B, 进而完成原地<sup id="fnref:inplace"><a href="#fn:inplace" rel="footnote">1</a></sup>的排序.</p>

<p><code>
def insert_sort(lst):
    for i in xrange(len(lst)):
        key = lst[i]
        # 下面整个循环都是在完成插入合适的位置
        # 因为是原地插入, 所以需要一边搜索一边交换
        for j in xrange(i-1, -1, -1):
            if key &lt; lst[j]:
                lst[j+1] = lst[j]
                lst[j] = key
            else:
                break
</code></p>

<h2 id="section-3">选择排序</h2>

<h3 id="section-4">原理</h3>

<ol>
  <li>类似于插入排序, 不同的是, 不再是按顺序从列表 A 从选择元素, 而是选择最大/最小值再插入.</li>
  <li>插入到列表 B 时不再涉及位置问题, 最大值总是插入列表头, 最小值总是插入列表尾</li>
</ol>

<p><code>python
def select_sort(lst):
    ret = []
    n = len(lst)
    for _ in xrange(lst):
        x = min(lst)
        lst.remove(x)
        ret.append(x)
    return ret
</code></p>

<h3 id="section-5">原地化</h3>

<p>把列表前半部分看作空列表, 同样可以把<code>选择排序</code>原地化</p>

<p><code>python
def select_sort(lst):
    n = len(lst)
    for i in xrange(lst):
        min_idx = lst.index(min(lst[i:]))
        if min_idx != i: # 最小值在 i 位置时位置正确, 不交换
            lst[min_idx] = lst[i] ^ lst[min_idx]
            lst[i] = lst[i] ^ lst[min_idx]
            lst[min_idx] = lst[i] ^ lst[min_idx]
</code></p>

<h2 id="section-6">冒泡排序</h2>

<h3 id="section-7">原理</h3>

<p><code>冒泡排序</code>和前两个排序的不同在于它一开始就是原地的.</p>

<ol>
  <li>它遍历所有索引, 每次都判断当前索引的值与后一索引顺序是否正确. 不正确则进行交换.</li>
  <li>进行等同数组长度次数的遍历后, 排序完成</li>
</ol>

<p><code>
def bubble_sort(lst):
    n = len(lst)
    for i in xrange(n):
        for j in xrange(n-1):
            if lst[j] &gt; lst[j+1]:
                lst[j] = lst[j] ^ lst[j+1]
                lst[j+1] = lst[j] ^ lst[j+1]
                lst[j] = lst[j] ^ lst[j+1]
</code></p>

<h3 id="section-8">减少循环</h3>

<p>因为冒泡排序的特定, 经过 N 次遍历后, 数组后面的 N 项顺序是正确的.
不需要进行再遍历.</p>

<p><code>
def bubble_sort(lst):
    n = lst(lst)
    for i in xrange(n):
        for j in xrange(n-1):
            if lst[j] &gt; lst[j+1]:
                lst[j] = lst[j] ^ lst[j+1]
                lst[j+1] = lst[j] ^ lst[j+1]
                lst[j] = lst[j] ^ lst[j+1]
</code></p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:inplace">
      <p>英文术语是<em>in-place</em>, 没太注意正式的中译名.<a href="#fnref:inplace" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single Number]]></title>
    <link href="http://loudou.info/blog/2014/08/06/single-number/"/>
    <updated>2014-08-06T16:44:56+08:00</updated>
    <id>http://loudou.info/blog/2014/08/06/single-number</id>
    <content type="html"><![CDATA[<p>最近开始撸算法相关的东西. 于是在 LeetCode 上找一些题来练习</p>

<!--more-->

<ul id="markdown-toc">
  <li><a href="#section">题目</a></li>
  <li><a href="#section-1">我的解法</a></li>
  <li><a href="#section-2">大触的解法</a>    <ul>
      <li><a href="#section-3">异或</a></li>
      <li><a href="#section-4">解</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">题目</h2>

<p>第一题还是选择简单点的好了. 选择了一个 AC 率最高的题目.</p>

<p>原题:</p>

<p>Given an array of integers, every element appears twice except for one. Find that single one.</p>

<p>Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>

<p>翻译:</p>

<p>一个整型数组, 其中所有元素都出现了<strong>两次</strong>, 只有一个例外. 找出这个例外</p>

<p>注意:
你的算法的时间复杂度必须是线性的. 能不能不使用额外的空间就实现它?</p>

<h2 id="section-1">我的解法</h2>

<p>使用 Cache 计数. 可以 AC, 但使用了额外空间.</p>

<p><code>python
class Solution:
    # @param A, a list of integer
    # @return an integer
    def singleNumber(self, A):
        cached = {}
        for i in  A:
            cached[i] = cached.get(i, 0) + 1
        for i in cached:
            if cached[i] == 1:
                return i
</code></p>

<p>这种方法算是比较通用的通用的解法吧. 重复的元素可以不限制于<strong>两次</strong></p>

<p>也许, 正因为没有利用到<strong>两次</strong>这个条件, 所以才需要使用到额外空间?</p>

<p>如果先排序的话倒是可以通过比较前后两个元素是否相等来寻找唯一元素.</p>

<p>但是目前撸过的排序算法里面就没有线性复杂度的…所以放弃了..</p>

<h2 id="section-2">大触的解法</h2>

<p>之后浏览了下讨论区. 似乎使用 nlg(n) 复杂度的也 AC 了..</p>

<p>不过看到一个相当 trick 的解法 – 使用<code>异或</code>计算<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h3 id="section-3">异或</h3>

<p>简单说明下异或操作:</p>

<p><code>python
x = 1             # 1 -&gt; 0x01 -&gt; 00000001
y = 2             # 2 -&gt; 0x02 -&gt; 00000010
z = x ^ y         # 3 -&gt; 0x03 -&gt; 00000011
</code></p>

<p>把整型数按位进行计算. 同为0或1则得到0, 一个0一个1则得到1
因此得到上面的 <code>1 ^ 2 = 3</code> 的计算</p>

<p>关于异或, 比较特殊的计算</p>

<p><code>python
a ^ a == 0
a ^ 0 == a
a ^ b == b ^ a
</code></p>

<p>大触的解法里就用到了上面的公式</p>

<h3 id="section-4">解</h3>

<p>```python
class Solution:
    # @param A, a list of integer
    # @return an integer
    def singleNumber(self, A):
        ans = 0
        for i in iter(A):
            ans ^= i
        return ans</p>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    A = [2, 2, 3, 5, 4, 3, 5]
    s = Solution()
    print s.singleNumber(A)
```</p>

<p>原理就是上面提到的特殊计算: (2^2) ^ (3^3) ^ (5^5) ^ 4 = 4</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>给大触们跪了 Orz<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试技术问题解答]]></title>
    <link href="http://loudou.info/blog/2014/03/25/mian-shi-wen-ti-jie-da/"/>
    <updated>2014-03-25T19:49:37+08:00</updated>
    <id>http://loudou.info/blog/2014/03/25/mian-shi-wen-ti-jie-da</id>
    <content type="html"><![CDATA[<p>面试时没有完全回答上或有存疑的问题
<!--more-->
Linux
——
### 统计文本中某字符串出现次数
前提: 一行中要查找的字符串可能出现多次.</p>

<p>文本样例:</p>

<p><code>text sample
ralph, ralph
Hello, ralph, HaHA
No such word
Hey
ralph again.
two times ralph ,ralph
</code></p>

<p>统计文中 <code>ralph</code> 出现的次数</p>

<p>如果确定 ralph 在每行只出现一次的话, 可以通过 <code>cat sample | grep ralph | wc
-l</code>解决</p>

<p>但因为一行里可以关键词可以出现多次, 这种方式会漏掉一些. 所以并不是好的解决方案</p>

<p>遂搜索之.  得如下解法</p>

<h3 id="grep---o-">方法 1: grep 的 -o 选项</h3>

<p><code>bash
cat sample | grep -o ralph | wc -l
</code>
解释:</p>

<p>给 <code>grep</code> 加上 <code>-o</code> 选项后, 它只会打印出匹配到的字符串, 并且每匹配一次就打印一行. </p>

<h3 id="awk--rs">方法 2: 神器 awk 之 RS</h3>

<p><code>bash
awk -v RS='ralph' 'END {print NR-1}' sample
</code></p>

<p>解释:</p>

<p>awk 中 RS 变量为行分隔符, 用目标字符串分隔行, 则总行数 = 出现次数 + 1.</p>

<p>在 END 中访问 NR 则为最后一行的行号, awk 起始行为 1, 所以此时总行数 = NR</p>

<h3 id="awk--gsub">方法 3: 神器 awk 之 gsub</h3>

<p><code>bash
awk '{count+=gsub(/ralph/, "#")} END {print count}' sample
</code>
解释:
awk 中的 <code>gsub</code> 返回文本的替换次数, 对每行的替换次数求和即可.</p>

<p>另外, awk 中的 <code>sub</code> 函数在每行中只完成一次替换.</p>

<h2 id="java">Java</h2>
<p>### 反射
参考<a href="http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html">反射案例</a></p>

<h2 id="mysql">MySQL</h2>
<p>MySQL 相关的性能问题, 关于<strong>执行计划</strong>的倒是 OK.</p>

<p>但一直没时间整理下关于慢查询日志的知识点. 所以这几次都只能回答说知道这个概念, 具体的配置参数却不记得了.</p>

<p>在这里整理一下, 权当备忘</p>

<ul>
  <li>查看慢查询是否开启</li>
</ul>

<p>```mysql
mysql&gt; show variables like ‘%slow%’;
| Variable_name       | Value
| log_slow_queries    | OFF
| slow_launch_time    | 2
| slow_query_log      | OFF
| slow_query_log_file | ***</p>

<p>mysql&gt; show variables like ‘long%’;
| Variable_name   | Value    |
| long_query_time | 1.000000 |
```</p>

<ul>
  <li>在 my.cnf 中配置开启慢查询跟踪</li>
</ul>

<p><code>ini my.cnf
[mysqld]
log-slow-queries = **** # 日志存放目录, 一般放到 MySQL 数据库的地方
long-query-time = 2 # 超过这个时间(单位:秒) 的查询为慢查询
log-queries-not-using-indexes # 记录下没有使用索引的查询
</code></p>

<p>产生慢查询日志后可以使用 mysqldumpslow 工具进行分析查看了.</p>

<p>接下来的事就交给 <code>explain</code> 吧.</p>

<h2 id="section">算法</h2>
<p>### 问题 1 链表倒序
…面试时, 想到去 clone next.. 为毛当时就没想到多给个变量呢…</p>

<p>```java List.java
public class List<t> { // 后进先出列表
	private static class Node<t> {
		private T item;
		private Node<t> next;
		/** init a end Node */
		public Node() {
			item = null;
			next = null;
		}</t></t></t></p>

<pre><code>	/** normal Node */
	public Node(T item, Node&lt;T&gt; next) {
		this.item = item;
		this.next = next;
	}

	private T getItem() {
		return item;
	}

	private Node&lt;T&gt; getNext() {
		return next;
	}

	private void setNext(Node&lt;T&gt; next) {
		this.next = next;
	}

	public boolean isEnd() {
		return (next == null &amp;&amp; item == null);
	}
}

private Node&lt;T&gt; top;

public List() {
	top = new Node&lt;T&gt;(); //init a end Node for list
}

/** push a item to the top */
public void push(T item) {
	top = new Node&lt;T&gt;(item, top);
}

/** pop the top item */
public T pop() {
	T result = null;
	if (top.isEnd()) {
		return result;
	}
	result = top.getItem();
	top = top.getNext();
	return result;
}

/** reverse the list */
public void reverse() {
	Node&lt;T&gt; cur = top;
	Node&lt;T&gt; next = cur.getNext();
	Node&lt;T&gt; pre = null;
	if (cur.isEnd()) { // Empty list
		return;
	}

	top.setNext(new Node&lt;T&gt;()); // a new sentinel
	do {
		pre = cur;
		cur = next;
		next = cur.getNext();
		cur.setNext(pre);
	} while(!next.isEnd());
	// reset top
	top = cur;
}

public static void main(String[] args) {
	List&lt;String&gt; l = new List&lt;String&gt;();
	l.push("a");
	l.push("B");
	l.push("c");
	l.push("D");
	l.push("e");
	l.push("F");
	l.reverse();
	String res = null;
	while ((res = l.pop()) != null) {
		System.out.println(res);
	}
} }
</code></pre>

<p>```
算法还是弱项…</p>

<h3 id="section-1">问题 2 文本替换</h3>
<p>今天太晚了, 明天再继续</p>

<p>—<em>** 2014-04-06 更新 **</em>—</p>

<p>需求, 字符串或字符数组, 如 <code>AAABBBAAACCADDD</code>, 取出连续的字符, 第N次出现取出连续N个, 不足则跳过</p>

<p>如 AAABBBAAACCADDD -&gt; ABAACAD</p>

<p>```java
import java.util.*;</p>

<p>public class Sub {
	public static void main(String[] args) {
		char[] t = {‘A’, ‘A’, ‘A’, ‘B’, ‘B’, ‘B’,’A’, ‘A’, ‘A’, ‘C’,
			‘C’, ‘A’, ‘D’, ‘D’, ‘D’};
		System.out.println(sub(t));
	}/* output:
		ABAACAD
	  *///:~</p>

<pre><code>public static String sub(final char[] charArray) {
	String res = "";
	HashMap&lt;Character, Integer&gt; count =
		new HashMap&lt;Character, Integer&gt;();
	int seq = 0;
	int curCount = 0;
	char pre = '\0';
	for (int i = 0; i &lt; charArray.length; i++) {
		if (charArray[i] == pre &amp;&amp; curCount &gt;= seq) {
			continue;
		}
		if (charArray[i] != pre) { // recount the new char
			curCount = 0;
			// get the sequence of the char
			if (count.get(charArray[i]) == null) {
				seq = 1;
			} else {
				seq = count.get(charArray[i]) + 1;
			}
			// cache the char sequence
			count.put(charArray[i], seq);
		}
		res = res + charArray[i];
		curCount++;
		pre = charArray[i];
	}
	return res;
} }
</code></pre>

<p>```
若使用 <code>String</code> 作为输入, 则用 charAt 方法获取字符</p>
]]></content>
  </entry>
  
</feed>
