<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: 排序 | 挨踢夜归人]]></title>
  <link href="http://loudou.info//tags/pai-xu/atom.xml" rel="self"/>
  <link href="http://loudou.info/"/>
  <updated>2016-01-29T11:12:18+08:00</updated>
  <id>http://loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[几个排序算法(二)]]></title>
    <link href="http://loudou.info/blog/2015/10/14/ji-ge-pai-xu-suan-fa-er/"/>
    <updated>2015-10-14T17:21:15+08:00</updated>
    <id>http://loudou.info/blog/2015/10/14/ji-ge-pai-xu-suan-fa-er</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">归并排序</a></li>
  <li><a href="#section-1">原理</a></li>
  <li><a href="#section-4">快速排序</a>    <ul>
      <li><a href="#section-5">原理</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">归并排序</h2>

<h2 id="section-1">原理</h2>

<p><code>归并排序</code>的根基在于递归.</p>

<h4 id="section-2">初始状态</h4>

<p>两个数排序只需要将较小的那个放到前面就可以了.</p>

<p>那么, 对于两个列表而言, 当列表内只有一个数时. 可以很容易的合并成一个有序的列表</p>

<h4 id="section-3">基本推导</h4>

<p>两个有序的列表, 合并时总是从两个列表头取较小的值,
可以将两个有序列表合并成一个有序列表.</p>

<p>对于一个无序的列表, 可以将它不断分割, 直到得到初始状态中的<code>列表中只有一个数</code>
再逐次向止运算, 即可得到最终的排序结果</p>

<p>```python
def merge_sort(lst):
    if len(lst) == 1:
        return lst</p>

<pre><code>m = len(lst) / 2
left = merge_sort(lst[:m])
right = merge_sort(lst[m:])

merged = []
i = 0
j = 0
p = len(left)
q = len(right)
while i &lt; p and j &lt; q:
    if left[i] &lt; right[j]:
        merged.append(left[i])
        i += 1
    else:
        merged.append(right[j])
        j += 1

while i &lt; p:
    merged.append(left[i])
    i += 1
while j &lt; q:
    merged.append(right[j])
    j += 1
return merged ```
</code></pre>

<h2 id="section-4">快速排序</h2>

<h3 id="section-5">原理</h3>

<p><code>快速排序</code> 每一步都在找某一个特定元素的最终位置.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>具体方法就是, 选定一个特定的数. 将比它大的放到其右边. 比它小的放到其左边.</p>

<p>然后再分别对左边和右边做同样的事.</p>

<p>```python
def quick_sort(lst):
    “””  sort</p>

<pre><code>:type lst: list
:returns: list

"""
if lst == []:
    return []
pivot = lst.pop()
left = []
right = []
while lst:
    x = lst.pop()
    if x &lt; pivot:
        left.append(x)
    else:
        right.append(x)
return quick_sort(left) + [pivot] + quick_sort(right)
</code></pre>

<p>```</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>这是它被用来找第 N 大的数的原因<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几个排序算法(一)]]></title>
    <link href="http://loudou.info/blog/2015/10/06/ji-ge-pai-xu-suan-fa-yi/"/>
    <updated>2015-10-06T20:51:23+08:00</updated>
    <id>http://loudou.info/blog/2015/10/06/ji-ge-pai-xu-suan-fa-yi</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">插入排序</a>    <ul>
      <li><a href="#section-1">原理</a></li>
      <li><a href="#section-2">原地化</a></li>
    </ul>
  </li>
  <li><a href="#section-3">选择排序</a>    <ul>
      <li><a href="#section-4">原理</a></li>
      <li><a href="#section-5">原地化</a></li>
    </ul>
  </li>
  <li><a href="#section-6">冒泡排序</a>    <ul>
      <li><a href="#section-7">原理</a></li>
      <li><a href="#section-8">减少循环</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">插入排序</h2>

<h3 id="section-1">原理</h3>

<ol>
  <li>列表 A 是待排序列表, 列表 B 是空列表</li>
  <li>从列表 A 读数, 并插入列表 B. 插入时, 将元素放在顺序正确的位置</li>
  <li>当元素从列表 A 完全转移到列表 B 时, 排序完成</li>
</ol>

<p><code>python
def insert_sort(lst):
    ret = []
    for i in lst:
        for j in xrange(len(ret)):
            if ret[j] &gt; i:
                ret.insert(j, i)
        else:
            ret.append(i)
    return ret
</code></p>

<h3 id="section-2">原地化</h3>

<p>因为列表 A 和列表 B 中元素总和是一定的.
可以利用原始列表的已访问部分作为列表 B, 进而完成原地<sup id="fnref:inplace"><a href="#fn:inplace" rel="footnote">1</a></sup>的排序.</p>

<p><code>
def insert_sort(lst):
    for i in xrange(len(lst)):
        key = lst[i]
        # 下面整个循环都是在完成插入合适的位置
        # 因为是原地插入, 所以需要一边搜索一边交换
        for j in xrange(i-1, -1, -1):
            if key &lt; lst[j]:
                lst[j+1] = lst[j]
                lst[j] = key
            else:
                break
</code></p>

<h2 id="section-3">选择排序</h2>

<h3 id="section-4">原理</h3>

<ol>
  <li>类似于插入排序, 不同的是, 不再是按顺序从列表 A 从选择元素, 而是选择最大/最小值再插入.</li>
  <li>插入到列表 B 时不再涉及位置问题, 最大值总是插入列表头, 最小值总是插入列表尾</li>
</ol>

<p><code>python
def select_sort(lst):
    ret = []
    n = len(lst)
    for _ in xrange(lst):
        x = min(lst)
        lst.remove(x)
        ret.append(x)
    return ret
</code></p>

<h3 id="section-5">原地化</h3>

<p>把列表前半部分看作空列表, 同样可以把<code>选择排序</code>原地化</p>

<p><code>python
def select_sort(lst):
    n = len(lst)
    for i in xrange(lst):
        min_idx = lst.index(min(lst[i:]))
        if min_idx != i: # 最小值在 i 位置时位置正确, 不交换
            lst[min_idx] = lst[i] ^ lst[min_idx]
            lst[i] = lst[i] ^ lst[min_idx]
            lst[min_idx] = lst[i] ^ lst[min_idx]
</code></p>

<h2 id="section-6">冒泡排序</h2>

<h3 id="section-7">原理</h3>

<p><code>冒泡排序</code>和前两个排序的不同在于它一开始就是原地的.</p>

<ol>
  <li>它遍历所有索引, 每次都判断当前索引的值与后一索引顺序是否正确. 不正确则进行交换.</li>
  <li>进行等同数组长度次数的遍历后, 排序完成</li>
</ol>

<p><code>
def bubble_sort(lst):
    n = len(lst)
    for i in xrange(n):
        for j in xrange(n-1):
            if lst[j] &gt; lst[j+1]:
                lst[j] = lst[j] ^ lst[j+1]
                lst[j+1] = lst[j] ^ lst[j+1]
                lst[j] = lst[j] ^ lst[j+1]
</code></p>

<h3 id="section-8">减少循环</h3>

<p>因为冒泡排序的特定, 经过 N 次遍历后, 数组后面的 N 项顺序是正确的.
不需要进行再遍历.</p>

<p><code>
def bubble_sort(lst):
    n = lst(lst)
    for i in xrange(n):
        for j in xrange(n-1):
            if lst[j] &gt; lst[j+1]:
                lst[j] = lst[j] ^ lst[j+1]
                lst[j+1] = lst[j] ^ lst[j+1]
                lst[j] = lst[j] ^ lst[j+1]
</code></p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:inplace">
      <p>英文术语是<em>in-place</em>, 没太注意正式的中译名.<a href="#fnref:inplace" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
