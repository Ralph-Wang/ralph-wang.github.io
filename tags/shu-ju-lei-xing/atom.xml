<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: 数据类型 | Test Notes By _漏斗]]></title>
  <link href="http://Ralph-Wang.github.io//tags/shu-ju-lei-xing/atom.xml" rel="self"/>
  <link href="http://Ralph-Wang.github.io/"/>
  <updated>2014-05-19T16:02:26+08:00</updated>
  <id>http://Ralph-Wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java之Boxing和Unboxing]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/09/javazhi-boxinghe-unboxing/"/>
    <updated>2014-02-09T22:07:16+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/09/javazhi-boxinghe-unboxing</id>
    <content type="html"><![CDATA[<p>Java中有两大类数据类型： <strong>基本类型</strong>和<strong>引用类型</strong>。</p>

<p>另外地，<strong>基本类型</strong>们都有其对应的<strong>封装类</strong>。</p>

<p>比如： <code>int</code> &ndash;> <code>Integer</code></p>

<!--more-->


<p>将<strong>基本类型</strong>转换成其对应的<strong>封装类</strong>的过程，就叫做装箱(Boxing)。</p>

<p>反之，就叫拆箱(Unboxing)。</p>

<h2>Auto Boxing &amp;&amp; Unboxing</h2>

<p>因为每次显示的装箱、拆箱过于麻烦，从<code>JDK 5</code>开始，Java　提供了自动装箱、拆箱(Auto Boxing &amp; Unboxing)</p>

<p>让下面这样的代码成立。</p>

<p><code>java
Integer i = 100; //Boxing
int j = new Integer(100); //Unboxing
</code></p>

<p>但是在装箱过程中，有个小特点需要注意一下。</p>

<p>当装箱的<code>int</code>类型在 -128~127 之间时，装箱后的引用会指向同一对象。</p>

<p>而不在这范围内的值，每次装箱都会产生一个新对象。</p>

<p>类似的其它基本类型的范围：</p>

<ul>
<li><code>boolean</code> : 装箱后总是指向同一对象</li>
<li><code>long</code> : -128L~127 之间，装箱后指向同一对象</li>
<li><code>float</code> : 总是产生新对象</li>
<li><code>double</code> : 总是产生新对象</li>
</ul>


<p>下面是测试代码：
{% gist 8900088 %}</p>
]]></content>
  </entry>
  
</feed>
