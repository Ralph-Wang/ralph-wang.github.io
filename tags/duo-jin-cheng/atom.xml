<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: 多进程 | 挨踢夜归人]]></title>
  <link href="http://ralph-wang.github.io//tags/duo-jin-cheng/atom.xml" rel="self"/>
  <link href="http://ralph-wang.github.io/"/>
  <updated>2016-10-08T11:10:22+08:00</updated>
  <id>http://ralph-wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Python 搞一个分布式系统玩?]]></title>
    <link href="http://ralph-wang.github.io/blog/2015/06/05/yong-python-gao-yi-ge-fen-bu-shi-xi-tong-wan/"/>
    <updated>2015-06-05T17:08:19+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2015/06/05/yong-python-gao-yi-ge-fen-bu-shi-xi-tong-wan</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">抽离队列</a></li>
  <li><a href="#section-1">任务分配</a></li>
  <li><a href="#section-2">任务处理</a></li>
  <li><a href="#section-3">结果输出</a></li>
  <li><a href="#section-4">一些思考</a></li>
</ul>

<p>最近在撸廖雪峰老师的 Python 教程. 算是对自己做一遍查缺补漏吧.</p>

<p>看到分布式进程一节, 自己做了一些发散. 现在写下来, 算是补一补长达 4 个月的博文空白…</p>

<p>基础的代码和结构见<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431929340191970154d52b9d484b88a7b343708fcc60000">原教程</a></p>

<h2 id="section">抽离队列</h2>

<p>为了让任务的分配和执行更自由的启动和停止.
我们必须把队列独立出来.</p>

<p>另外, 因为访问队列的客户端是共用的, 也抽离出来</p>

<p>```python base.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from multiprocessing.managers import BaseManager</p>

<p>class _QueueManagerServer(BaseManager):
    pass</p>

<p>def QueueManagerServer(task_queue, result_queue):
    _QueueManagerServer.register(‘get_task_queue’, callable=lambda: task_queue)
    _QueueManagerServer.register(‘get_result_queue’, callable=lambda: result_queue)
    return _QueueManagerServer</p>

<p>class _QueueManagerClient(BaseManager):
    pass</p>

<p>def QueueManagerClient():
    _QueueManagerClient.register(‘get_task_queue’)
    _QueueManagerClient.register(‘get_result_queue’)
    return _QueueManagerClient
```</p>

<p>因为具体的队列是在<strong>队列程序</strong>(<code>q.py</code>)中创建的, 所以这里 <code>base.py</code> 只提供一个函数.</p>

<p>客户端虽然不需要在使用时绑定具体队列, 但为了接口调用的一致, 仍然封装到一个函数</p>

<p>```python q.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from base import QueueManagerServer
from multiprocessing import Queue</p>

<p>task_queue = Queue()
result_queue = Queue()</p>

<p>Server = QueueManagerServer(task_queue, result_queue)</p>

<p>manager = Server(address=(‘0.0.0.0’, 5000), authkey=b’secret’)</p>

<p>manager.start()</p>

<p>manager.join()
```</p>

<p>这里最后一定要调用 join 来防止程序直接退出.</p>

<h2 id="section-1">任务分配</h2>

<p>这里我们让处理器”分布式”的向某个 webserver 发请求.</p>

<p>因为只是一个示例, 我们就直接向队列里输入要请求的 url.</p>

<p>```python dispatcher.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from base import QueueManagerClient</p>

<p>client = QueueManagerClient()(address=(‘0.0.0.0’, 5000), authkey=b’secret’)</p>

<p>client.connect()</p>

<p>task = client.get_task_queue()</p>

<p>n = 1000000
for i in xrange(n):
    task.put(‘http://localhost:8888/?q={0}’.format(i))
```</p>

<h2 id="section-2">任务处理</h2>

<p>因为不太喜欢依赖 <code>try...except</code>, 所以在取数据前加上一队列空的检查</p>

<p>```python worker.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from base import QueueManagerClient
import time, random
import requests</p>

<p>client = QueueManagerClient()(address=(‘0.0.0.0’, 5000), authkey=b’secret’)</p>

<p>print ‘connect to queue…’
client.connect()</p>

<p>task = client.get_task_queue()
result = client.get_result_queue()</p>

<p>def get(url):
    start = time.time()
    try:
        requests.get(url)
    except:
        ok = 0
    else:
        ok = 1
    finally:
        rt = time.time() - start
        return {‘ok’: ok, ‘rt’: rt}</p>

<p>while True:
    if task.empty():
        print ‘no task yet, wait 5s…’
        time.sleep(5)
        continue
    try:
        i = task.get(timeout=10)
        print ‘get {0}…‘.format(i)
        print ‘request…’
        o = get(i)
        result.put({‘i’: i, ‘o’: o})
    except Exception, e:
        print ‘Error: {0}’.format(e)
```</p>

<h2 id="section-3">结果输出</h2>

<p>这里我把结果输出也抽离出来了.</p>

<p>实际上应该根据应用来决定是放到 <code>dispatcher.py</code> 里, 还是抽离出来</p>

<p>```python output.py
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>from base import QueueManagerClient
import time</p>

<p>client = QueueManagerClient()(address=(‘0.0.0.0’, 5000), authkey=b’secret’)</p>

<p>client.connect()</p>

<p>result = client.get_result_queue()</p>

<p>while True:
    if result.empty():
        print ‘no result yet, wait 5s’
        time.sleep(5)
        continue
    try:
        print result.get(timeout=2)
    except Exception as e:
        print ‘Error: {0}’.format(e)
```</p>

<h2 id="section-4">一些思考</h2>

<p>实际上因为 QueueManager 的协议对开发者并不透明,
这样的<strong>分布式</strong>系统只能完全由 <code>Python</code> 来构建.</p>

<p>如果某部分需要更换语言会变得比较吃力.</p>

<p>相对的, 如果将队列更换成其它透明的队列服务(如, <code>memcacheq</code>), 
再定义好队列的数据格式. 便可以很容易的实现跨语言的<strong>分布式</strong>系统</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[装饰器与多进程以及Pickle]]></title>
    <link href="http://ralph-wang.github.io/blog/2015/02/15/zhuang-shi-qi-yu-duo-jin-cheng-yi-ji-pickle/"/>
    <updated>2015-02-15T21:39:08+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2015/02/15/zhuang-shi-qi-yu-duo-jin-cheng-yi-ji-pickle</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">缘起</a></li>
  <li><a href="#section-1">解答</a></li>
  <li><a href="#section-2">分析</a></li>
</ul>

<h2 id="section">缘起</h2>

<p>因为需要并发请求同时计时, 写上如下代码:</p>

<p>```python
def timer(func):
    def _wrap(<em>args):
        start = time.time()
        ret = func(</em>args)
        return ret, time.time() - start
    return _wrap</p>

<p>@timer
def get(url):
    return requests.get(url)</p>

<p>rets = []
for i in xrange(10):
    rets.append(pool.apply_async(get, (url,)))
for ret in rets:
    ret.get()
```</p>

<p>好的, 来执行脚本…</p>

<p>得到了如下错误, WTF:</p>

<p><code>
PicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed
</code></p>

<p>=,= 和 Pickle 有毛关系, 百思不得…</p>

<h2 id="section-1">解答</h2>

<p>这时候先上搜索引擎.</p>

<p>在 SO 上得到了这样一对问答: <a href="http://stackoverflow.com/questions/9336646/python-decorator-with-multiprocessing-fails">戳这里</a></p>

<p>简单总结一下:</p>

<ul>
  <li>进程间通信时, 对象(数据)的传输是需要序列化的.</li>
  <li>Python 中对象序列化最常见的方法是 Pickle</li>
  <li>不是所有的 Python 对象都可以用 Pickle 序列化</li>
  <li>函数装饰器反回的函数对象就不在可 Pickle 对象之列</li>
  <li>换成类装饰器就万事大吉</li>
</ul>

<p>好了, 先来结出类装饰器的版本:</p>

<p>```python
class timer(object):
    def <strong>init</strong>(self, func):
        self.func = func</p>

<pre><code>def __call__(self, *args):
    start = time.time()
    ret = self.func(*args)
    return ret, time.time() - start
</code></pre>

<p>def get(url):
    return requests.get(url)</p>

<p>timer_get = timer(get)
```</p>

<blockquote>
  <p>2016.01.29 更新: 要使装饰后的对象能被 pickle, 还不能使用 @ 语法装完成进行装饰</p>
</blockquote>

<h2 id="section-2">分析</h2>

<p>现在, 来分析一下为什么类装饰器就可以序列化, 而函数装饰器就不可以</p>

<p>先来看, 那些对象是可以序列化的. 参考<a href="https://docs.python.org/2/library/pickle.html#what-can-be-pickled-and-unpickle">官方文档</a></p>

<p>把这个问题相关的简单翻译一下:</p>

<ul>
  <li>只含有可 Pickle 元素的<code>元组</code>/<code>列表</code>/<code>集合</code>/<code>字典</code></li>
  <li>在模块顶层定义的<code>函数</code></li>
  <li><code>__dict__</code> 属性或 <code>__getstarte__()</code> 函数的返回可以 Pickle 的<code>实例</code></li>
</ul>

<h4 id="section-3">函数装饰器</h4>

<p><code>python
def timer(func):
    def _wrap(*args):
        # 省略
        return ret
    return _wrap
</code></p>

<p>我们知道, 装饰器实际上是表达式 <code>get = timer(get)</code> 的语法糖.</p>

<p>那么, 被装饰器包裹后的 <code>get</code> 实际上就是 <code>timer</code> 的返回值 =&gt; <code>_wrap</code> 函数.</p>

<p>而这函数定义的位置是在 <code>timer</code> 内部. 并不满足 Pickle 的条件(模块顶层定义).</p>

<p>所以会导致文章开始的那个错误.</p>

<h4 id="section-4">类装饰器</h4>

<p>```python
class timer(object):
    def <strong>init</strong>(self, func):
        self.func = func</p>

<pre><code>def __call__(self, *args):
    # 省略 ```
</code></pre>

<p>在这里, 被装饰器包裹后的 <code>get</code> 就变成了 <code>timer</code> 类的实例.</p>

<p>既然是实例, 再加上我们没有定义 <strong>getstate</strong> 方法, 就直接来看 <strong>dict</strong> 属性</p>

<p>明显的, 这个实例的 <strong>dict</strong> 是字典 <code>{'func': &lt;function get at 0x*****&gt;}</code></p>

<p>字典所包含的元素为原始的 <code>get</code> 函数, 这个函数是定义在模块顶层的.</p>

<p>既然如此, 那么类装饰器的结果自然也就是可 Pickle 了:</p>

<p><code>原 get 可 Pickle</code> =&gt; <code>__dict__ 可 Pickle</code> =&gt; <code>实例可 Pickle</code></p>

<hr />
]]></content>
  </entry>
  
</feed>
