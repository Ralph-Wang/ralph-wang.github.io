<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: shell | 挨踢夜归人]]></title>
  <link href="http://blog.loudou.info//tags/shell/atom.xml" rel="self"/>
  <link href="http://blog.loudou.info/"/>
  <updated>2015-02-16T15:52:03+08:00</updated>
  <id>http://blog.loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux bash 的 C-s]]></title>
    <link href="http://blog.loudou.info/blog/2014/08/13/linux-bash-de-c-s/"/>
    <updated>2014-08-13T22:22:02+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/08/13/linux-bash-de-c-s</id>
    <content type="html"><![CDATA[<p>putty 莫名不响应问题…</p>

<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">事故</a></li>
  <li><a href="#emacs">缘起 emacs</a></li>
  <li><a href="#c-sc-q">C-s/C-q</a></li>
  <li><a href="#c-s-">取消 C-s 绑定</a></li>
</ul>

<h2 id="section">事故</h2>

<p>在 Windows 下, 一直使用 putty 作为连接远程 Linux 的工具.</p>

<p>偶尔会出现 putty 不响应的现象. 一直不知道是什么问题.  <br />
遇到了也就是重启一下 putty. 也就没有太理会它</p>

<p>今天一次逗[哔]的尝试, 却找到了这个问题的源头:</p>

<blockquote>
  <p>该死的 C-s</p>
</blockquote>

<h2 id="emacs">缘起 emacs</h2>

<p><code>emacs</code> 中 <code>C-s</code> 和 <code>C-r</code> 对应的<code>向下</code>搜索和<code>向上</code>搜索  <br />
而 <code>bash</code> 的编辑快捷键默认采用的便是 emacs 模式.  <br />
便试了试 <code>C-s</code>. 结果出现了不响应的情况.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>搜索到下<a href="http://tianya23.blog.51cto.com/1081650/740207">这篇文章</a></p>

<h2 id="c-sc-q">C-s/C-q</h2>

<p>bash 中 <code>C-s</code> 和 <code>C-q</code> 是代表了一对<code>流控制符</code>.  <br />
其作用就是<code>停止</code>和<code>重启</code>从一个设备向另一个设备的输出流.  <br />
以前是用来切断速率过低的传输过程的(具体有多低, 我也不知道)    </p>

<p>现在的网络比以往要快很多,  <br />
所以这两个控制符也就没什么大用了  <br />
只需要记住, 误敲 <code>C-s</code> 导致 bash 不响应时,    </p>

<blockquote>
  <p>敲下<code>C-q</code> 即可恢复    </p>
</blockquote>

<p>—2014-09-05—</p>

<h2 id="c-s-">取消 C-s 绑定</h2>

<p><code>stty stop undef</code></p>

<p>若要长期生效, 可以写到个人 profile 中</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>bash 中 <code>C-r</code> 仍是<code>向上</code>搜索. 不过,搜索目标是命令历史<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning the Bash Shell 笔记-流控制]]></title>
    <link href="http://blog.loudou.info/blog/2014/05/22/learning-the-bash-shell-bi-ji-liu-kong-zhi/"/>
    <updated>2014-05-22T21:19:21+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/05/22/learning-the-bash-shell-bi-ji-liu-kong-zhi</id>
    <content type="html"><![CDATA[<p>但凡是代码就逃不开的流控制话题
<!--more--></p>

<h2 id="section">条件</h2>

<p>bash 中的条件值以数字 0 表示真, 非0 则为假, 并不存在布尔类型</p>

<p>其中有三种条件形式可以得到条件值</p>

<h3 id="section-1">命令的退出状态</h3>
<p>一般来说, Linux 的命令若执行成功, 则退出状态为 0, 不成功则返回 1-255</p>

<blockquote>
  <p><em>diff 命令除外, diff 返回 0 表示两个文件没有差别, 1 表示有差别, 2+
表示发生错误</em></p>
</blockquote>

<h3 id="section-2">脚本或函数的返回值</h3>

<p>在脚本或函数中, 用 return 表示结束并返回</p>

<p>当然, 在 bash 中只能返回数字类型, 返回字符串的话脚本会出错</p>

<p>另外, return 写返回值的话, 默认返回 0</p>

<blockquote>
  <p>脚本或函数中若没有用 return 返回值时, 则以最后一条命令的退出状态作为返回值</p>
</blockquote>

<h3 id="test">测试 test</h3>

<p>bash 中测试有两种写法</p>

<ul>
  <li>test condition</li>
  <li>[ condition ] <em>[ ] 两个方括号和中间条件之间必须要有一个空格</em></li>
</ul>

<p>两种写法是等价的, 详细的写法可参考 <code>man test</code></p>

<h2 id="ifelifelse">if..elif..else</h2>

<p><code>bash
if condition
then
	statements
[elif condition
then
	statements]
[else
	statements]
fi
</code></p>

<h2 id="case">case</h2>

<p><code>bash
case epxr in
	pattern1 )
		statements
		;;
	pattern2 )
		statements
		;;
	...
esac
</code>
<em>pattern1/2</em> 支持 bash 的通配符, 也支持 | 来表示多模式匹配</p>

<p><code>;;</code> 类似于其它语言中的 break</p>

<p>因为匹配是从上到下的, 所以可以用 <code>*)</code> 来表示 default</p>

<h2 id="select">select</h2>

<p><code>bash
select case [in caselist]
do
	statements about $case
	[break]
done
</code></p>

<p>用 caselist 里的所有项生成一个简单的选择菜单</p>

<p>statements 中 $case 就是选择的项</p>

<p>完成一次 statements 后, 若没有遇到 break 则会继续下一次 select</p>

<h2 id="for">for</h2>

<p><code>bash
for ((expr1;expr2;expr3))
	statements
end
</code></p>

<p>这个比较类似 Java 里的 for</p>

<p><code>bash
for i [in list]
do
	statements
done
</code></p>

<p>这个感觉更像 python 里的 for</p>

<p>若省略 [in list] 的话, 则默认从 $@ 中取值</p>

<p><code>bash
for i in {start..end..step}
do
	statements
done
</code>
bash 4.0 以上才有的语法</p>

<h2 id="while--until">while &amp; until</h2>

<p><code>bash
while condition
do
	statements
done
</code></p>

<p><code>bash
until condition
do
	statements
done
</code></p>

<p>while condition 等价于 until ! condition</p>

<p>两者没有其它区别</p>

<h2 id="section-3">附:</h2>
<p>又一个友好地显示 PATH 的方法</p>

<p>```bash showpath.sh
path=$PATH</p>

<p>while [ $path ];
do
	echo ${path%%:<em>}
	echo ${path#</em>:}
done
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning The Bash Shell 笔记-变量]]></title>
    <link href="http://blog.loudou.info/blog/2014/05/15/learning-the-bash-shell-du-shu-bi-ji-bian-liang/"/>
    <updated>2014-05-15T09:35:19+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/05/15/learning-the-bash-shell-du-shu-bi-ji-bian-liang</id>
    <content type="html"><![CDATA[<!--more-->

<h2 id="section">$* 和 $@</h2>
<p>这两个变量都可以得到脚本运行得到的所有参数.</p>

<p>默认情况下, 这两个变量没有区别</p>

<p>```bash sample.sh
#!/bin/bash</p>

<p>echo $*</p>

<p>echo $@
```</p>

<p>运行上面的脚本, 传入多个参数. 得到的两行输出结果是一样的.</p>

<p><code>bash
$./sample.sh 1 2 3
1 2 3
1 2 3
</code></p>

<p>但是, 当给变量 IFS(internal field sperator) 赋上值并用双引号将 <code>$*</code> 和 <code>$@</code>
括起来, 情况就不一样了.</p>

<p>```bash sample2.sh
#!/bin/bash</p>

<p>IFS=,</p>

<p>echo “$*”</p>

<p>echo “$@”
```</p>

<p>这时候, 在 <code>$*</code> 中不再是以空格分割所有参数, 而是由 IFS 的值 (当前脚本中为逗号)来分割</p>

<p>而 <code>$@</code> 则保持原样</p>

<p><code>bash
$./sample2.sh 1 2 3
1,2,3
1 2 3
</code></p>

<p>当用双引号括起来以后, <code>"$*"</code> 等价于 <code>"$1$IFS$2$IFS$3...$IFS$N"</code></p>

<p>而 <code>"$@"</code> 等价于 <code>"$1" "$2" "$3"... "$N"</code></p>

<h2 id="string-operator">String Operator</h2>

<p>对于 shell 变量, 还有一些操作符可以让脚本变得更活</p>

<ul>
  <li>
    <p><code>${var:-word}</code>: 如果 var 变量不存在或为 null, 则返回 word. var 变量仍然不存在或为 null</p>
  </li>
  <li>
    <p><code>${var:=word}</code>: 如果 var 变量不存在或为 null, 则将 word 赋值给 var, 并返回 var 的新值(word)</p>
  </li>
  <li>
    <p><code>${var:?msg}</code>: 如果 var 变量不存在或为 null, 则停止脚本, 并输出信息 <strong>var: msg</strong></p>
  </li>
  <li>
    <p><code>${var:+word}</code>: 如果 var 变量存在并不为 null, 则返回 word. 否则, 返回 null</p>
  </li>
  <li>
    <p><code>${var:offset:length}</code> 截取变量 var 从 offset 开始长度为 length 的字符串.  offset 从 0 开始. length 为 null 截取剩余全部.</p>
  </li>
</ul>

<p>```bash sample3.sh
#!/bin/bash</p>

<p>echo ${var:-“minus”}</p>

<p>echo ${var}</p>

<p>echo ${var:=”equals”}</p>

<p>echo ${var}</p>

<p>echo ${var:+”plus”}</p>

<p>echo ${var:2:2} #output ua</p>

<p>echo ${theVar:?”should not be empty”}
```</p>

<p>输出:</p>

<p>```
minus</p>

<p>equals
equals
plus
ua
sample3.sh: line 15: theVar: should not be empty
```</p>

<h2 id="section-1">一个练习</h2>
<p>你收集了一专辑, 并已经统计出了不同歌手的专辑数量, 现在需要找出收集数量前 10 的歌手. 文件格式如下:</p>

<p><code>text file
5 Depeche Mode
2 Split Enz
3 Simple Minds
1 Vivaldi, Antonio
</code></p>

<p>ok, 实现代码很简单 <code>sort -nr file | head -n 10</code></p>

<p>不过, 书中的解答不得不说更好</p>

<p>```bash
#!/bin/bash</p>

<p>filename=${1:?”filename missing”}
howmany=${2:-10}</p>

<p>sort -nr $filename | head -n $howmany
```</p>

<p>这样脚本化之后, 增加了可读性, 而且也不限于统计前 10.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迂回的监控数据库连接数]]></title>
    <link href="http://blog.loudou.info/blog/2014/05/09/yu-hui-de-jian-kong-shu-ju-ku-lian-jie-shu/"/>
    <updated>2014-05-09T09:45:51+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/05/09/yu-hui-de-jian-kong-shu-ju-ku-lian-jie-shu</id>
    <content type="html"><![CDATA[<p>不能通过数据库工具监控到连接数时可用的迂回监控方法
<!--more-->
## 原理
数据库连接底层使用的也是 TCP 协议.</p>

<p>所以当连接到数据库时, 在本地也有打开一个 TCP 端口. 可以通过 nestat 查看</p>

<p>并且每有一个连接, 就会产有一个端口.</p>

<p>所以, 我们只需要数一下 netstat 中打印出来连接到数据库的端口即可</p>

<h2 id="section">代码</h2>

<p><div><script src='https://gist.github.com/2c5f64d45de600237f1c.js'></script>
<noscript><pre><code>#!/bin/sh

function echo_db_connect_count()
{
    current_date=`date &#39;+%Y.%m.%d.%H.%M.%S&#39;`
    netstat -an |awk &#39;{gsub(&quot;::ffff:&quot;,&quot;&quot;); print $5}&#39;|grep &quot;$1&quot; |sort | uniq -c |sed &quot;s/^/$current_date/g&quot;
}

port=${1:?&quot;port should be provide as the first argument&quot;}
step=${2:=1}


while true
do
    echo_db_connect_count $port
    sleep $step
done
</code></pre></noscript></div>
</p>

<h2 id="section-1">命令分析</h2>

<p>核心就一行, 摘出来看看:</p>

<p><code>bash
netstat -an |awk '{gsub("::ffff:",""); print $5}'|grep "$port" |sort | uniq -c
|sed "s/^/$current_date/g"
</code></p>

<p>各个命令在干什么: </p>

<p><code>netstat</code> 不多说, 打印出所有打开着的端口</p>

<p><code>awk</code> 在这里做一步初步处理, gsub(“::ffff:”, “”), 是为了去除 ipv6 格式的 ip 地址.</p>

<p><code>grep</code> 就是为了过滤出想监控的端口号</p>

<p><code>sort</code> 让所有打印出来的远程连接排序, 为下一步 uniq 作铺垫</p>

<p><code>uniq</code> 去重, <code>-c</code> 计算重复的项. 这样就得到连接的总数了</p>

<p><code>sed</code> 既然是监控, 在行首添加上时间.</p>

<p>执行结果的样例:</p>

<p><img src="/blogimgs/net_watch.png" alt="net_watch" /></p>
]]></content>
  </entry>
  
</feed>
