<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: selenium | 挨踢夜归人]]></title>
  <link href="http://ralph-wang.github.io//tags/selenium/atom.xml" rel="self"/>
  <link href="http://ralph-wang.github.io/"/>
  <updated>2014-08-06T17:50:36+08:00</updated>
  <id>http://ralph-wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WebDriver 之 Page Object 设计模式]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/04/11/webdriver-zhi-page-object-she-ji-mo-shi/"/>
    <updated>2014-04-11T21:17:47+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/04/11/webdriver-zhi-page-object-she-ji-mo-shi</id>
    <content type="html"><![CDATA[<p>使用 Selenium Webdriver 最常用的设计模式 Page Object 规划页面
<!--more-->
例子页面:</p>

<p><a href="http://ralph-wang.github.io/sample/login_test.html">login_test.html</a></p>

<p>用户名: test 密码: test</p>

<h2 id="section">一般写法</h2>
<p>```python
from selenium import webdriver</p>

<p>driver = webdriver.Chrome()</p>

<p>driver.get(‘http://ralph-wang.github.io/sample/login_test.html’)</p>

<p>username = ‘test’
pwd = ‘test’</p>

<h1 id="section-1">登录操作</h1>
<p>driver.find_element_by_id(‘username’).send_keys(username)
driver.find_element_by_id(‘pwd’).send_keys(pwd)
driver.find_element_by_id(‘ok’).click()</p>

<h1 id="section-2">验证登录</h1>
<p>alert = driver.switch_to_alert()
assert ‘succ’ in alert.text
```</p>

<p>这样的写法的代码复用和管理都会成为麻烦.</p>

<p>一方面测试值的参数化不方便, 另一方面没有抽象出业务操作来, 可读性能差.</p>

<p>如果需要自动化的页面只有一个时, 可以就这么写. 但业务多起来后代码的维护会非常痛苦</p>

<p>下面就用 Page Object 来重构这个测试</p>

<h2 id="page-object-">Page Object 设计模式</h2>

<p>先需要两个基类: <code>BrowserContainer</code>, <code>BasePage</code></p>

<p>```python Base.py
class BrowserContainer(object):
	def <strong>init</strong>(se	lf, driver, baseURL):
		self.driver = driver
		self.baseURL = baseURL</p>

<p>class BasePage(BrowserContainer):
	def <strong>init</strong>(self, driver, baseURL, path):
		BrowserContainer.<strong>init</strong>(self, driver, baseURL)
		self.path = path ## 页面路径
	def open(self):
		self.driver.get(self.baseURL + self.path)</p>

<p>```
<code>BrowserContainer</code> 是一个抽象类, 用来存储 driver 和测试站点的 baseURL</p>

<p><code>BasePage</code> 也是一个抽象类, 继承自 BrowserContainer, 后续所有测试页面都继承自它</p>

<p>```python Site.py
import page.Base</p>

<p>class Site(page.Base.BrowserContainer):
	def <strong>init</strong>(self, driver, baseURL):
		page.Base.BrowserContainer.<strong>init</strong>(self, driver, baseURL)
	def getLoginPage(self):
		return LoginPage(self.driver, self.baseURL, ‘/login_test.html’)</p>

<p>class LoginPage(page.Base.BasePage):
	def <strong>init</strong>(self, driver, baseURL, path):
		page.Base.BasePage.<strong>init</strong>(self, driver, baseURL, path)</p>

<pre><code>def login(self, username, pwd):
	self.driver.find_element_by_id('username').send_keys(username)
	self.driver.find_element_by_id('pwd').send_keys(pwd)
	self.driver.find_element_by_id('ok').click()
</code></pre>

<p>```
<code>Site</code> 是一个工厂类, 用来取得各个测试页面的实例</p>

<p><code>LoginPage</code> 就对应我们的测试页面 <code>/login_test.html</code></p>

<p>这样, 我们可以把环境因素 baseURL 和 项目因素 path 分离, 这样更方便的实现多环境复用</p>

<p>```python case.py
import unittest
from selenium import webdriver</p>

<p>import page.Site</p>

<p>class TestLogin(unittest.TestCase):
	def setUp(self):
		self.driver = webdriver.Chrome()
		self.site = page.Site.Site(self.driver,\
				‘http://ralph-github.io/sample’)
		self.loginPage = self.site.getLoginPage()</p>

<pre><code>	def testLogin(self):
		self.loginPage.open()
		self.loginPage.login('test', 'test')

		alert = self.driver.switch_to_alert()
		assert 'succ' in alert.text
		alert.accept()

def tearDown(self):
	self.driver.quit()
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
	unittest.main()
```
最后我们再用 <code>unittest</code> 模块组织我们的测试用例.</p>

<p>这样我们增加了不少代码, 但用例部分的可读性提升了不少.</p>

<p>并且我们的业务和页面是绑定在一起了, 管理起来也很方便</p>

<p>如果再增加测试页面和测试业务, 我们只需要增加一个页面类并添加一个 Site 的工厂函数即可.</p>

<p>sample 所在的 git:</p>

<p><a href="https://github.com/Ralph-Wang/page_object_sample">page_object_sample</a></p>
]]></content>
  </entry>
  
</feed>
