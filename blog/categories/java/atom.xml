<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: java | 挨踢夜归人]]></title>
  <link href="http://ralph-wang.github.io//blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ralph-wang.github.io/"/>
  <updated>2014-08-17T20:20:32+08:00</updated>
  <id>http://ralph-wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 jstack 线程定位初体验]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/03/01/yong-jstack-xian-cheng-ding-wei-chu-ti-yan/"/>
    <updated>2014-03-01T22:42:48+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/03/01/yong-jstack-xian-cheng-ding-wei-chu-ti-yan</id>
    <content type="html"><![CDATA[<p>用 top + jstack 定位 java 线程问题
<!--more--></p>

<h3 id="section">1. 需要定位的程序</h3>

<p>首先, 写一个用于计算并输出蜚波那契数列的 java 程序, 大致的输出信息如下.</p>

<p><img src="/blogimgs/thread-fb.png" alt="Fibonacci" title="a Fibonacci Thread" /></p>

<p>这里特意写成<strong>死循环</strong>, 让它不停地去消耗 CPU</p>

<h3 id="top-">2. 用 top 命令定位进程号</h3>
<p>程序运行起来之后, 就该 <code>top</code> 命令出场了.</p>

<p>直接在命令行中输入</p>

<p><code>bash
$top
</code></p>

<p>看 <code>top</code> 命令的输出
<img src="/blogimgs/thread-top.png" alt="use top" title="use top" />
看到消耗 CPU 最高的就是一个 java 进程.</p>

<p>OK, 记下进程号 <strong>100162</strong></p>

<blockquote>
  <p>补充:  <br />
&gt; <code>top</code> 添加 -c 参数可以查看到命令的参数信息  <br />
&gt; 这样可以看到 java 具体执行的类, 定位更准确</p>
</blockquote>

<h3 id="top--h--p-">3. 用 top -H -p 命令定位到线程号</h3>
<p>现在, 我们知道消耗 CPU 最高的进程是哪个了. </p>

<p>但我们还不知道具体是哪个线程的问题, 所以不着急用 <code>jstack</code> 去获取 java 进程快照. </p>

<p>再次使用 <code>top</code> 命令, 不过, 这次我们加上 <code>-H -p</code> 参数来查看线程运行情况.</p>

<p><code>bash
$ top -H -p 100162
</code></p>

<blockquote>
  <p>注: <em>也可以 <code>top -p &lt;pid&gt;</code> 后再敲 H 打开子线程信息</em></p>
</blockquote>

<p>这次, 得到如下图的结果:
<img src="/blogimgs/thread-topHp.png" alt="use top -H -p (pid)" title="use top -H -p &lt;pid&gt;" /></p>

<p>消耗 CPU 最高的不再是 100162 了. 可以清楚的看到是线程 <strong>100172</strong></p>

<h3 id="jstack-">4. 用 jstack 定位到代码行</h3>
<p>下面, 就可以用 <code>jstack</code> 来导出进程的堆栈信息了.</p>

<p><code>bash
$jstack 100162
</code></p>

<ul>
  <li>这里不能直接使用 <code>jstack 100172</code>的形式, jstack 似乎只能对<strong>主线程</strong>使用</li>
  <li>jstack 不能导出堆栈问题解决: <a href="http://www.haply.info/blog/archives/305">jstack 不能导出堆栈</a></li>
</ul>

<p>然后, 在堆栈信息中找到 nid=0x27bc(100172 的 16 进制) 的线程.</p>

<p>就是下面的 <strong>Thread-0</strong> 线程了</p>

<p><img src="/blogimgs/thread-jstack.png" alt="use jstack" title="use jstack" /></p>

<p>全是 <code>Fibonacci.calcFibo (testJstack.java:28)</code></p>

<p>定位源码文件 <code>testJstack.java</code> 第 28 行, 最土最慢最二的蜚波那契数列算法…</p>

<p><img src="/blogimgs/thread-28.png" alt="get the criminal" title="get the criminal" /></p>

<p>问题定位结束</p>

<p>上完整源码</p>

<p><div><script src='https://gist.github.com/9290490.js?file=testJstack.java'></script>
<noscript><pre><code>public class testJstack {
    public static void main(String[] args) {
        Thread t = new Thread(new Fibonacci());
        t.start();
    }
}

class Fibonacci implements Runnable {
    public void run() {
        while (true) {
            for (int i = 0; i &lt; 20; i++) {
                System.out.println(calcFibo(i));
            }
        }
    }
    
    /**
     * 最土最慢的蜚波那契计算函数.
     * @return int
     */
    private int  calcFibo(final int n) {

        if (n == 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        } else {
            return calcFibo(n-1) + calcFibo(n-2);
        }
    }
}
</code></pre></noscript></div>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java之Boxing和Unboxing]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/02/09/javazhi-boxinghe-unboxing/"/>
    <updated>2014-02-09T22:07:16+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/02/09/javazhi-boxinghe-unboxing</id>
    <content type="html"><![CDATA[<p>Java中有两大类数据类型： <strong>基本类型</strong>和<strong>引用类型</strong>。</p>

<p>另外地，<strong>基本类型</strong>们都有其对应的<strong>封装类</strong>。</p>

<p>比如： <code>int</code> -&gt; <code>Integer</code>
<!--more--></p>

<p>将<strong>基本类型</strong>转换成其对应的<strong>封装类</strong>的过程，就叫做装箱(Boxing)。</p>

<p>反之，就叫拆箱(Unboxing)。</p>

<h2 id="auto-boxing--unboxing">Auto Boxing &amp;&amp; Unboxing</h2>

<p>因为每次显示的装箱、拆箱过于麻烦，从<code>JDK 5</code>开始，Java　提供了自动装箱、拆箱(Auto Boxing &amp; Unboxing)</p>

<p>让下面这样的代码成立。</p>

<p><code>java
Integer i = 100; //Boxing
int j = new Integer(100); //Unboxing
</code></p>

<p>但是在装箱过程中，有个小特点需要注意一下。</p>

<p>当装箱的<code>int</code>类型在 -128~127 之间时，装箱后的引用会指向同一对象。</p>

<p>而不在这范围内的值，每次装箱都会产生一个新对象。</p>

<p>类似的其它基本类型的范围：</p>

<ul>
  <li><code>boolean</code> : 装箱后总是指向同一对象</li>
  <li><code>long</code> : -128L~127 之间，装箱后指向同一对象</li>
  <li><code>float</code> : 总是产生新对象</li>
  <li><code>double</code> : 总是产生新对象</li>
</ul>

<p>下面是测试代码：
<div><script src='https://gist.github.com/8900088.js'></script>
<noscript><pre><code>public class Boxing {
  public static void main(String[] args) {
    // boolean
    Boolean b1 = true;
    Boolean b2 = true;
    Boolean b3 = false;
    Boolean b4 = false;

    // int
    Integer i1 = -129;
    Integer i2 = -129;
    Integer i3 = -128;
    Integer i4 = -128;
    Integer i5 = 127;
    Integer i6 = 127;
    Integer i7 = 128;
    Integer i8 = 128;

    // long
    Long l1 = -129L;
    Long l2 = -129L;
    Long l3 = -128L;
    Long l4 = -128L;
    Long l5 = 127L;
    Long l6 = 127L;
    Long l7 = 128L;
    Long l8 = 128L;

    // float
    Float f1 = 0.0f;
    Float f2 = 0.0f;

    // double
    Double d1 = 0.0d;
    Double d2 = 0.0d;

    // output
    System.out.println(&quot;true: &quot; + (b1 == b2));
    System.out.println(&quot;false: &quot; + (b3 == b4));
    System.out.println(&quot;-129: &quot; + (i1 == i2));
    System.out.println(&quot;-129: &quot; + (i1 == i2));
    System.out.println(&quot;-128: &quot; + (i3 == i4));
    System.out.println(&quot;127: &quot; + (i5 == i6));
    System.out.println(&quot;128: &quot; + (i7 == i8));
    System.out.println(&quot;-129L: &quot; + (l1 == l2));
    System.out.println(&quot;-129L: &quot; + (l1 == l2));
    System.out.println(&quot;-128L: &quot; + (l3 == l4));
    System.out.println(&quot;127L: &quot; + (l5 == l6));
    System.out.println(&quot;128L: &quot; + (l7 == l8));
    System.out.println(&quot;0.0f: &quot; + (f1 == f2));
    System.out.println(&quot;0.0d: &quot; + (d1 == d2));
  }
}/* output:
true: true
false: true
-129: false
-129: false
-128: true
127: true
128: false
-129L: false
-129L: false
-128L: true
127L: true
128L: false
0.0f: false
0.0d: false
*///:~
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java线程状态]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/02/08/javaxian-cheng-zhuang-tai/"/>
    <updated>2014-02-08T11:07:52+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/02/08/javaxian-cheng-zhuang-tai</id>
    <content type="html"><![CDATA[<p>监控 Java 线程时，首先要关注的就是线程的运行状态。</p>

<!--more-->
<p>一般来说，Java 线程有 6 种状态： </p>

<ol>
  <li>NEW</li>
  <li>RUNNABLE</li>
  <li>WAITING &amp; TIMED_WAITING</li>
  <li>SLEEP</li>
  <li>TERMINATED</li>
  <li>BLOCK</li>
</ol>

<p>下面，用代码示例一下各个状态</p>

<h3 id="new--terminated">1. NEW &amp; TERMINATED</h3>
<p>这两个状态比较特殊，分别出现在线程<strong>运行之前</strong>和线程<strong>运行之后</strong>。</p>

<p>这里所说的<strong>运行</strong>指调用线程的<code>start()</code>方法。</p>

<p>代码：
<div><script src='https://gist.github.com/8839097.js?file=NT.java'></script>
<noscript><pre><code>public class NT {
    public static void main(String[] args) {
        Thread t = new Thread();
        System.out.println(t.getState());
        t.start(); // call start to start the thread
        try {
            Thread.sleep(1 * 1000L);
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println(t.getState());
    }/* output:
    NEW
    TERMINDATED
    *///:~
}
</code></pre></noscript></div>
</p>

<p>虽然没有重写<code>run</code>方法，线程会很快结束。但如果在<code>start()</code>后直接调用<code>getState()</code>的话，仍然会返回<strong>RUNNABLE</strong>，所以耐心的等上一秒吧。</p>

<h3 id="runnable">2. RUNNABLE</h3>
<p>我们开线程的目的就是要让它跑起来，所以这个状态可以说是线程的主要状态。</p>

<p>它表示线程正如我们预期的一样正在运行。</p>

<p>代码：
<div><script src='https://gist.github.com/8839097.js?file=Runnable.java'></script>
<noscript><pre><code>public class Runnable {
    public static void main(String[] args) {
        Thread t = new Thread(){
            @Override
            public void run() {
                for (;true;) {
                    System.out.println(&quot;running&quot;);
                }
            }
        };
        t.setName(&quot;runnable&quot;);
        t.start();
    }/* output:
    running
    running
    running
    ...
    *///:~
}
</code></pre></noscript></div>
</p>

<p>运行时，程序会在标准输出里不断输出 <strong>running</strong>。</p>

<p>下面是用 <strong>jvisualvm</strong> 监控到的情况：</p>

<p><img src="/blogimgs/status-runnable.png" alt="running" /></p>

<p>图中的 <strong>runnable</strong> 线程就是我们在代码中启动的线程。</p>

<h3 id="sleep">3. SLEEP</h3>
<p><strong>休眠</strong>状态下，线程不能被唤醒；必须等到休眠时间结束线程才能回到可执行状态。</p>

<p>让线程进入状态需要调用<code>Thread</code>类的<code>sleep</code>方法。调用时指定好需要休眠的时间，线程就可以美美的睡上一觉了。</p>

<p>代码：
<div><script src='https://gist.github.com/8839097.js?file=Sleep.java'></script>
<noscript><pre><code>public class Sleep {
    public static void main(String[] args) {
        Thread t = new Thread() {
            @Override
            public void run() {
                for (;true;) {
                    System.out.println(&quot;here&quot;);
                    try {
                        Thread.sleep(30 * 1000L);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        };

        t.setName(&quot;sleep&quot;);
        t.start();
    }/* output:
    here
    here
    ...
    *///:~
}
</code></pre></noscript></div>
</p>

<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="/blogimgs/status-sleep.png" alt="sleep" /></p>

<p>注：如果用<strong>线程 dump</strong> 查看，会发现 sleep 线程标示的是 <strong>TIMED_WATING</strong></p>

<blockquote>
  <p>—更新—  <br />
但在 <strong>TIMED_WATING</strong> 后会显示 (sleeping) 作为与 wait 调用的区分    </p>
</blockquote>

<h3 id="waiting--timedwaiting">4.WAITING &amp; TIMED_WAITING</h3>
<p>和休眠类似，等待状态下的线程也没有在运行。但是等待下的线程可以随时被唤醒。</p>

<p><strong>WAITING</strong> 和 <strong>TIMED_WAITING</strong> 都是调用<code>wait</code>方法后的状态。区别在于 <strong>WATING</strong> 没有指定时间，除非被唤醒，否则会一直等下去。而 <strong>TIMED_WAITING</strong>　因为指定了时间，即使不被唤醒，也会在指定时间到达之后回到可执行状态。</p>

<p>代码：
<div><script src='https://gist.github.com/8839097.js?file=TimedWait.java'></script>
<noscript><pre><code>public class TimedWait {
    public static void main(String[] args) {
        final Object lock = new Object();
        // customer
        Thread t1 = new Thread() {
            @Override
            public void run() {
                int i = 0;
                for (;true;) {
                    synchronized(lock) {
                        try {
                            System.out.println(&quot;wait&quot;);
                            lock.wait(20 * 1000L); //wait 20 seconds
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    System.out.println(&quot;t1: &quot; + i++);
                }
            }
        };

        // producer
        Thread t2 = new Thread() {
            @Override
            public void run() {
                for (;true;) {
                    synchronized(lock) {
                        for(int i = 0; i &lt; 150000; i++) {
                            System.out.println(&quot;t2: &quot; + i);
                        }
                        lock.notifyAll();
                        try {
                            lock.wait(2 * 1000L); // wait 2 seconds;
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        };

        t1.setName(&quot;t1&quot;);
        t2.setName(&quot;t2&quot;);

        t1.start();
        t2.start();
    }/* output:
    t2: 0
    t2: 1
    ...
    t2: 14999
    t1: 0
    wait
    t2: 0
    t2: 1
    ...
    *///:~
}
</code></pre></noscript></div>
</p>

<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="/blogimgs/status-wait.png" alt="waiting" /></p>

<p><strong>线程 dump</strong> 中的情况：</p>

<p><img src="/blogimgs/status-timedwait.png" alt="timed_wating" /></p>

<blockquote>
  <p>–更新–  <br />
可以看到在 <strong>TIMED_WATING</strong> 后有显示 (on object monitor)  <br />
表示调用的是 wait, 而不是 sleep    </p>
</blockquote>

<h3 id="block">5.BLOCK</h3>
<p>在线程中，可以使用 <code>sychronized</code> 关键字锁住某些资源，以保证其它线程不能同时访问。如果这时其它线程需要这个资源，就会进入<strong>阻塞</strong>状态。</p>

<p>如果，两个线程同时需要对方锁住的资源，而这些资源又不能被释放，那就会形成死锁。</p>

<p>这里就用死锁来示例<strong>阻塞</strong>状态</p>

<p>代码：
<div><script src='https://gist.github.com/8839097.js?file=DeadBlock.java'></script>
<noscript><pre><code>public class DeadBlock {
    public static void main(String[] args) {
        Knife k = new Knife();
        Hammer h = new Hammer();
        Worker worker = new Worker(k, h, &quot;worker&quot;);
        Handler handler = new Handler(k, h, &quot;handler&quot;);
        worker.start();
        handler.start();
    }
}/* output:
I'm worker and using knife.
I'm handler and using hammer.
*///:~

class Worker extends Thread {
    Knife knife;
    Hammer hammer;
    String name;
    /** constructor */
    public Worker(Knife k, Hammer h, String n) {
        this.knife = k;
        this.hammer = h;
        this.name = n;
    }

    public void run() {
        synchronized(knife){
            try {
                System.out.println(&quot;I'm &quot; + this.name + &quot; and using knife.&quot;);
                Thread.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized(hammer){
                System.out.println(&quot;I'm &quot; + this.name + &quot;, I need hammer&quot;);
            }
        }
    }
}

class Handler extends Thread {
    Knife knife;
    Hammer hammer;
    String name;
    /** constructor */
    public Handler(Knife k, Hammer h, String n) {
        this.knife = k;
        this.hammer = h;
        this.name = n;
    }

    public void run() {
        synchronized(hammer){
            try {
                System.out.println(&quot;I'm &quot; + this.name + &quot; and using hammer.&quot;);
                Thread.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized(knife){
                System.out.println(&quot;I'm &quot; + this.name + &quot;, I need knife&quot;);
            }
        }
    }
}
/** Knife */
class Knife {
}

/** Hammer */
class Hammer {
}
</code></pre></noscript></div>
</p>

<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="/blogimgs/status-block.png" alt="deadBlock" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用jvisualvm监控远程java进程]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/02/06/yong-jvisualvmjian-kong-yuan-cheng-javajin-cheng/"/>
    <updated>2014-02-06T21:48:26+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/02/06/yong-jvisualvmjian-kong-yuan-cheng-javajin-cheng</id>
    <content type="html"><![CDATA[<p><strong>jvisualvm</strong>是从<strong>jdk1.6</strong>开始添加到JDK包中的图形化监控工具。</p>

<!--more-->
<p>开启后可以自动监控本机运行中的java进程。</p>

<p>另外，<strong>jvisualvm</strong>它还可以监控远程机器上java进程的运行状态。</p>

<p>不过，监控远程机器需要在被监控机器上做一些配置：</p>

<h4 id="jdk">1. 安装JDK</h4>
<p>这一步不多说了</p>

<h4 id="etchosts">2. 配置/etc/hosts</h4>
<p>要让<strong>jvisualvm</strong>成功连接到被监控机器上，需要在/etc/hosts文件中将被监控机的主机名绑定到被监控机的IP地址。</p>

<p>通过<code>hostname</code>命令可以获得主机名</p>

<p><code>text /etc/hosts
192.168.192.132 Ralph.Wang
</code></p>

<p><code>hostname -i</code>返回实际的IP地址即绑定成功。</p>

<p>注：<strong>CentOS</strong>中的/etc/hosts默认是没有绑定主机名的IP的，直接添加即可</p>

<h4 id="jstatd">3. 运行jstatd</h4>
<p>运行<code>jstatd</code>之前，我们需要配置一个安全策略文件,如下</p>

<p><div><script src='https://gist.github.com/8844076.js?file=jstatd.all.policy'></script>
<noscript><pre><code>grant codebase &quot;file:${java.home}/../lib/tools.jar&quot; {
   permission java.security.AllPermission;
};
</code></pre></noscript></div>
</p>

<p>运行<code>jstatd</code>时需要用<code>-J-Djava.security.policy</code>参数指定策略文件</p>

<p><code>bash
jstatd -J-Djava.security.policy=jstatd.all.policy
</code></p>

<h3 id="jvisualvm">4.在jvisualvm中添加远程机</h3>
<p><code>文件</code>-&gt;<code>添加远程主机</code> 输入IP地址即可。</p>

<p>下面是示例图
<img src="/blogimgs/jvisualvm-remote.png" alt="jvisualvm监控示例" /></p>
]]></content>
  </entry>
  
</feed>
