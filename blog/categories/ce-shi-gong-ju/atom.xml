<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 测试工具 | 挨踢夜归人]]></title>
  <link href="http://blog.loudou.info//blog/categories/ce-shi-gong-ju/atom.xml" rel="self"/>
  <link href="http://blog.loudou.info/"/>
  <updated>2015-02-16T15:52:03+08:00</updated>
  <id>http://blog.loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WebDriver 之 Page Object 设计模式]]></title>
    <link href="http://blog.loudou.info/blog/2014/04/11/webdriver-zhi-page-object-she-ji-mo-shi/"/>
    <updated>2014-04-11T21:17:47+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/04/11/webdriver-zhi-page-object-she-ji-mo-shi</id>
    <content type="html"><![CDATA[<p>使用 Selenium Webdriver 最常用的设计模式 Page Object 规划页面
<!--more-->
例子页面:</p>

<p><a href="http://ralph-wang.github.io/sample/login_test.html">login_test.html</a></p>

<p>用户名: test 密码: test</p>

<h2 id="section">一般写法</h2>
<p>```python
from selenium import webdriver</p>

<p>driver = webdriver.Chrome()</p>

<p>driver.get(‘http://ralph-wang.github.io/sample/login_test.html’)</p>

<p>username = ‘test’
pwd = ‘test’</p>

<h1 id="section-1">登录操作</h1>
<p>driver.find_element_by_id(‘username’).send_keys(username)
driver.find_element_by_id(‘pwd’).send_keys(pwd)
driver.find_element_by_id(‘ok’).click()</p>

<h1 id="section-2">验证登录</h1>
<p>alert = driver.switch_to_alert()
assert ‘succ’ in alert.text
```</p>

<p>这样的写法的代码复用和管理都会成为麻烦.</p>

<p>一方面测试值的参数化不方便, 另一方面没有抽象出业务操作来, 可读性能差.</p>

<p>如果需要自动化的页面只有一个时, 可以就这么写. 但业务多起来后代码的维护会非常痛苦</p>

<p>下面就用 Page Object 来重构这个测试</p>

<h2 id="page-object-">Page Object 设计模式</h2>

<p>先需要两个基类: <code>BrowserContainer</code>, <code>BasePage</code></p>

<p>```python Base.py
class BrowserContainer(object):
	def <strong>init</strong>(se	lf, driver, baseURL):
		self.driver = driver
		self.baseURL = baseURL</p>

<p>class BasePage(BrowserContainer):
	def <strong>init</strong>(self, driver, baseURL, path):
		BrowserContainer.<strong>init</strong>(self, driver, baseURL)
		self.path = path ## 页面路径
	def open(self):
		self.driver.get(self.baseURL + self.path)</p>

<p>```
<code>BrowserContainer</code> 是一个抽象类, 用来存储 driver 和测试站点的 baseURL</p>

<p><code>BasePage</code> 也是一个抽象类, 继承自 BrowserContainer, 后续所有测试页面都继承自它</p>

<p>```python Site.py
import page.Base</p>

<p>class Site(page.Base.BrowserContainer):
	def <strong>init</strong>(self, driver, baseURL):
		page.Base.BrowserContainer.<strong>init</strong>(self, driver, baseURL)
	def getLoginPage(self):
		return LoginPage(self.driver, self.baseURL, ‘/login_test.html’)</p>

<p>class LoginPage(page.Base.BasePage):
	def <strong>init</strong>(self, driver, baseURL, path):
		page.Base.BasePage.<strong>init</strong>(self, driver, baseURL, path)</p>

<pre><code>def login(self, username, pwd):
	self.driver.find_element_by_id('username').send_keys(username)
	self.driver.find_element_by_id('pwd').send_keys(pwd)
	self.driver.find_element_by_id('ok').click()
</code></pre>

<p>```
<code>Site</code> 是一个工厂类, 用来取得各个测试页面的实例</p>

<p><code>LoginPage</code> 就对应我们的测试页面 <code>/login_test.html</code></p>

<p>这样, 我们可以把环境因素 baseURL 和 项目因素 path 分离, 这样更方便的实现多环境复用</p>

<p>```python case.py
import unittest
from selenium import webdriver</p>

<p>import page.Site</p>

<p>class TestLogin(unittest.TestCase):
	def setUp(self):
		self.driver = webdriver.Chrome()
		self.site = page.Site.Site(self.driver,\
				‘http://ralph-github.io/sample’)
		self.loginPage = self.site.getLoginPage()</p>

<pre><code>	def testLogin(self):
		self.loginPage.open()
		self.loginPage.login('test', 'test')

		alert = self.driver.switch_to_alert()
		assert 'succ' in alert.text
		alert.accept()

def tearDown(self):
	self.driver.quit()
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
	unittest.main()
```
最后我们再用 <code>unittest</code> 模块组织我们的测试用例.</p>

<p>这样我们增加了不少代码, 但用例部分的可读性提升了不少.</p>

<p>并且我们的业务和页面是绑定在一起了, 管理起来也很方便</p>

<p>如果再增加测试页面和测试业务, 我们只需要增加一个页面类并添加一个 Site 的工厂函数即可.</p>

<p>sample 所在的 git:</p>

<p><a href="https://github.com/Ralph-Wang/page_object_sample">page_object_sample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter 安装]]></title>
    <link href="http://blog.loudou.info/blog/2014/04/06/jmeter-an-zhuang/"/>
    <updated>2014-04-06T22:17:08+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/04/06/jmeter-an-zhuang</id>
    <content type="html"><![CDATA[<p>跨平台工具赛高
<!--more--></p>

<h2 id="jdk">安装 jdk</h2>
<p>去 oracle 官网<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">下载</a>相应版本的 jdk</p>

<p>如果没有特别要求, 下载最新版就可以.</p>

<p>完成安装后配置上相应的环境变量</p>

<p><code>bash
JAVA_HOME=/where/you/install/jdk
CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
</code></p>

<p>可以用下面代码测试安装成功与否</p>

<p>```java Test.java
import java.util.Date;</p>

<p>public class Test {
	public static void main(String[] args) {
		System.out.println(new Date());
	}
}
```</p>

<h2 id="jmeter">安装 Jmeter</h2>
<p>去 Apache 官网<a href="http://jmeter.apache.org/download_jmeter.cgi">下载</a> Jmeter</p>

<p>解压得到目录 <code>apache-jmeter-*.*</code> (*.* 为版本号)</p>

<p>将 <code>apache-jmeter-*.*</code> 复制到任意你喜欢的目录</p>

<p>下面这段其实完全不需要 ( 2014-05-07 更新 )</p>

<blockquote>
  <p>配置 Jmeter 环境变量</p>
</blockquote>

<p><code>bash
JMETER_HOME=/where/you/put/apache-jmeter-*.*
CLASSPATH=$CLASSPATH:$JMETER_HOME/lib/logkit-2.0.jar:$JMETER_HOME/lib/jorphan.jar:$JMETER_HOME/lib/ext/ApacheJMeter_core.jar
</code></p>

<blockquote>
  <p>其实就是在 <code>CLASSPATH</code> 中添加三个 jar 包: <em>(07-31更新: 可以不用配置)</em>
$JMETER_HOME/lib/logkit-2.0.jar <br />
$JMETER_HOME/lib/jorphan.jar <br />
$JMETER_HOME/lib/ext/ApacheJMeter_core.jar</p>
</blockquote>

<h2 id="jmeter-1">启动 Jmeter</h2>
<p>运行 $JMETER_HOME/bin 目录下的 jmeter (Windows 环境运行 jmeter.bat)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LR 关联之 Alfresco]]></title>
    <link href="http://blog.loudou.info/blog/2014/02/18/lr-guan-lian-zhi-alfresco/"/>
    <updated>2014-02-18T00:39:11+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/02/18/lr-guan-lian-zhi-alfresco</id>
    <content type="html"><![CDATA[<p>遇到一个比较特别的关联的例子. 
<!--more-->
项目是 <strong>Alfresco</strong>
需要开发的脚本业务: 管理员新增用户.</p>

<h3 id="section">问题</h3>
<p>录制后, 简单参数化一下运行, 发现最后一步提交数据时, 返回的状态码为 500.</p>

<p><img src="/blogimgs/alfresco-errmsg.png" alt="Error Message" title="Err Msg" /></p>

<p>会不会是系统出了什么毛病? 于是去手工操作业务, 却发现一切正常.</p>

<p>再去翻看 LoadRunner 的 Test Result. 发现了好东西.</p>

<p><img src="/blogimgs/alfresco-500page.png" alt="Test Result" title="500 Page" /></p>

<p>如上图, 虽然请求返回的状态码是 500, 但返回页面仍是 Alfresco 的页面, </p>

<h3 id="section-1">分析</h3>

<p>状态码 500, 返回页面为系统页面. 这说明 500 的状态码是系统主动返回的. </p>

<p>一般来说, 这种情况都是系统需要验证了某些提交信息, 
而这些信息是由前面的某个请求返回的. 回放时这些信息发生了变化, 导致请求失败.</p>

<p>我们需要关联这些信息来保证请求的合法性.</p>

<hr />

<p>首先我们需要找到哪些信息是系统要验证的, 如果有开发配合, 问一嘴就好了.</p>

<p>没有开发配合的话, 就得我们自己找了. 就像现在.</p>

<p>我们先来看请求发出的信息. 首先从请求体里面找</p>

<p>请求体是 <code>json</code> 格式的, 如下</p>

<p><code>javascript
{   "userName":"www2",
	"password":"www2",
	"firstName":"www2",
	"lastName":"",
	"email":"www2@www.com",
	"disableAccount":false,
	"quota":127893619,
	"groups":[]
}
</code></p>

<p><code>userName</code> 是用户名, <code>password</code> 是用户密码, <code>firstName</code> 是名字, <code>lastName</code>
是姓氏, <code>email</code> 是邮箱, <code>disableAccount</code> 是禁用选项, <code>quota</code> 是分配容量, <code>groups</code> 是用户所在组</p>

<p>呃… 每个 key 都有对应的表单字段. 看来需要关联的验证信息并不在请求体中.</p>

<p>那就只有看看请求头了.</p>

<p><img src="/blogimgs/alfresco-lr.png" alt="LR Log" title="Lr Log" /></p>

<p>这里发现了一个嫌疑犯: <code>Alfresco-CSRFToken</code></p>

<p>看名字, 应该是用来防止 <code>CSRF</code> 攻击的. 应该是它没错.</p>

<p>我们再用 <code>Fiddler</code> 来看下新请求里, 这个值是否发生了变化.</p>

<p><img src="/blogimgs/alfresco-fiddler.png" alt="Fiddler" title="Fiddler" /></p>

<p>果然发生了变化. 这下没错了, 它就是我们需要关联的对象.</p>

<p>然后, 我们要找到系统是什么时候把这个信息发送给我们的.</p>

<p>依次查看各个请求后发现, 在进入用户管理页面时, 返回的请求头里有如下信息</p>

<p><img src="/blogimgs/alfresco-tocor.png" alt="To Correlations" title="To Correlations" /></p>

<p>由于信息中的特殊符号被 <code>URL编码</code> 了, 导致在前后两个请求中看上去有些不一样.
通过解码我们可以确认, 这里就是关联参数的来源</p>

<p>```javascript
decodeURIComponent(‘NPizHL2EuHsHN6VMml0sAfezFhPQmT5fynjkx%2fkqP88%3d’)</p>

<p>// output: NPizHL2EuHsHN6VMml0sAfezFhPQmT5fynjkx/kqP88=
```</p>

<h3 id="section-2">解决方案</h3>

<p>添加以下代码</p>

<p>```c
web_reg_save_param(“token”,
		“LB=CSRFToken=”,
		“RB=;”,
		“Search=Headers”,
		LAST);
…
// user requests codes
…</p>

<p>web_add_header(“Alfresco-CSRFToken”, url_decode(lr_eval_string(“{token}”)));
…
// submit requests codes
…
```</p>

<p>TIPS:</p>

<ul>
  <li>
    <p>由于不能直接在请求中添加请求头信息, 所以我们需要调用 <code>web_add_header</code>
函数来添加.</p>
  </li>
  <li>
    <p>因为系统发送过来的 <code>token</code> 是 <code>URL编码</code> 的字符串, 而提交新增时发送回去的是解码过的. 所以我们在添加 header 时需要进行解码.  这就是 <code>url_decode</code> 函数的作用. 这个函数并不是 LR 自带的函数, 需要自行添加. 源代码及添加方法戳<a href="http://www.51testing.com/html/96/n-832896.html">这里</a></p>
  </li>
</ul>

<hr />
<p>关于 <code>URL编码</code> 问题, 后来又找到一个 LoadRunner 原生的解决方案如下:</p>

<p><a href="http://blog.csdn.net/womengdoushizhongguo/article/details/8517598">http://blog.csdn.net/womengdoushizhongguo/article/details/8517598</a></p>

<p>于是, 新增的代码可以修改为</p>

<p>```c
web_reg_save_param(“token”,
		“LB=CSRFToken=”,
		“RB=;”,
		“Search=Headers”,
		LAST);
…
// user requests codes
…</p>

<p>web_convert_param(“token”, “SourceEncoding=URL”, “TargetEncoding=PLAIN”,LAST );
web_add_header(“Alfresco-CSRFToken”, lr_eval_string(“{token}”));</p>

<p>…
// submit requests codes
```</p>

<h2 id="section-3">02.24 更新</h2>

<hr />
<hr />

<p>再往深了想一下, 如果前端通过某种自定义的算法加密的验证信息再返回系统.</p>

<p>那没有开发配合, 这脚本还真没法完成了.</p>

]]></content>
  </entry>
  
</feed>
