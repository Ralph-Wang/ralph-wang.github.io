<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 其它 | 挨踢夜归人]]></title>
  <link href="http://blog.loudou.info//blog/categories/qi-ta/atom.xml" rel="self"/>
  <link href="http://blog.loudou.info/"/>
  <updated>2015-07-21T11:33:01+08:00</updated>
  <id>http://blog.loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BYE 2014]]></title>
    <link href="http://blog.loudou.info/blog/2014/12/31/bye-2014/"/>
    <updated>2014-12-31T15:14:19+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/12/31/bye-2014</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">2014再见</a>    <ul>
      <li><a href="#section-1">搬砖</a></li>
      <li><a href="#section-6">口琴</a></li>
      <li><a href="#mooc">MOOC</a></li>
      <li><a href="#section-7">败物</a></li>
      <li><a href="#section-8">逗[哔]生活</a></li>
    </ul>
  </li>
  <li><a href="#section-9">2015你好</a></li>
</ul>

<h2 id="section">2014再见</h2>

<h3 id="section-1">搬砖</h3>

<h4 id="linux-">Linux 才是真爱</h4>

<p>没啥好说的</p>

<p>Linux 才是真爱. 终端才是真爱</p>

<h4 id="section-2">工具转换</h4>

<p>大概分三步</p>

<ul>
  <li>商业工具 LR: 方便好用, 报表美得很</li>
  <li>开源工具 Jmeter + shell: 经济实惠, 集成美得很</li>
  <li>懂原理了, 自己写工具: 妈蛋, 要多少坑有多少坑</li>
</ul>

<h4 id="section-3">玩了不少语言</h4>

<p>基本都是浅尝辄止, 最后还是用 Python</p>

<ul>
  <li>nodejs, 重新看 OO</li>
  <li>ruby, 嗯~ 语法上和 Python 相近, 但更灵活</li>
  <li>Java, 静态语言必须死</li>
  <li>Io, 卧槽, 这尼玛也可以</li>
</ul>

<h4 id="section-4">技术活动</h4>

<p>参加了下面两个技术活动</p>

<ul>
  <li>MongoDB北京2014大会</li>
  <li>SegmentFault D-Day</li>
</ul>

<p>技术活动也不是每次都有足够的干货.</p>

<p>没事的时候去听听也无妨</p>

<h4 id="section-5">一个开源项目</h4>

<p><a href="https://github.com/Ralph-Wang/should">should</a></p>

<p>把 travis + coveralls 用上. 集成测试/版本测试真心不是问题</p>

<p>单元测试真心好用. 大刀阔斧上重构, 单元测试过就 ok.</p>

<p>=,= 没人一起玩就自己给自己报 Bug, 再自己改 Bug. 反正还有一个挂着</p>

<p>代码烂得一[哔]</p>

<p>正在进行重写式重构.</p>

<h3 id="section-6">口琴</h3>

<p>妈蛋, 这是年初目标之一. 结果到 11 月才开始搞.</p>

<p>而且到现在还是一个单音都吹不好的逗[哔]</p>

<h3 id="mooc">MOOC</h3>

<p>跟了不少课.</p>

<p>但只完成了一门.</p>

<h3 id="section-7">败物</h3>

<p>懒人不拍照</p>

<ul>
  <li>MBP – 真TM贵, 真TM好用.</li>
  <li>HHKB – 嗯, 机械盘退烧了</li>
  <li>iPod Touch – 不能打电话的肾</li>
  <li>肾6 – 好大</li>
  <li>iQunix – 帅, 有[哔]格</li>
</ul>

<h3 id="section-8">逗[哔]生活</h3>

<p>就一个关键词: 十万个冷笑话</p>

<ul>
  <li>首映时间发布会 - 全场节操满地, 福利满载, 寒舞满座</li>
  <li>舞台剧 - 高还原, 笑到不行…妈蛋, 原作+主创声优都在现场, 为毛没带大师球</li>
  <li>大电影 - 咦, 电影里居然有我</li>
</ul>

<p>反正节操是透支了, 也不打算还了…</p>

<h2 id="section-9">2015你好</h2>

<ul>
  <li>
    <p>嗯, 把 should 搞好点吧.. 没人用也要做好啊喂</p>
  </li>
  <li>
    <p>多留点时间来读书啊喂. 2014 你根本就没读几本书啊</p>
  </li>
  <li>
    <p>其实…今年有那么几个月, 我觉得已经在 2015了.</p>
  </li>
</ul>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试技术问题解答]]></title>
    <link href="http://blog.loudou.info/blog/2014/03/25/mian-shi-wen-ti-jie-da/"/>
    <updated>2014-03-25T19:49:37+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/03/25/mian-shi-wen-ti-jie-da</id>
    <content type="html"><![CDATA[<p>面试时没有完全回答上或有存疑的问题
<!--more-->
Linux
——
### 统计文本中某字符串出现次数
前提: 一行中要查找的字符串可能出现多次.</p>

<p>文本样例:</p>

<p><code>text sample
ralph, ralph
Hello, ralph, HaHA
No such word
Hey
ralph again.
two times ralph ,ralph
</code></p>

<p>统计文中 <code>ralph</code> 出现的次数</p>

<p>如果确定 ralph 在每行只出现一次的话, 可以通过 <code>cat sample | grep ralph | wc
-l</code>解决</p>

<p>但因为一行里可以关键词可以出现多次, 这种方式会漏掉一些. 所以并不是好的解决方案</p>

<p>遂搜索之.  得如下解法</p>

<h3 id="grep---o-">方法 1: grep 的 -o 选项</h3>

<p><code>bash
cat sample | grep -o ralph | wc -l
</code>
解释:</p>

<p>给 <code>grep</code> 加上 <code>-o</code> 选项后, 它只会打印出匹配到的字符串, 并且每匹配一次就打印一行. </p>

<h3 id="awk--rs">方法 2: 神器 awk 之 RS</h3>

<p><code>bash
awk -v RS='ralph' 'END {print NR-1}' sample
</code></p>

<p>解释:</p>

<p>awk 中 RS 变量为行分隔符, 用目标字符串分隔行, 则总行数 = 出现次数 + 1.</p>

<p>在 END 中访问 NR 则为最后一行的行号, awk 起始行为 1, 所以此时总行数 = NR</p>

<h3 id="awk--gsub">方法 3: 神器 awk 之 gsub</h3>

<p><code>bash
awk '{count+=gsub(/ralph/, "#")} END {print count}' sample
</code>
解释:
awk 中的 <code>gsub</code> 返回文本的替换次数, 对每行的替换次数求和即可.</p>

<p>另外, awk 中的 <code>sub</code> 函数在每行中只完成一次替换.</p>

<h2 id="java">Java</h2>
<p>### 反射
参考<a href="http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html">反射案例</a></p>

<h2 id="mysql">MySQL</h2>
<p>MySQL 相关的性能问题, 关于<strong>执行计划</strong>的倒是 OK.</p>

<p>但一直没时间整理下关于慢查询日志的知识点. 所以这几次都只能回答说知道这个概念, 具体的配置参数却不记得了.</p>

<p>在这里整理一下, 权当备忘</p>

<ul>
  <li>查看慢查询是否开启</li>
</ul>

<p>```mysql
mysql&gt; show variables like ‘%slow%’;
| Variable_name       | Value
| log_slow_queries    | OFF
| slow_launch_time    | 2
| slow_query_log      | OFF
| slow_query_log_file | ***</p>

<p>mysql&gt; show variables like ‘long%’;
| Variable_name   | Value    |
| long_query_time | 1.000000 |
```</p>

<ul>
  <li>在 my.cnf 中配置开启慢查询跟踪</li>
</ul>

<p><code>ini my.cnf
[mysqld]
log-slow-queries = **** # 日志存放目录, 一般放到 MySQL 数据库的地方
long-query-time = 2 # 超过这个时间(单位:秒) 的查询为慢查询
log-queries-not-using-indexes # 记录下没有使用索引的查询
</code></p>

<p>产生慢查询日志后可以使用 mysqldumpslow 工具进行分析查看了.</p>

<p>接下来的事就交给 <code>explain</code> 吧.</p>

<h2 id="section">算法</h2>
<p>### 问题 1 链表倒序
…面试时, 想到去 clone next.. 为毛当时就没想到多给个变量呢…</p>

<p>```java List.java
public class List<t> { // 后进先出列表
	private static class Node<t> {
		private T item;
		private Node<t> next;
		/** init a end Node */
		public Node() {
			item = null;
			next = null;
		}</t></t></t></p>

<pre><code>	/** normal Node */
	public Node(T item, Node&lt;T&gt; next) {
		this.item = item;
		this.next = next;
	}

	private T getItem() {
		return item;
	}

	private Node&lt;T&gt; getNext() {
		return next;
	}

	private void setNext(Node&lt;T&gt; next) {
		this.next = next;
	}

	public boolean isEnd() {
		return (next == null &amp;&amp; item == null);
	}
}

private Node&lt;T&gt; top;

public List() {
	top = new Node&lt;T&gt;(); //init a end Node for list
}

/** push a item to the top */
public void push(T item) {
	top = new Node&lt;T&gt;(item, top);
}

/** pop the top item */
public T pop() {
	T result = null;
	if (top.isEnd()) {
		return result;
	}
	result = top.getItem();
	top = top.getNext();
	return result;
}

/** reverse the list */
public void reverse() {
	Node&lt;T&gt; cur = top;
	Node&lt;T&gt; next = cur.getNext();
	Node&lt;T&gt; pre = null;
	if (cur.isEnd()) { // Empty list
		return;
	}

	top.setNext(new Node&lt;T&gt;()); // a new sentinel
	do {
		pre = cur;
		cur = next;
		next = cur.getNext();
		cur.setNext(pre);
	} while(!next.isEnd());
	// reset top
	top = cur;
}

public static void main(String[] args) {
	List&lt;String&gt; l = new List&lt;String&gt;();
	l.push("a");
	l.push("B");
	l.push("c");
	l.push("D");
	l.push("e");
	l.push("F");
	l.reverse();
	String res = null;
	while ((res = l.pop()) != null) {
		System.out.println(res);
	}
} }
</code></pre>

<p>```
算法还是弱项…</p>

<h3 id="section-1">问题 2 文本替换</h3>
<p>今天太晚了, 明天再继续</p>

<p>—<em>** 2014-04-06 更新 **</em>—</p>

<p>需求, 字符串或字符数组, 如 <code>AAABBBAAACCADDD</code>, 取出连续的字符, 第N次出现取出连续N个, 不足则跳过</p>

<p>如 AAABBBAAACCADDD -&gt; ABAACAD</p>

<p>```java
import java.util.*;</p>

<p>public class Sub {
	public static void main(String[] args) {
		char[] t = {‘A’, ‘A’, ‘A’, ‘B’, ‘B’, ‘B’,’A’, ‘A’, ‘A’, ‘C’,
			‘C’, ‘A’, ‘D’, ‘D’, ‘D’};
		System.out.println(sub(t));
	}/* output:
		ABAACAD
	  *///:~</p>

<pre><code>public static String sub(final char[] charArray) {
	String res = "";
	HashMap&lt;Character, Integer&gt; count =
		new HashMap&lt;Character, Integer&gt;();
	int seq = 0;
	int curCount = 0;
	char pre = '\0';
	for (int i = 0; i &lt; charArray.length; i++) {
		if (charArray[i] == pre &amp;&amp; curCount &gt;= seq) {
			continue;
		}
		if (charArray[i] != pre) { // recount the new char
			curCount = 0;
			// get the sequence of the char
			if (count.get(charArray[i]) == null) {
				seq = 1;
			} else {
				seq = count.get(charArray[i]) + 1;
			}
			// cache the char sequence
			count.put(charArray[i], seq);
		}
		res = res + charArray[i];
		curCount++;
		pre = charArray[i];
	}
	return res;
} }
</code></pre>

<p>```
若使用 <code>String</code> 作为输入, 则用 charAt 方法获取字符</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[联想接龙]]></title>
    <link href="http://blog.loudou.info/blog/2014/02/11/lian-xiang-jie-long/"/>
    <updated>2014-02-11T23:18:09+08:00</updated>
    <id>http://blog.loudou.info/blog/2014/02/11/lian-xiang-jie-long</id>
    <content type="html"><![CDATA[<p><code>你的第一本思维导图操作书</code>中<code>自由联想练习</code>的第一个练习方法
<!--more--></p>

<p><img src="/blogimgs/brain_flow.png" alt="brain_flow" /></p>

<p>由任意一个词开始, 依次联想, 直到填满七个节点</p>

<p>然后, 可以尝试一下回忆想到的这七个节点.</p>

<p>书上用非常夸张的表达说明, 甚至从末尾开始向前回忆也可以完全回忆起来.</p>

<p>原本不是很相信, 试了一下. </p>

<p>我的联想结果如下:</p>

<p><img src="/blogimgs/my_brain_flow.png" alt="my_brain_flow" /></p>

<p>嗯… 其实, 这个练习是在下午 5 点左右进行的. 现在是 23:40.</p>

<p>而这图是刚刚按下午的练习填上去的.</p>

<p>不得不拜服!</p>

<p>P.S. 我的联想思路:</p>

<ul>
  <li><code>系统</code> -&gt; <code>操作系统</code>, 因为<code>操作系统</code>是一种<code>软件系统</code></li>
  <li><code>操作系统</code> -&gt; <code>Linux</code>, 因为<code>Linux</code>是著名的开源<code>操作系统</code></li>
  <li><code>Linux</code> -&gt; <code>shell</code>, 因为<code>shell</code>是<code>Linux</code>的用户操作接口</li>
  <li><code>shell</code> -&gt; <code>脚本</code>, 因为<code>shell</code>可以编写<code>脚本</code>运行</li>
  <li><code>脚本</code> -&gt; <code>Python</code>, 因为<code>Python</code>是一种<code>脚本</code>语言</li>
  <li><code>Python</code> -&gt; <code>Java</code>, 因为<code>Java</code>和<code>Python</code>一样是强类型语言</li>
</ul>
]]></content>
  </entry>
  
</feed>
