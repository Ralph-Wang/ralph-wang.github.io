<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: Python | 挨踢夜归人]]></title>
  <link href="http://loudou.info//blog/categories/python/atom.xml" rel="self"/>
  <link href="http://loudou.info/"/>
  <updated>2016-01-29T11:12:18+08:00</updated>
  <id>http://loudou.info/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mock.patch 用装饰器来回避缩进地狱]]></title>
    <link href="http://loudou.info/blog/2016/01/04/mock-dot-patch-yong-zhuang-shi-qi-lai-hui-bi-suo-jin-di-yu/"/>
    <updated>2016-01-04T10:54:44+08:00</updated>
    <id>http://loudou.info/blog/2016/01/04/mock-dot-patch-yong-zhuang-shi-qi-lai-hui-bi-suo-jin-di-yu</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#mock">关于 mock</a></li>
  <li><a href="#patch--with-">patch 的 with 用法</a></li>
  <li><a href="#section">用装饰器用法</a></li>
</ul>

<h2 id="mock">关于 mock</h2>

<p>在测试中间模块时, 由于其会对底层模块有依赖, 或者对系统函数有依赖.
为了保证测试的自闭性, 需要用测试方的模块来代替原有模块. 这类技术就叫做 mock<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>在 Python 中有一个叫<code>mock</code>的模块, 就是用来做这件事的. 在 3.3 以上的版本中, mock
集成到了 <code>unittest.mock</code> 模块, 而对于之前的版本需要自行安装.</p>

<p>至于 <code>mock</code> 的具体用法, 请参考<a href="https://docs.python.org/3.5/library/unittest.mock.html">官方文档</a></p>

<h2 id="patch--with-">patch 的 with 用法</h2>

<p>这个是最早接触的时候学到的关于 patch 的用法. 我们直接上代码示例</p>

<p><code>python
def test_cases(self):
    with patch("codecs.open", return_value=io.StringIO(self.mock_string)):
        cases = {}
        for query, cards in case.Cases("any"):
            cases[query] = cards
        it(cases).should.have.key(u"case1").which.should.contain(u'a', u'b', u'c')
        it(cases).should.have.key(u"case2").which.should.contain(u'1', u'2', u'3')
</code></p>

<p>这里面, patch 的关键字参数用于定义生成的 MagicMock 对象的相关属性</p>

<p>很显然, 当我们需要 mock 的模块比较多时, 缩进会变成一个大灾难. 像这样:</p>

<p><code>python
def test_sth(self):
    with patch("moduleA.methodA"):
        with patch("moduleB.methodB"):
            do your test
</code></p>

<p>从上面的示例看到, 仅仅是做了两个 mock, 测试代码的缩进就已经非常影响代码的可读性了. 更不用说三个或都更多了.</p>

<h2 id="section">用装饰器用法</h2>

<p>为了回避这样的缩进问题, 可以使用 <code>patch</code> 的装饰器用法, 如下</p>

<p>```python
@patch(“codecs.open”)
def test_cases(self, mock_open):
    mock_open.return_value = io.StringIO(self.mock_string)</p>

<pre><code>cases = {}
for query, cards in case.Cases("any"):
    cases[query] = cards
it(cases).should.have.key(u"case1").which.should.contain(u'a', u'b', u'c')
it(cases).should.have.key(u"case2").which.should.contain(u'1', u'2', u'3') ```
</code></pre>

<p>这样, 将 patch 过程放到装饰器去, 测试代码主体便可以节省下缩进,
进而可以提升代码的可读性.</p>

<p>多层的示例</p>

<p><code>python
@patch("moduleA.methodA")
@patch("moduleB.methodB")
def test_sth(self, mocked_methodB, mocked_methodA):
    do your test
</code></p>

<p>对于装饰器用法, 需要注意的是有两条:</p>

<ol>
  <li>patch 后的 mock 对象需要作为参数传给测试函数</li>
  <li>当有多层 patch 时, 测试函数的参数和 patch 的顺序是相反的.</li>
</ol>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>有的地方叫插桩<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几个排序算法(二)]]></title>
    <link href="http://loudou.info/blog/2015/10/14/ji-ge-pai-xu-suan-fa-er/"/>
    <updated>2015-10-14T17:21:15+08:00</updated>
    <id>http://loudou.info/blog/2015/10/14/ji-ge-pai-xu-suan-fa-er</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">归并排序</a></li>
  <li><a href="#section-1">原理</a></li>
  <li><a href="#section-4">快速排序</a>    <ul>
      <li><a href="#section-5">原理</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">归并排序</h2>

<h2 id="section-1">原理</h2>

<p><code>归并排序</code>的根基在于递归.</p>

<h4 id="section-2">初始状态</h4>

<p>两个数排序只需要将较小的那个放到前面就可以了.</p>

<p>那么, 对于两个列表而言, 当列表内只有一个数时. 可以很容易的合并成一个有序的列表</p>

<h4 id="section-3">基本推导</h4>

<p>两个有序的列表, 合并时总是从两个列表头取较小的值,
可以将两个有序列表合并成一个有序列表.</p>

<p>对于一个无序的列表, 可以将它不断分割, 直到得到初始状态中的<code>列表中只有一个数</code>
再逐次向止运算, 即可得到最终的排序结果</p>

<p>```python
def merge_sort(lst):
    if len(lst) == 1:
        return lst</p>

<pre><code>m = len(lst) / 2
left = merge_sort(lst[:m])
right = merge_sort(lst[m:])

merged = []
i = 0
j = 0
p = len(left)
q = len(right)
while i &lt; p and j &lt; q:
    if left[i] &lt; right[j]:
        merged.append(left[i])
        i += 1
    else:
        merged.append(right[j])
        j += 1

while i &lt; p:
    merged.append(left[i])
    i += 1
while j &lt; q:
    merged.append(right[j])
    j += 1
return merged ```
</code></pre>

<h2 id="section-4">快速排序</h2>

<h3 id="section-5">原理</h3>

<p><code>快速排序</code> 每一步都在找某一个特定元素的最终位置.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>具体方法就是, 选定一个特定的数. 将比它大的放到其右边. 比它小的放到其左边.</p>

<p>然后再分别对左边和右边做同样的事.</p>

<p>```python
def quick_sort(lst):
    “””  sort</p>

<pre><code>:type lst: list
:returns: list

"""
if lst == []:
    return []
pivot = lst.pop()
left = []
right = []
while lst:
    x = lst.pop()
    if x &lt; pivot:
        left.append(x)
    else:
        right.append(x)
return quick_sort(left) + [pivot] + quick_sort(right)
</code></pre>

<p>```</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>这是它被用来找第 N 大的数的原因<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几个排序算法(一)]]></title>
    <link href="http://loudou.info/blog/2015/10/06/ji-ge-pai-xu-suan-fa-yi/"/>
    <updated>2015-10-06T20:51:23+08:00</updated>
    <id>http://loudou.info/blog/2015/10/06/ji-ge-pai-xu-suan-fa-yi</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">插入排序</a>    <ul>
      <li><a href="#section-1">原理</a></li>
      <li><a href="#section-2">原地化</a></li>
    </ul>
  </li>
  <li><a href="#section-3">选择排序</a>    <ul>
      <li><a href="#section-4">原理</a></li>
      <li><a href="#section-5">原地化</a></li>
    </ul>
  </li>
  <li><a href="#section-6">冒泡排序</a>    <ul>
      <li><a href="#section-7">原理</a></li>
      <li><a href="#section-8">减少循环</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">插入排序</h2>

<h3 id="section-1">原理</h3>

<ol>
  <li>列表 A 是待排序列表, 列表 B 是空列表</li>
  <li>从列表 A 读数, 并插入列表 B. 插入时, 将元素放在顺序正确的位置</li>
  <li>当元素从列表 A 完全转移到列表 B 时, 排序完成</li>
</ol>

<p><code>python
def insert_sort(lst):
    ret = []
    for i in lst:
        for j in xrange(len(ret)):
            if ret[j] &gt; i:
                ret.insert(j, i)
        else:
            ret.append(i)
    return ret
</code></p>

<h3 id="section-2">原地化</h3>

<p>因为列表 A 和列表 B 中元素总和是一定的.
可以利用原始列表的已访问部分作为列表 B, 进而完成原地<sup id="fnref:inplace"><a href="#fn:inplace" rel="footnote">1</a></sup>的排序.</p>

<p><code>
def insert_sort(lst):
    for i in xrange(len(lst)):
        key = lst[i]
        # 下面整个循环都是在完成插入合适的位置
        # 因为是原地插入, 所以需要一边搜索一边交换
        for j in xrange(i-1, -1, -1):
            if key &lt; lst[j]:
                lst[j+1] = lst[j]
                lst[j] = key
            else:
                break
</code></p>

<h2 id="section-3">选择排序</h2>

<h3 id="section-4">原理</h3>

<ol>
  <li>类似于插入排序, 不同的是, 不再是按顺序从列表 A 从选择元素, 而是选择最大/最小值再插入.</li>
  <li>插入到列表 B 时不再涉及位置问题, 最大值总是插入列表头, 最小值总是插入列表尾</li>
</ol>

<p><code>python
def select_sort(lst):
    ret = []
    n = len(lst)
    for _ in xrange(lst):
        x = min(lst)
        lst.remove(x)
        ret.append(x)
    return ret
</code></p>

<h3 id="section-5">原地化</h3>

<p>把列表前半部分看作空列表, 同样可以把<code>选择排序</code>原地化</p>

<p><code>python
def select_sort(lst):
    n = len(lst)
    for i in xrange(lst):
        min_idx = lst.index(min(lst[i:]))
        if min_idx != i: # 最小值在 i 位置时位置正确, 不交换
            lst[min_idx] = lst[i] ^ lst[min_idx]
            lst[i] = lst[i] ^ lst[min_idx]
            lst[min_idx] = lst[i] ^ lst[min_idx]
</code></p>

<h2 id="section-6">冒泡排序</h2>

<h3 id="section-7">原理</h3>

<p><code>冒泡排序</code>和前两个排序的不同在于它一开始就是原地的.</p>

<ol>
  <li>它遍历所有索引, 每次都判断当前索引的值与后一索引顺序是否正确. 不正确则进行交换.</li>
  <li>进行等同数组长度次数的遍历后, 排序完成</li>
</ol>

<p><code>
def bubble_sort(lst):
    n = len(lst)
    for i in xrange(n):
        for j in xrange(n-1):
            if lst[j] &gt; lst[j+1]:
                lst[j] = lst[j] ^ lst[j+1]
                lst[j+1] = lst[j] ^ lst[j+1]
                lst[j] = lst[j] ^ lst[j+1]
</code></p>

<h3 id="section-8">减少循环</h3>

<p>因为冒泡排序的特定, 经过 N 次遍历后, 数组后面的 N 项顺序是正确的.
不需要进行再遍历.</p>

<p><code>
def bubble_sort(lst):
    n = lst(lst)
    for i in xrange(n):
        for j in xrange(n-1):
            if lst[j] &gt; lst[j+1]:
                lst[j] = lst[j] ^ lst[j+1]
                lst[j+1] = lst[j] ^ lst[j+1]
                lst[j] = lst[j] ^ lst[j+1]
</code></p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:inplace">
      <p>英文术语是<em>in-place</em>, 没太注意正式的中译名.<a href="#fnref:inplace" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsonpath 和 jsonpath-rw]]></title>
    <link href="http://loudou.info/blog/2015/09/16/jsonpath-he-jsonpath-rw/"/>
    <updated>2015-09-16T18:53:48+08:00</updated>
    <id>http://loudou.info/blog/2015/09/16/jsonpath-he-jsonpath-rw</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#jsonpath">jsonpath</a></li>
  <li><a href="#python-">python 的模块</a>    <ul>
      <li><a href="#section">比较</a></li>
    </ul>
  </li>
  <li><a href="#section-6">小结</a></li>
</ul>

<h2 id="jsonpath">jsonpath</h2>

<p>关于什么是 <code>jsonpath</code>: <a href="http://goessner.net/articles/JsonPath/">出门左转</a></p>

<h2 id="python-">python 的模块</h2>

<p>python 中用于 jsonpath 解析的库有以下两个.</p>

<ul>
  <li><a href="https://pypi.python.org/pypi/jsonpath-rw/1.4.0">jsonpath-rw-ext</a></li>
  <li><a href="https://pypi.python.org/pypi/jsonpath/0.54">jsonpath</a></li>
</ul>

<p>从下载量来看, <code>jsonpath-rw-ext</code> 的使用人数更多.</p>

<p>但因为历史原因<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, 我选择使用了 <code>jsonpath</code> 模块</p>

<h3 id="section">比较</h3>

<h4 id="section-1">依赖</h4>
<p><strong>jsonpath</strong> 是一个完全独立的库, 并且只有一个文件, 不依赖外部库</p>

<p><strong>jsonpath-rw-ext</strong> 依赖 <code>jsonpath-rw</code>, <code>Babel</code>, <code>pytz</code>, <code>pbr</code>, <code>ply</code>, <code>six</code>, <code>decorator</code> 多个外部库</p>

<h4 id="section-2">语法</h4>
<p><strong>jsonpath</strong></p>

<ul>
  <li>支持 http://goessner.net/articles/JsonPath/ 提到的所有语法</li>
  <li>扩展点号语法, 支持直接使用数组索引, 类示 <code>$.key.idx</code>.</li>
</ul>

<p><strong>jsonpath-rw-ext</strong></p>

<ul>
  <li>
    <p>同样支持文档中的所有语法</p>
  </li>
  <li>
    <p>没有扩展点号语法, 如果是数组要明确使用 <code>$.key[idx]</code></p>
  </li>
  <li>
    <p>扩展了类似 <code>this</code> 这样的反引号关键词</p>
  </li>
</ul>

<h4 id="section-3">安装</h4>
<p><strong>jsonapth</strong> </p>

<ul>
  <li>虽然在 <a href="http://pypi.python.org">pypi</a> 上有索引, 但是并没有提供下载包, 需要自己手动下载并放入项目</li>
</ul>

<p><strong>jsonapth-rw</strong></p>

<ul>
  <li>可以直接用 <code>pip</code> 进行安装, 包括所有依赖</li>
  <li>使用 <code>pip</code> 需要能连接到的 pypi 服务, 一般来说需要外网</li>
</ul>

<h4 id="section-4">易用</h4>
<p><strong>jsonpath</strong> 只暴露了一个接口</p>

<p><code>python
import jsonpath
jsonpath.jsonpath(path, dict)
</code></p>

<p><strong>jsonpath-rw-ext</strong> 需要使用如下代码进行解析</p>

<p><code>python
from jsonpath_rw_ext import parse
jsonpath_expr = parse('foo[*].baz')
[match.value for match in jsonpath_expr.find({'foo': [{'baz': 1}, {'baz': 2}]})]
</code></p>

<h4 id="section-5">维护</h4>

<p><strong>jsonpath</strong> 的作者已经不再维护这个项目</p>

<p><strong>jsonpath-rw-ext</strong> 的作者仍在维护, 最新一次更新代码在上个月</p>

<h2 id="section-6">小结</h2>

<p>机器能上外网, 或者能搞个本地 pypi 镜像的情况, 还是建议用 <code>jsonpath-rw-ext</code></p>

<p>不能上外网又不想为这么个模块就做个 pypi 镜像, 那就用 <code>jsonpath</code></p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>测试机不能访问外网, 当时也不懂自己搞个 pypi 本地镜象<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用生成器进行惰性读取]]></title>
    <link href="http://loudou.info/blog/2015/07/21/shi-yong-sheng-cheng-qi-jin-xing-duo-xing-du-qu/"/>
    <updated>2015-07-21T10:47:10+08:00</updated>
    <id>http://loudou.info/blog/2015/07/21/shi-yong-sheng-cheng-qi-jin-xing-duo-xing-du-qu</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">需求</a></li>
  <li><a href="#section-1">错误的实现</a></li>
  <li><a href="#section-2">正确的实现</a></li>
  <li><a href="#tips">tips</a></li>
</ul>

<h2 id="section">需求</h2>

<p>完成一个函数, 从文件中读取数据并按行解析</p>

<h2 id="section-1">错误的实现</h2>

<p><code>python
def items(file_name):
    l = []
    for line in open(file_name):
        l.append(parse(line))
    return l
</code></p>

<p>这样实现会将文件全部读入内存后才能返回所有解析好的数据列表,
在处理大文件时会变得非常慢,非常慢,非常慢</p>

<h2 id="section-2">正确的实现</h2>

<p><code>
def items(file_name):
    for line in open(file_name):
        yield parse(line)
</code></p>

<p>使用生成器的方式, 可以保留 open 提供的惰性读取特性, 使得内存占用很小</p>

<h2 id="tips">tips</h2>

<p>当需要同时读取两个文件时, 不要使用 <code>for i, j in zip(a, b)</code> 去处理, 因为 zip
需要把 a, b 全部读入, 这样破坏了惰性读取的特性.</p>

<p>正确的做法:</p>

<p><code>
f1 = items(file_name1)
f2 = items(file_name2)
while True:
    try:
        i = f1.next()
        j = f2.next()
    except StopIteration:
        break
</code></p>

<p>主动调用生成器的 next 方法可以在使用多个生成器时保留其惰性.</p>

<hr />
]]></content>
  </entry>
  
</feed>
