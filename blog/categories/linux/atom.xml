<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: Linux | 挨踢夜归人]]></title>
  <link href="http://ralph-wang.github.io//blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ralph-wang.github.io/"/>
  <updated>2016-10-08T11:06:16+08:00</updated>
  <id>http://ralph-wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bash 传参的一个细节]]></title>
    <link href="http://ralph-wang.github.io/blog/2015/08/10/bash-chuan-can-de-yi-ge-xi-jie/"/>
    <updated>2015-08-10T18:04:59+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2015/08/10/bash-chuan-can-de-yi-ge-xi-jie</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">你四不四傻</a></li>
  <li><a href="#section-1">捉虫</a></li>
  <li><a href="#section-2">小结</a></li>
</ul>

<h2 id="section">你四不四傻</h2>

<p>写了个小函数如下:</p>

<ul>
  <li>接收两个参数</li>
  <li>如果第一个参数为空字符串, 直接 echo 第二个</li>
  <li>否则, 用逗号(,)连接两个字符串</li>
</ul>

<p><code>bash
append_str() {
    if [ -n "$1" ];then
        echo $2
    else
        echo $1,$2
    fi
}
</code></p>

<p>然后, 在调用时却总是不能进行到前一个分支..</p>

<p>调用如下:</p>

<p><code>bash
for i in $(some list);do
    $a=$(append_str $a $i)
done
</code></p>

<p>得到总是类似如下结果</p>

<p><code>
a,,b,c,d
</code></p>

<h2 id="section-1">捉虫</h2>

<p>添加 <code>set -x</code> 查看命令具体执行</p>

<p><code>
append_str a
append_str a, b
append_str a,,b c
append_str a,,b,c d
</code></p>

<p>等等</p>

<p><code>
append_str a
</code></p>

<p>第一个参数应该是个空字符串啊, 被吃啦!!</p>

<p>等等, bash 中变量好像是直接展开, 而非传值的.</p>

<p>嗯, 这样就说通了. 因为第一次调用 $a 还是空, 展开后等同于没有传值给函数</p>

<p>于是, 改个调用</p>

<p><code>
for i in $(some list);do
    $a=$(append_str "$a" "$b")
done
</code></p>

<p>工作正常! Good Job.</p>

<h2 id="section-2">小结</h2>

<ul>
  <li>bash 里参数如果用变量并不是直接传值, 而是先要展开</li>
  <li>使用时, 给变量包一层双引号是个好习惯</li>
</ul>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BASH 特别的 Patch 技巧]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/10/18/bash-te-bie-de-patch-ji-qiao/"/>
    <updated>2014-10-18T21:43:24+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/10/18/bash-te-bie-de-patch-ji-qiao</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">问题</a></li>
  <li><a href="#section-1">解决方案</a></li>
  <li><a href="#section-2">相关工具</a></li>
</ul>

<h2 id="section">问题</h2>

<p>9 月底爆出的 bash 漏洞, Mac 自然也受到影响.</p>

<p>但当时并没有找到苹果官方的解决方案,  <br />
而 bash 官方释出的补丁方式完全看不懂怎么用…  <br />
再加上就快升级 10.10 了.</p>

<p>想着也许会在升级时把补丁打上呢.  <br />
(呃, 其实是懒得研究官方补丁怎么用)  <br />
也就放着没管了</p>

<p>但昨天升级完后, 却发现并没有打上补丁.</p>

<p>只好硬着头皮上了.</p>

<h2 id="section-1">解决方案<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h2>

<p>因为官方的补丁都是打在源码上的,  <br />
所以我们需要去 <a href="http://ftp.gnu.org/gnu/bash/">http://ftp.gnu.org/gnu/bash/</a> 下载 bash 的源码</p>

<p>没什么特别的需求的话, 就直接选最新的 4.3 版本好了. 懒人点 <a href="http://ftp.gnu.org/gnu/bash/bash-4.3.tar.gz">这里</a></p>

<p>下载完成后直接解压即可</p>

<p><code>bash
$ tar zxvf bash-4.3.tar.gz
</code></p>

<p>现在不着急编译安装, 因为我们还需要在源码上打补丁.</p>

<p>我们需要到 <a href="http://ftp.gnu.org/gnu/bash/bash-4.3-patches/">bash-4.3-patches</a> 目录下把 01~30 补丁全部下载下来.</p>

<p>因为不想一个一个点, 所以玩了点小花样:</p>

<p><code>bash
$ seq -f %02g 30| xargs -Ix curl -O &lt;path-of-patches&gt;/bash43-0x
</code></p>

<p>好了, 把下载好的这些个补丁放到 bash 的源码目录下. 用 patch “一个一个”把补丁打上吧.</p>

<p><code>bash
$ for i in `seq -f %02g 30`; do patch -p0 &lt; bash43-0$i;done
</code></p>

<blockquote>
  <p>这里因为变量在重定向符后面, 所以不能用 xargs 进行</p>
</blockquote>

<p>好了, 接下来就是编译安装 -&gt; 替换原有 bash, 就好了</p>

<h2 id="section-2">相关工具</h2>

<p>patch: <a href="http://blog.chinaunix.net/uid-9525959-id-2001542.html">这里</a>有一篇文章讲得蛮详细的, 就不重新造轮子了.</p>

<p>两个 bug 的测试代码:</p>

<p><code>bash
env x='() { :;}; echo Your bash is Fucked'  bash -c "echo just test"
</code></p>

<p>没漏洞的 bash 是不会被 Fuck 的</p>

<p><code>bash
env X='() { (a)=&gt;\' bash -c "echo date"; cat echo} 
</code></p>

<p>没漏洞的 bash 看到的是 date 字样.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>因为是用官方源码打补丁, 所以 *NIX 系统通用<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BASH 中 的正则表达式(误)]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/10/09/bash-zhong-de-zheng-ze-biao-da-shi-wu/"/>
    <updated>2014-10-09T14:45:30+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/10/09/bash-zhong-de-zheng-ze-biao-da-shi-wu</id>
    <content type="html"><![CDATA[<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">源</a></li>
  <li><a href="#section-1">思考</a></li>
  <li><a href="#section-2">总结</a></li>
</ul>

<h2 id="section">源</h2>

<p>今天在写一个 bash 脚本时, 有一部分需要判断 ip 的格式.  <br />
这样的功能自然就想到了高大上的<code>正则表达式</code>同学.</p>

<p>但记得 bash 并不直接支持正则表达式. 于是用 <code>sed</code> 实现了这个功能.</p>

<p>不过, 因为好奇大牛们是怎么处理类似问题的, 仍然去搜索了一下.</p>

<p>发现原来 bash 也支持正则表达式(误).   <br />
大概说法是这样的. 在 <code>[[ ]]</code> 中写正则就可以了. 下面是一个例子</p>

<p><code>bash
if [[ 1 =~ [0-9] ]];then echo 0;fi
</code></p>

<p>于是用这种方式, 完成了最初那个 ip 格式判断的需求…</p>

<p>好吧, 我承认是直接抄这里的: <a href="http://openwares.net/linux/bash_regex_ip_port.html">BASH脚本中使用正则表达式检查IP地址和端口号</a></p>

<blockquote>
  <p>PS. 测试过 255.255.255.256 这样的 ip 是不通过的 : )</p>
</blockquote>

<h2 id="section-1">思考</h2>

<p>一般来说, 需求完成了. 我们就可以收工了.  <br />
但本着逗[哔]的探究精神, 对 <code>[[ ]]</code> 做了如下测试</p>

<p><code>bash
if [[ 1 = [0-9] ]]];then echo 0;fi
</code></p>

<p>结果输出: 0.</p>

<p>哇嚓, 所以 <code>=</code> 就可以了吗? 那 <code>=~</code> 是用来干嘛的???</p>

<p>正则的话, 除了 match 还有 search 方式.  <br />
Ok, 测试下:</p>

<p><code>bash
if [[ abc123ddd = [0-9] ]];then echo 0;fi
if [[ abc123ddd =~ [0-9] ]];then echo 0;fi
</code></p>

<p>第一行无输出, 第二行输出: 0.</p>

<p>明了: <code>=</code> 是完全匹配, 即 match; <code>=~</code> 部分匹配, 即 search</p>

<p>好了, 再来试一下其它元字符</p>

<p><code>bash
if [[ 12 = [0-9]. ]];then echo 0;fi
</code></p>

<p>没结果输出</p>

<p>哇嚓, 这又是怎么回事…</p>

<p><code>bash
if [[ 12 = [0-9]* ]];then echo 0;fi
</code></p>

<p>输出: 0.</p>

<p>难道…</p>

<p><code>bash
if [[ 12 = ?? ]];then echo 0;fi
if [[ 12 = * ]];then echo 0;fi
</code></p>

<p>以上两行均有输出.</p>

<p>原来如此, <code>[[ ]]</code> 并不支持正则表达式.
它所支持的是 <code>glob</code> 表达式, 也就是我们常说的 <code>通配符</code></p>

<h2 id="section-2">总结</h2>

<p>探索结束. 总结一下</p>

<ol>
  <li><code>[[ expression ]]</code> 并不支持正则表达式, 其支持的是 <code>glob</code> 表达式</li>
  <li><code>[[ ]]</code> 中可以用 <code>=</code> 表达匹配, 要示左侧字符串和右侧 <code>glob</code> 完全匹配</li>
  <li>也可以使用 <code>=~</code> 进行搜索, 只要左侧字符串有部分与右侧匹配即可</li>
</ol>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blockdev 命令及相关概念]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/08/20/blockdev-ming-ling-ji-xiang-guan-gai-nian/"/>
    <updated>2014-08-20T23:36:02+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/08/20/blockdev-ming-ling-ji-xiang-guan-gai-nian</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">命令本身</a></li>
  <li><a href="#report-">report 的内容</a></li>
</ul>

<h2 id="section">命令本身</h2>

<p><code>blockdev</code> 是直接调用 <code>ioctl</code> 函数的一个命令.</p>

<p>其原生帮助如下:</p>

<p>```bash
$ blockdev</p>

<p>用法:
  blockdev -V
  blockdev –report [devices]
  blockdev [-v|-q] commands devices</p>

<p>可用命令:
    # 这里暂时省略.
```</p>

<ul>
  <li><code>-V</code> 自然是查看版本号了, 这里就不多说    </li>
  <li><code>--report</code> 用来查看硬盘的相关配置参数, 不传硬盘的话, 会显示所有硬盘    </li>
  <li>最后一种用法, 就是调用各种命令, 对硬盘进行设置. 或单个参数的查看.</li>
</ul>

<h2 id="report-">report 的内容</h2>

<p><code>bash
$ blockdev --report
RO    RA    SSZ    BSZ    StartSec          Size    Device
rw   256    512   4096           0   21474836480    /dev/xvda
</code></p>

<p>调用 blockdev 时需要注意使用 <code>root</code> 用户, 或者 <code>sudo</code></p>

<p>现在来看一下这些字段都是些什么含义</p>

<table>
  <tbody>
    <tr>
      <td>字段</td>
      <td>全称</td>
      <td>含义</td>
    </tr>
    <tr>
      <td>RO</td>
      <td>readonly</td>
      <td>硬盘的读写状态. <code>rw</code> 表示可读可写, <code>ro</code> 则表示只读</td>
    </tr>
    <tr>
      <td>RA</td>
      <td>readahead</td>
      <td><code>预读</code> 的大小. Linux 实际大小为 readahead * 2 (KB)</td>
    </tr>
    <tr>
      <td>SSZ</td>
      <td>sector size</td>
      <td>Linux 中<code>扇区</code>(sector) 大小, 单位 <code>byte</code></td>
    </tr>
    <tr>
      <td>BSZ</td>
      <td>block size</td>
      <td>Linux 中<code>块</code>大小 , 单位 <code>byte</code></td>
    </tr>
    <tr>
      <td>StarcSec</td>
      <td>start sector</td>
      <td>当前设备是从第几个 sector 开始的</td>
    </tr>
    <tr>
      <td>Size</td>
      <td>…</td>
      <td>设备的大小, 不支持 -h 参数变得可读 Orz</td>
    </tr>
    <tr>
      <td>Device</td>
      <td>…</td>
      <td>硬盘对应的设备文件</td>
    </tr>
  </tbody>
</table>

<p>想必你现在和我一样, 表格里面的东西看得晕晕乎乎的.</p>

<p>下面我们简单说明一下</p>

<h4 id="section-1">预读</h4>

<p>当 Linux 向磁盘发起 IO 时, 会进行所谓的<code>预读</code>操作.
即, 会比 CPU 操作需要的内容多从读取一小块内容.</p>

<blockquote>
  <p>当然, 如果发现下一次 IO 是随机的, 便会中断当前预读</p>
</blockquote>

<p>而 <code>readahead</code> 项, 就是配置需要提前读取的内容大小</p>

<p>在 tuning<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 数据服务器, 需要关注这个参数  <br />
不过, 一般情况下, 使用默认的 256 (即预读 512KB) 就足够了.</p>

<h4 id="section-2">扇区</h4>

<p><code>扇区</code>是硬盘的物理属性. 也是操作系统读取数据的最小单位.</p>

<h4 id="section-3">块</h4>

<p><code>块</code> 是操作系统在存储文件时的最小单位. 不论文件真实大小, 其占据的硬盘空间一定是块的整数倍.</p>

<p>一个只有一个字符的文件却占据 4K 空间, 就是这个原因</p>

<p><code>bash
$ cat txt
1
$ du -h txt
4.0K    txt
</code></p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>不知道怎么翻译好… 有调优的意思, 但又有试探性<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux bash 的 C-s]]></title>
    <link href="http://ralph-wang.github.io/blog/2014/08/13/linux-bash-de-c-s/"/>
    <updated>2014-08-13T22:22:02+08:00</updated>
    <id>http://ralph-wang.github.io/blog/2014/08/13/linux-bash-de-c-s</id>
    <content type="html"><![CDATA[<p>putty 莫名不响应问题…</p>

<!--more-->
<ul id="markdown-toc">
  <li><a href="#section">事故</a></li>
  <li><a href="#emacs">缘起 emacs</a></li>
  <li><a href="#c-sc-q">C-s/C-q</a></li>
  <li><a href="#c-s-">取消 C-s 绑定</a></li>
</ul>

<h2 id="section">事故</h2>

<p>在 Windows 下, 一直使用 putty 作为连接远程 Linux 的工具.</p>

<p>偶尔会出现 putty 不响应的现象. 一直不知道是什么问题.  <br />
遇到了也就是重启一下 putty. 也就没有太理会它</p>

<p>今天一次逗[哔]的尝试, 却找到了这个问题的源头:</p>

<blockquote>
  <p>该死的 C-s</p>
</blockquote>

<h2 id="emacs">缘起 emacs</h2>

<p><code>emacs</code> 中 <code>C-s</code> 和 <code>C-r</code> 对应的<code>向下</code>搜索和<code>向上</code>搜索  <br />
而 <code>bash</code> 的编辑快捷键默认采用的便是 emacs 模式.  <br />
便试了试 <code>C-s</code>. 结果出现了不响应的情况.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>搜索到下<a href="http://tianya23.blog.51cto.com/1081650/740207">这篇文章</a></p>

<h2 id="c-sc-q">C-s/C-q</h2>

<p>bash 中 <code>C-s</code> 和 <code>C-q</code> 是代表了一对<code>流控制符</code>.  <br />
其作用就是<code>停止</code>和<code>重启</code>从一个设备向另一个设备的输出流.  <br />
以前是用来切断速率过低的传输过程的(具体有多低, 我也不知道)    </p>

<p>现在的网络比以往要快很多,  <br />
所以这两个控制符也就没什么大用了  <br />
只需要记住, 误敲 <code>C-s</code> 导致 bash 不响应时,    </p>

<blockquote>
  <p>敲下<code>C-q</code> 即可恢复    </p>
</blockquote>

<p>—2014-09-05—</p>

<h2 id="c-s-">取消 C-s 绑定</h2>

<p><code>stty stop undef</code></p>

<p>若要长期生效, 可以写到个人 profile 中</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>bash 中 <code>C-r</code> 仍是<code>向上</code>搜索. 不过,搜索目标是命令历史<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
