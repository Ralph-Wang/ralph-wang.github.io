<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Test Notes By _漏斗]]></title>
  <link href="http://Ralph-Wang.github.io/atom.xml" rel="self"/>
  <link href="http://Ralph-Wang.github.io/"/>
  <updated>2014-03-16T14:12:25+08:00</updated>
  <id>http://Ralph-Wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nodejs Buffer性能优势]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/03/15/nodejs-bufferxing-neng-you-shi/"/>
    <updated>2014-03-15T21:24:23+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/03/15/nodejs-bufferxing-neng-you-shi</id>
    <content type="html"><![CDATA[<p>最近在读朴大神的 <code>深入浅出 Nodejs</code>, 其中不乏性能相关话题.</p>

<p>这里选一个出来做个测试</p>

<!--more-->


<h2>准备</h2>

<p>在 Buffer 一章中, 有这么一个测试.</p>

<p>在 Web 服务中, 使用 Buffer 进行数据传输, 效率要比直接使用字符串快.</p>

<p>光看结果还是不太信服, 于是来做个验证.</p>

<p>先上源码:</p>

<figure class='code'><figcaption><span>server1.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">size</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">;</span> <span class="c1">// 10K</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">helloworld</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">helloworld</span> <span class="o">+=</span> <span class="s1">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">helloworld</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>server2.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">size</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">;</span> <span class="c1">// 10K</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">helloworld</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">helloworld</span> <span class="o">+=</span> <span class="s1">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">helloworld</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">helloworld</span><span class="p">);</span> <span class="c1">// 改用 Buffer 进行传输</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">helloworld</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>server1 和 server2 的差别就只有那一句 <code>helloworld = new Buffer(helloworld)</code>.</p>

<p>现在分别启动 server1 和 server2</p>

<p>并用 ab 测试, 同时将结果分别保存到 res1.txt 和 res2.txt</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ab -c 200 -t http://100 10.161.130.110:8888/ &gt; res1.txt
</span><span class='line'>ab -c 200 -t http://100 10.161.130.110:8888/ &gt; res2.txt
</span></code></pre></td></tr></table></div></figure>


<h2>测试结果</h2>

<p>比较一下测试结果</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/node-buffer-perf.png" alt="node-buffer-perf" /></p>

<p>可以看到, 使用 Buffer 后 QPS 和传输率确实有一定提升.</p>

<h2>CPU 利用率</h2>

<p>监控两次测试的 CPU 使用情况并统计: (统计时, 取 CPU 平稳的 6 次结果并计算用户态 CPU 平均值)</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/node-buffer-cpu.png" alt="node-buffer-cpu" /></p>

<p>两次测试中, CPU 利用率均达到了 100%, 但不使用 Buffer 时, 用户态的 CPU 更高一些.</p>

<p>高出来这一部分, 应该就是进行额外的 Buffer/String 转换消耗掉的.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 awk 查看 PATH 环境变量]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/03/06/yong-awk-cha-kan-path-huan-jing-bian-liang/"/>
    <updated>2014-03-06T14:18:22+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/03/06/yong-awk-cha-kan-path-huan-jing-bian-liang</id>
    <content type="html"><![CDATA[<!--more-->


<p>查看 PATH 环境变量是件痛苦的事情.</p>

<p>用 <code>echo</code> 直接显示时, 输出只有一行, 查看起来很费神</p>

<p>如下图</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$echo</span> <span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://Ralph-Wang.github.io/blogimgs/path-normal.png" alt="path normal" /></p>

<p>看 <code>awk</code> 用法时, 记得可以用 <code>RS</code> 变量修改行标识, 于是试试</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$echo</span> <span class="nv">$PATH</span> | awk <span class="s1">&#39;BEGIN {RS=&quot;:&quot;} {print $0}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://Ralph-Wang.github.io/blogimgs/path-withawk.png" alt="path with awk" /></p>

<p>确实清晰不少.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 jstack 线程定位初体验]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/03/01/yong-jstack-xian-cheng-ding-wei-chu-ti-yan/"/>
    <updated>2014-03-01T22:42:48+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/03/01/yong-jstack-xian-cheng-ding-wei-chu-ti-yan</id>
    <content type="html"><![CDATA[<p>用 top + jstack 定位 java 线程问题</p>

<!--more-->


<h3>1. 需要定位的程序</h3>

<p>首先, 写一个用于计算并输出蜚波那契数列的 java 程序, 大致的输出信息如下.
<img src="http://Ralph-Wang.github.io/blogimgs/thread-fb.png" title="a Fibonacci Thread" alt="Fibonacci" />
这里特意写成<strong>死循环</strong>, 让它不停地去消耗 CPU</p>

<h3>2. 用 top 命令定位进程号</h3>

<p>程序运行起来之后, 就该 <code>top</code> 命令出场了.</p>

<p>直接在命令行中输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$top</span>
</span></code></pre></td></tr></table></div></figure>


<p>看 <code>top</code> 命令的输出
<img src="http://Ralph-Wang.github.io/blogimgs/thread-top.png" title="use top" alt="use top" />
看到消耗 CPU 最高的就是一个 java 进程.</p>

<p>OK, 记下进程号 <strong>100162</strong></p>

<blockquote><p>补充:</p>

<blockquote><p><code>top</code> 添加 -c 参数可以查看到命令的参数信息</p>

<p>这样可以看到 java 具体执行的类, 定位更准确</p></blockquote></blockquote>

<h3>3. 用 top -H -p 命令定位到线程号</h3>

<p>现在, 我们知道消耗 CPU 最高的进程是哪个了.</p>

<p>但我们还不知道具体是哪个线程的问题, 所以不着急用 <code>jstack</code> 去获取 java 进程快照.</p>

<p>再次使用 <code>top</code> 命令, 不过, 这次我们加上 <code>-H -p</code> 参数来查看线程运行情况.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>top -H -p 100162
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注: <em>也可以 <code>top -p &lt;pid&gt;</code> 后再敲 H 打开子线程信息</em></p></blockquote>

<p>这次, 得到如下图的结果:
<img src="http://Ralph-Wang.github.io/blogimgs/thread-topHp.png" title="use top -H -p &lt;pid&gt;" alt="use top -H -p (pid)" /></p>

<p>消耗 CPU 最高的不再是 100162 了. 可以清楚的看到是线程 <strong>100172</strong></p>

<h3>4. 用 jstack 定位到代码行</h3>

<p>下面, 就可以用 <code>jstack</code> 来导出进程的堆栈信息了.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$jstack</span> 100162
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这里不能直接使用 <code>jstack 100172</code>的形式, jstack 似乎只能对<strong>主线程</strong>使用</li>
<li>jstack 不能导出堆栈问题解决: <a href="http://www.haply.info/blog/archives/305">jstack 不能导出堆栈</a></li>
</ul>


<p>然后, 在堆栈信息中找到 nid=0x27bc(100172 的 16 进制) 的线程.</p>

<p>就是下面的 <strong>Thread-0</strong> 线程了</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/thread-jstack.png" title="use jstack" alt="use jstack" /></p>

<p>全是 <code>Fibonacci.calcFibo (testJstack.java:28)</code></p>

<p>定位源码文件 <code>testJstack.java</code> 第 28 行, 最土最慢最二的蜚波那契数列算法&hellip;</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/thread-28.png" title="get the criminal" alt="get the criminal" /></p>

<p>问题定位结束</p>

<p>上完整源码</p>

<div><script src='https://gist.github.com/9290490.js?file=testJstack.java'></script>
<noscript><pre><code>public class testJstack {
    public static void main(String[] args) {
        Thread t = new Thread(new Fibonacci());
        t.start();
    }
}

class Fibonacci implements Runnable {
    public void run() {
        while (true) {
            for (int i = 0; i &lt; 20; i++) {
                System.out.println(calcFibo(i));
            }
        }
    }
    
        /**
     * 最土最慢的蜚波那契计算函数.
     * @return int
     */
    private int  calcFibo(final int n) {

        if (n == 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        } else {
            return calcFibo(n-1) + calcFibo(n-2);
        }
    }
}
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LR 关联之 Alfresco]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/18/lr-guan-lian-zhi-alfresco/"/>
    <updated>2014-02-18T00:39:11+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/18/lr-guan-lian-zhi-alfresco</id>
    <content type="html"><![CDATA[<p>遇到一个比较特别的关联的例子.</p>

<!--more-->


<p>项目是 <strong>Alfresco</strong>
需要开发的脚本业务: 管理员新增用户.</p>

<h3>问题</h3>

<p>录制后, 简单参数化一下运行, 发现最后一步提交数据时, 返回的状态码为 500.</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-errmsg.png" title="Err Msg" alt="Error Message" /></p>

<p>会不会是系统出了什么毛病? 于是去手工操作业务, 却发现一切正常.</p>

<p>再去翻看 LoadRunner 的 Test Result. 发现了好东西.</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-500page.png" title="500 Page" alt="Test Result" /></p>

<p>如上图, 虽然请求返回的状态码是 500, 但返回页面仍是 Alfresco 的页面,</p>

<h3>分析</h3>

<p>状态码 500, 返回页面为系统页面. 这说明 500 的状态码是系统主动返回的.</p>

<p>一般来说, 这种情况都是系统需要验证了某些提交信息,
而这些信息是由前面的某个请求返回的. 回放时这些信息发生了变化, 导致请求失败.</p>

<p>我们需要关联这些信息来保证请求的合法性.</p>

<hr />

<p>首先我们需要找到哪些信息是系统要验证的, 如果有开发配合, 问一嘴就好了.</p>

<p>没有开发配合的话, 就得我们自己找了. 就像现在.</p>

<p>我们先来看请求发出的信息. 首先从请求体里面找</p>

<p>请求体是 <code>json</code> 格式的, 如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>   <span class="s2">&quot;userName&quot;</span><span class="o">:</span><span class="s2">&quot;www2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;password&quot;</span><span class="o">:</span><span class="s2">&quot;www2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;firstName&quot;</span><span class="o">:</span><span class="s2">&quot;www2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;lastName&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;email&quot;</span><span class="o">:</span><span class="s2">&quot;www2@www.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;disableAccount&quot;</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;quota&quot;</span><span class="o">:</span><span class="mi">127893619</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;groups&quot;</span><span class="o">:</span><span class="p">[]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>userName</code> 是用户名, <code>password</code> 是用户密码, <code>firstName</code> 是名字, <code>lastName</code>
是姓氏, <code>email</code> 是邮箱, <code>disableAccount</code> 是禁用选项, <code>quota</code> 是分配容量, <code>groups</code> 是用户所在组</p>

<p>呃&hellip; 每个 key 都有对应的表单字段. 看来需要关联的验证信息并不在请求体中.</p>

<p>那就只有看看请求头了.</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-lr.png" title="Lr Log" alt="LR Log" /></p>

<p>这里发现了一个嫌疑犯: <code>Alfresco-CSRFToken</code></p>

<p>看名字, 应该是用来防止 <code>CSRF</code> 攻击的. 应该是它没错.</p>

<p>我们再用 <code>Fiddler</code> 来看下新请求里, 这个值是否发生了变化.</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-fiddler.png" title="Fiddler" alt="Fiddler" /></p>

<p>果然发生了变化. 这下没错了, 它就是我们需要关联的对象.</p>

<p>然后, 我们要找到系统是什么时候把这个信息发送给我们的.</p>

<p>依次查看各个请求后发现, 在进入用户管理页面时, 返回的请求头里有如下信息</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-tocor.png" title="To Correlations" alt="To Correlations" /></p>

<p>由于信息中的特殊符号被 <code>URL编码</code> 了, 导致在前后两个请求中看上去有些不一样.
通过解码我们可以确认, 这里就是关联参数的来源</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">decodeURIComponent</span><span class="p">(</span><span class="s1">&#39;NPizHL2EuHsHN6VMml0sAfezFhPQmT5fynjkx%2fkqP88%3d&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// output: NPizHL2EuHsHN6VMml0sAfezFhPQmT5fynjkx/kqP88=</span>
</span></code></pre></td></tr></table></div></figure>


<h3>解决方案</h3>

<p>添加以下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">web_reg_save_param</span><span class="p">(</span><span class="s">&quot;token&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;LB=CSRFToken=&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;RB=;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;Search=Headers&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">LAST</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// user requests codes</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">web_add_header</span><span class="p">(</span><span class="s">&quot;Alfresco-CSRFToken&quot;</span><span class="p">,</span> <span class="n">url_decode</span><span class="p">(</span><span class="n">lr_eval_string</span><span class="p">(</span><span class="s">&quot;{token}&quot;</span><span class="p">)));</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// submit requests codes</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>TIPS:</p>

<ul>
<li><p>由于不能直接在请求中添加请求头信息, 所以我们需要调用 <code>web_add_header</code>
函数来添加.</p></li>
<li><p>因为系统发送过来的 <code>token</code> 是 <code>URL编码</code> 的字符串, 而提交新增时发送回去的是解码过的. 所以我们在添加 header 时需要进行解码.  这就是 <code>url_decode</code> 函数的作用. 这个函数并不是 LR 自带的函数, 需要自行添加. 源代码及添加方法戳<a href="http://www.51testing.com/html/96/n-832896.html">这里</a></p></li>
</ul>


<hr />

<p>关于 <code>URL编码</code> 问题, 后来又找到一个 LoadRunner 原生的解决方案如下:</p>

<p><a href="http://blog.csdn.net/womengdoushizhongguo/article/details/8517598">http://blog.csdn.net/womengdoushizhongguo/article/details/8517598</a></p>

<p>于是, 新增的代码可以修改为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">web_reg_save_param</span><span class="p">(</span><span class="s">&quot;token&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;LB=CSRFToken=&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;RB=;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;Search=Headers&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">LAST</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// user requests codes</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">web_convert_param</span><span class="p">(</span><span class="s">&quot;token&quot;</span><span class="p">,</span> <span class="s">&quot;SourceEncoding=URL&quot;</span><span class="p">,</span> <span class="s">&quot;TargetEncoding=PLAIN&quot;</span><span class="p">,</span><span class="n">LAST</span> <span class="p">);</span>
</span><span class='line'><span class="n">web_add_header</span><span class="p">(</span><span class="s">&quot;Alfresco-CSRFToken&quot;</span><span class="p">,</span> <span class="n">lr_eval_string</span><span class="p">(</span><span class="s">&quot;{token}&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// submit requests codes</span>
</span></code></pre></td></tr></table></div></figure>


<h2>02.24 更新</h2>

<hr />

<hr />

<p>再往深了想一下, 如果前端通过某种自定义的算法加密的验证信息再返回系统.</p>

<p>那没有开发配合, 这脚本还真没法完成了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为 Octopress 添加 Tag 功能]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/15/wei-octopress-tian-jia-tag-gong-neng/"/>
    <updated>2014-02-15T00:09:14+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/15/wei-octopress-tian-jia-tag-gong-neng</id>
    <content type="html"><![CDATA[<p>对于博客文章来讲, 除了类别外, 另一个重要的标识属性便是<strong>标签</strong>.</p>

<!--more-->


<p>诚如 <code>alswlx</code> 在 <a href="http://blog.log4d.com/2012/05/tag-cloud/">给 octopress 加上标签功能</a>
描述的那样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>分类 和 标签 分别代表了 有序/无序 两种不同的知识归纳方法.
</span><span class='line'>一篇文章只会属于一个分类, 但可以同时拥有多个标签.</span></code></pre></td></tr></table></div></figure>


<p>而原生的 octopress 却不支持标签功能, 所以, 有必要为它添加上这个功能</p>

<p>我选择的解决方案来自:</p>

<p><a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/">为octopress添加tag
Cloud</a></p>

<p>里面涉及到的两个插件都是 robbyedwards 写的, github 仓库附在下面:</p>

<p><a href="https://github.com/robbyedwards/octopress-tag-pages">tag_pages</a></p>

<p><a href="https://github.com/robbyedwards/octopress-tag-cloud">tag_cloud</a></p>

<p>clone 这两个项目, 得到两个相同的目录结构:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>|--plugins
</span><span class='line'>|--source
</span><span class='line'>|--CHANGELOG.md
</span><span class='line'>|--README.md</span></code></pre></td></tr></table></div></figure>


<p>如果你用的是 octopress 原生的主题, 那么直接复制这两个文件夹到 octopress
目录下即可.</p>

<p>如果是自定义主题的话需要做一些修改一下, <code>source</code> 目录下的各个 <code>html</code>
文件来适应你的主题. 既然都玩上自定义主题了,
这里我就是赘述各个文件的修改方法了.</p>

<p>如果你和我一样使用的是 <a href="https://github.com/kAworu/octostrap3">octostrap3</a>, 可以参考一下我的配置
<a href="https://github.com/Ralph-Wang/octo-source">octo-source</a></p>

<p>配置好之后, 在文章中添加标签了.</p>

<p>使用方法就是在文章的头部配置部分添加 tags 属性即可.</p>

<p>如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----
</span><span class='line'>tags: [octopress, 扩展, asides]
</span><span class='line'>categories: octopress
</span><span class='line'>----</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[联想接龙]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/11/lian-xiang-jie-long/"/>
    <updated>2014-02-11T23:18:09+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/11/lian-xiang-jie-long</id>
    <content type="html"><![CDATA[<p><code>你的第一本思维导图操作书</code>中<code>自由联想练习</code>的第一个练习方法</p>

<!--more-->


<p><img src="http://Ralph-Wang.github.io/blogimgs/brain_flow.png" alt="brain_flow" /></p>

<p>由任意一个词开始, 依次联想, 直到填满七个节点</p>

<p>然后, 可以尝试一下回忆想到的这七个节点.</p>

<p>书上用非常夸张的表达说明, 甚至从末尾开始向前回忆也可以完全回忆起来.</p>

<p>原本不是很相信, 试了一下.</p>

<p>我的联想结果如下:</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/my_brain_flow.png" alt="my_brain_flow" /></p>

<p>嗯&hellip; 其实, 这个练习是在下午 5 点左右进行的. 现在是 23:40.</p>

<p>而这图是刚刚按下午的练习填上去的.</p>

<p>不得不拜服!</p>

<p>P.S. 我的联想思路:</p>

<ul>
<li><code>系统</code> &ndash;> <code>操作系统</code>, 因为<code>操作系统</code>是一种<code>软件系统</code></li>
<li><code>操作系统</code> &ndash;> <code>Linux</code>, 因为<code>Linux</code>是著名的开源<code>操作系统</code></li>
<li><code>Linux</code> &ndash;> <code>shell</code>, 因为<code>shell</code>是<code>Linux</code>的用户操作接口</li>
<li><code>shell</code> &ndash;> <code>脚本</code>, 因为<code>shell</code>可以编写<code>脚本</code>运行</li>
<li><code>脚本</code> &ndash;> <code>Python</code>, 因为<code>Python</code>是一种<code>脚本</code>语言</li>
<li><code>Python</code> &ndash;> <code>Java</code>, 因为<code>Java</code>和<code>Python</code>一样是强类型语言</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java之Boxing和Unboxing]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/09/javazhi-boxinghe-unboxing/"/>
    <updated>2014-02-09T22:07:16+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/09/javazhi-boxinghe-unboxing</id>
    <content type="html"><![CDATA[<p>Java中有两大类数据类型： <strong>基本类型</strong>和<strong>引用类型</strong>。</p>

<p>另外地，<strong>基本类型</strong>们都有其对应的<strong>封装类</strong>。</p>

<p>比如： <code>int</code> &ndash;> <code>Integer</code></p>

<!--more-->


<p>将<strong>基本类型</strong>转换成其对应的<strong>封装类</strong>的过程，就叫做装箱(Boxing)。</p>

<p>反之，就叫拆箱(Unboxing)。</p>

<h2>Auto Boxing &amp;&amp; Unboxing</h2>

<p>因为每次显示的装箱、拆箱过于麻烦，从<code>JDK 5</code>开始，Java　提供了自动装箱、拆箱(Auto Boxing &amp; Unboxing)</p>

<p>让下面这样的代码成立。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Integer</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="c1">//Boxing</span>
</span><span class='line'><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span> <span class="c1">//Unboxing</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是在装箱过程中，有个小特点需要注意一下。</p>

<p>当装箱的<code>int</code>类型在 -128~127 之间时，装箱后的引用会指向同一对象。</p>

<p>而不在这范围内的值，每次装箱都会产生一个新对象。</p>

<p>类似的其它基本类型的范围：</p>

<ul>
<li><code>boolean</code> : 装箱后总是指向同一对象</li>
<li><code>long</code> : -128L~127 之间，装箱后指向同一对象</li>
<li><code>float</code> : 总是产生新对象</li>
<li><code>double</code> : 总是产生新对象</li>
</ul>


<p>下面是测试代码：</p>

<div><script src='https://gist.github.com/8900088.js'></script>
<noscript><pre><code>public class Boxing {
  public static void main(String[] args) {
    // boolean
    Boolean b1 = true;
    Boolean b2 = true;
    Boolean b3 = false;
    Boolean b4 = false;

    // int
    Integer i1 = -129;
    Integer i2 = -129;
    Integer i3 = -128;
    Integer i4 = -128;
    Integer i5 = 127;
    Integer i6 = 127;
    Integer i7 = 128;
    Integer i8 = 128;

    // long
    Long l1 = -129L;
    Long l2 = -129L;
    Long l3 = -128L;
    Long l4 = -128L;
    Long l5 = 127L;
    Long l6 = 127L;
    Long l7 = 128L;
    Long l8 = 128L;

    // float
    Float f1 = 0.0f;
    Float f2 = 0.0f;

    // double
    Double d1 = 0.0d;
    Double d2 = 0.0d;

    // output
    System.out.println(&quot;true: &quot; + (b1 == b2));
    System.out.println(&quot;false: &quot; + (b3 == b4));
    System.out.println(&quot;-129: &quot; + (i1 == i2));
    System.out.println(&quot;-129: &quot; + (i1 == i2));
    System.out.println(&quot;-128: &quot; + (i3 == i4));
    System.out.println(&quot;127: &quot; + (i5 == i6));
    System.out.println(&quot;128: &quot; + (i7 == i8));
    System.out.println(&quot;-129L: &quot; + (l1 == l2));
    System.out.println(&quot;-129L: &quot; + (l1 == l2));
    System.out.println(&quot;-128L: &quot; + (l3 == l4));
    System.out.println(&quot;127L: &quot; + (l5 == l6));
    System.out.println(&quot;128L: &quot; + (l7 == l8));
    System.out.println(&quot;0.0f: &quot; + (f1 == f2));
    System.out.println(&quot;0.0d: &quot; + (d1 == d2));
  }
}/* output:
true: true
false: true
-129: false
-129: false
-128: true
127: true
128: false
-129L: false
-129L: false
-128L: true
127L: true
128L: false
0.0f: false
0.0d: false
*///:~
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java线程状态]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/08/javaxian-cheng-zhuang-tai/"/>
    <updated>2014-02-08T11:07:52+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/08/javaxian-cheng-zhuang-tai</id>
    <content type="html"><![CDATA[<p>监控 Java 线程时，首先要关注的就是线程的运行状态。</p>

<!--more-->


<p>一般来说，Java 线程有 6 种状态：</p>

<ol>
<li>NEW</li>
<li>RUNNABLE</li>
<li>WAITING &amp; TIMED_WAITING</li>
<li>SLEEP</li>
<li>TERMINATED</li>
<li>BLOCK</li>
</ol>


<p>下面，用代码示例一下各个状态</p>

<h3>1. NEW &amp; TERMINATED</h3>

<p>这两个状态比较特殊，分别出现在线程<strong>运行之前</strong>和线程<strong>运行之后</strong>。</p>

<p>这里所说的<strong>运行</strong>指调用线程的<code>start()</code>方法。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=NT.java'></script>
<noscript><pre><code>public class NT {
  public static void main(String[] args) {
    Thread t = new Thread();
    System.out.println(t.getState());
    t.start(); // call start to start the thread
    try {
      Thread.sleep(1 * 1000L);
    } catch (Exception e) {
      e.printStackTrace();
    }
    System.out.println(t.getState());
  }
}/* output:
NEW
TERMINDATED
*///:~
</code></pre></noscript></div>


<p>虽然没有重写<code>run</code>方法，线程会很快结束。但如果在<code>start()</code>后直接调用<code>getState()</code>的话，仍然会返回<strong>RUNNABLE</strong>，所以耐心的等上一秒吧。</p>

<h3>2. RUNNABLE</h3>

<p>我们开线程的目的就是要让它跑起来，所以这个状态可以说是线程的主要状态。</p>

<p>它表示线程正如我们预期的一样正在运行。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=Runnable.java'></script>
<noscript><pre><code>public class Runnable {
    public static void main(String[] args) {
        Thread t = new Thread(){
            @Override
            public void run() {
                for (;true;) {
                    System.out.println(&quot;running&quot;);
                }
            }
        };
        t.setName(&quot;runnable&quot;);
        t.start();
    }/* output:
    running
    running
    running
    ...
    *///:~
}
</code></pre></noscript></div>


<p>运行时，程序会在标准输出里不断输出 <strong>running</strong>。</p>

<p>下面是用 <strong>jvisualvm</strong> 监控到的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-runnable.png" alt="running" /></p>

<p>图中的 <strong>runnable</strong> 线程就是我们在代码中启动的线程。</p>

<h3>3. SLEEP</h3>

<p><strong>休眠</strong>状态下，线程不能被唤醒；必须等到休眠时间结束线程才能回到可执行状态。</p>

<p>让线程进入状态需要调用<code>Thread</code>类的<code>sleep</code>方法。调用时指定好需要休眠的时间，线程就可以美美的睡上一觉了。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=Sleep.java'></script>
<noscript><pre><code>public class Sleep {
    public static void main(String[] args) {
        Thread t = new Thread() {
            @Override
            public void run() {
                for (;true;) {
                    System.out.println(&quot;here&quot;);
                    try {
                        Thread.sleep(30 * 1000L);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        };

        t.setName(&quot;sleep&quot;);
        t.start();
    }/* output:
    here
    here
    ...
    *///:~
}
</code></pre></noscript></div>


<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-sleep.png" alt="sleep" /></p>

<p>注：如果用<strong>线程 dump</strong> 查看，会发现 sleep 线程标示的是 <strong>TIMED_WATING</strong></p>

<blockquote><p>&mdash;-更新&mdash;&ndash;  <br/>
但在 <strong>TIMED_WATING</strong> 后会显示 (sleeping) 作为与 wait 调用的区分</p></blockquote>

<h3>4.WAITING &amp; TIMED_WAITING</h3>

<p>和休眠类似，等待状态下的线程也没有在运行。但是等待下的线程可以随时被唤醒。</p>

<p><strong>WAITING</strong> 和 <strong>TIMED_WAITING</strong> 都是调用<code>wait</code>方法后的状态。区别在于 <strong>WATING</strong> 没有指定时间，除非被唤醒，否则会一直等下去。而 <strong>TIMED_WAITING</strong>　因为指定了时间，即使不被唤醒，也会在指定时间到达之后回到可执行状态。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=TimedWait.java'></script>
<noscript><pre><code>public class TimedWait {
    public static void main(String[] args) {
        final Object lock = new Object();
        // customer
        Thread t1 = new Thread() {
            @Override
            public void run() {
                int i = 0;
                for (;true;) {
                    synchronized(lock) {
                        try {
                            System.out.println(&quot;wait&quot;);
                            lock.wait(20 * 1000L); //wait 20 seconds
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    System.out.println(&quot;t1: &quot; + i++);
                }
            }
        };

        // producer
        Thread t2 = new Thread() {
            @Override
            public void run() {
                for (;true;) {
                    synchronized(lock) {
                        for(int i = 0; i &lt; 150000; i++) {
                            System.out.println(&quot;t2: &quot; + i);
                        }
                        lock.notifyAll();
                        try {
                            lock.wait(2 * 1000L); // wait 2 seconds;
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        };

        t1.setName(&quot;t1&quot;);
        t2.setName(&quot;t2&quot;);

        t1.start();
        t2.start();
    }/* output:
    t2: 0
    t2: 1
    ...
    t2: 14999
    t1: 0
    wait
    t2: 0
    t2: 1
    ...
    *///:~
}
</code></pre></noscript></div>


<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-wait.png" alt="waiting" /></p>

<p><strong>线程 dump</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-timedwait.png" alt="timed_wating" /></p>

<blockquote><p>&mdash;更新&mdash;  <br/>
可以看到在 <strong>TIMED_WATING</strong> 后有显示 (on object monitor)  <br/>
表示调用的是 wait, 而不是 sleep</p></blockquote>

<h3>5.BLOCK</h3>

<p>在线程中，可以使用 <code>sychronized</code> 关键字锁住某些资源，以保证其它线程不能同时访问。如果这时其它线程需要这个资源，就会进入<strong>阻塞</strong>状态。</p>

<p>如果，两个线程同时需要对方锁住的资源，而这些资源又不能被释放，那就会形成死锁。</p>

<p>这里就用死锁来示例<strong>阻塞</strong>状态</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=DeadBlock.java'></script>
<noscript><pre><code>public class DeadBlock {
    public static void main(String[] args) {
        Knife k = new Knife();
        Hammer h = new Hammer();
        Worker worker = new Worker(k, h, &quot;worker&quot;);
        Handler handler = new Handler(k, h, &quot;handler&quot;);
        worker.start();
        handler.start();
    }
}/* output:
I'm worker and using knife.
I'm handler and using hammer.
*///:~

class Worker extends Thread {
    Knife knife;
    Hammer hammer;
    String name;
    /** constructor */
    public Worker(Knife k, Hammer h, String n) {
        this.knife = k;
        this.hammer = h;
        this.name = n;
    }

    public void run() {
        synchronized(knife){
            try {
                System.out.println(&quot;I'm &quot; + this.name + &quot; and using knife.&quot;);
                Thread.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized(hammer){
                System.out.println(&quot;I'm &quot; + this.name + &quot;, I need hammer&quot;);
            }
        }
    }
}

class Handler extends Thread {
    Knife knife;
    Hammer hammer;
    String name;
    /** constructor */
    public Handler(Knife k, Hammer h, String n) {
        this.knife = k;
        this.hammer = h;
        this.name = n;
    }

    public void run() {
        synchronized(hammer){
            try {
                System.out.println(&quot;I'm &quot; + this.name + &quot; and using hammer.&quot;);
                Thread.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized(knife){
                System.out.println(&quot;I'm &quot; + this.name + &quot;, I need knife&quot;);
            }
        }
    }
}
/** Knife */
class Knife {
}

/** Hammer */
class Hammer {
}
</code></pre></noscript></div>


<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-block.png" alt="deadBlock" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用jvisualvm监控远程java进程]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/06/yong-jvisualvmjian-kong-yuan-cheng-javajin-cheng/"/>
    <updated>2014-02-06T21:48:26+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/06/yong-jvisualvmjian-kong-yuan-cheng-javajin-cheng</id>
    <content type="html"><![CDATA[<p><strong>jvisualvm</strong>是从<strong>jdk1.6</strong>开始添加到JDK包中的图形化监控工具。</p>

<!--more-->


<p>开启后可以自动监控本机运行中的java进程。</p>

<p>另外，<strong>jvisualvm</strong>它还可以监控远程机器上java进程的运行状态。</p>

<p>不过，监控远程机器需要在被监控机器上做一些配置：</p>

<h4>1. 安装JDK</h4>

<p>这一步不多说了</p>

<h4>2. 配置/etc/hosts</h4>

<p>要让<strong>jvisualvm</strong>成功连接到被监控机器上，需要在/etc/hosts文件中将被监控机的主机名绑定到被监控机的IP地址。</p>

<p>通过<code>hostname</code>命令可以获得主机名</p>

<figure class='code'><figcaption><span>/etc/hosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>192.168.192.132 Ralph.Wang
</span></code></pre></td></tr></table></div></figure>


<p><code>hostname -i</code>返回实际的IP地址即绑定成功。</p>

<p>注：<strong>CentOS</strong>中的/etc/hosts默认是没有绑定主机名的IP的，直接添加即可</p>

<h4>3. 运行jstatd</h4>

<p>运行<code>jstatd</code>之前，我们需要配置一个安全策略文件,如下</p>

<div><script src='https://gist.github.com/8844076.js?file=jstatd.all.policy'></script>
<noscript><pre><code>grant codebase &quot;file:${java.home}/../lib/tools.jar&quot; {
   permission java.security.AllPermission;
};
</code></pre></noscript></div>


<p>运行<code>jstatd</code>时需要用<code>-J-Djava.security.policy</code>参数指定策略文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jstatd -J-Djava.security.policy<span class="o">=</span>jstatd.all.policy
</span></code></pre></td></tr></table></div></figure>


<h3>4.在jvisualvm中添加远程机</h3>

<p><code>文件</code>&ndash;><code>添加远程主机</code> 输入IP地址即可。</p>

<p>下面是示例图
<img src="http://Ralph-Wang.github.io/blogimgs/jvisualvm-remote.png" alt="jvisualvm监控示例" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress首页只显示摘要]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/06/octopressshou-ye-zhi-xian-shi-zhai-yao/"/>
    <updated>2014-02-06T00:30:36+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/06/octopressshou-ye-zhi-xian-shi-zhai-yao</id>
    <content type="html"><![CDATA[<p>上一篇博客比较长，发现首页居然照样显示了全文</p>

<p>于时查找了下如何只显示摘要</p>

<!--more-->


<p>实现方式很简单:</p>

<ul>
<li><p>在博客文档中添加<code>&lt;!--more--&gt;</code>即可</p></li>
<li><p>添加之后，首页文章后会添加一个<code>read on</code>链接，指向文章页面</p></li>
<li><p>并且只有<code>&lt;!--more--&gt;</code>前的内容人显示到首页</p></li>
</ul>


<p>像这样</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>上一篇博客比较长，发现首页居然照样显示了全文
</span><span class='line'>
</span><span class='line'>于时查找了下如何只显示摘要
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>实现方式很简单:
</span><span class='line'>
</span><span class='line'>* 在博客文档中添加`&lt;!--more--&gt;`即可
</span><span class='line'>
</span><span class='line'>* 添加之后，首页文章后会添加一个`read on`链接，指向文章页面
</span><span class='line'>
</span><span class='line'>* 并且只有`&lt;!--more--&gt;`前的内容人显示到首页</span></code></pre></td></tr></table></div></figure>


<h4>　懒人做法</h4>

<p>修改<code>Rakefile</code>，使写新文章时自动添加一个<code>&lt;!--more--&gt;</code></p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M:%S %z&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&lt;!--more--&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress嵌入新浪微博边栏]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/04/octopressqian-ru-xin-lang-wei-bo-bian-lan/"/>
    <updated>2014-02-04T18:26:31+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/04/octopressqian-ru-xin-lang-wei-bo-bian-lan</id>
    <content type="html"><![CDATA[<p>更换<a href="http://github.com/bkutil/bootstrap-theme"><code>boottrap-theme</code></a>后，边栏只有<strong>最近发表</strong>和<strong>文章分类</strong>两项内容显得有点寒碜。于是想着添加个新浪微博的边栏试试</p>

<!--more-->


<h4>使用微博秀服务</h4>

<p>微博提供的一个小工具。点<a href="http://weibo.com/tool/weiboshow">这里</a>查看。</p>

<p>从这个工具可以得到一个<code>iframe</code>片段如下：</p>

<figure class='code'><figcaption><span>weiboshow</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;iframe</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;550&quot;</span> <span class="na">class=</span><span class="s">&quot;share_self&quot;</span>  <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>  <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span>
</span><span class='line'>  <span class="na">src=</span><span class="s">&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;</span>
</span><span class='line'><span class="s">  width=0&amp;</span>
</span><span class='line'><span class="s">  height=550&amp;</span>
</span><span class='line'><span class="s">  fansRow=2&amp;</span>
</span><span class='line'><span class="s">  ptype=1&amp;</span>
</span><span class='line'><span class="s">  speed=0&amp;</span>
</span><span class='line'><span class="s">  skin=1&amp;</span>
</span><span class='line'><span class="s">  isTitle=1&amp;</span>
</span><span class='line'><span class="s">  noborder=1&amp;</span>
</span><span class='line'><span class="s">  isWeibo=1&amp;</span>
</span><span class='line'><span class="s">  isFans=1&amp;</span>
</span><span class='line'><span class="s">  uid=&amp;</span>
</span><span class='line'><span class="s">  verifier=&amp;</span>
</span><span class='line'><span class="s">dpc=1&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>src中的链接，就是微博秀的页面。</p>

<p>改造一下，变成<code>octopress</code>的边栏片段：</p>

<figure class='code'><figcaption><span>weibo.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;well&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav nav-list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-header&quot;</span><span class="nt">&gt;</span>微博<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;iframe</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;550&quot;</span> <span class="na">class=</span><span class="s">&quot;share_self&quot;</span>  <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                      <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span>
</span><span class='line'>                      <span class="na">src=</span><span class="s">&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;</span>
</span><span class='line'><span class="s">                      width=0&amp;</span>
</span><span class='line'><span class="s">                      height=550&amp;</span>
</span><span class='line'><span class="s">                      fansRow=2&amp;</span>
</span><span class='line'><span class="s">                      ptype=1&amp;</span>
</span><span class='line'><span class="s">                      speed=0&amp;</span>
</span><span class='line'><span class="s">                      skin=1&amp;</span>
</span><span class='line'><span class="s">                      isTitle=1&amp;</span>
</span><span class='line'><span class="s">                      noborder=1&amp;</span>
</span><span class='line'><span class="s">                      isWeibo=1&amp;</span>
</span><span class='line'><span class="s">                      isFans=1&amp;</span>
</span><span class='line'><span class="s">                      uid=1854716251&amp;</span>
</span><span class='line'><span class="s">                      verifier=&amp;</span>
</span><span class='line'><span class="s">                      dpc=1&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>将这个文件保存到<code>custom/asides</code>目录下，并在<code>_config.yml</code>中的<code>default_asides</code>列表中添加<code>custom/asides/weibo.html</code>。</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/weibo.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/recent_posts.html</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="nn">...</span>
</span><span class='line'><span class="c1"># Weibo</span>
</span><span class='line'><span class="l-Scalar-Plain">weibo_uid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1854716251</span>
</span><span class='line'><span class="l-Scalar-Plain">weibo_verifier</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">verifier</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>访问<code>localhost:4000</code>查看一下效果。</p>

<p>注： <code>default_asides</code>列表中各页面的顺序就是边栏显示的顺序</p>

<hr />

<h4>更新：</h4>

<p>我在使用微博秀的过程中并不稳定，有时显示，有时不显示。不显示的时候直接访问URL又是有效的。</p>

<p>于是换一种方式, 新的<code>weibo.html</code></p>

<figure class='code'><figcaption><span>weibo.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;well&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;weibo&quot;</span> <span class="na">class=</span><span class="s">&quot;nav nav-list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-header&quot;</span><span class="nt">&gt;</span>微博<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;iframe</span>
</span><span class='line'>      <span class="na">width=</span><span class="s">&quot;100%&quot;</span>
</span><span class='line'>      <span class="na">height=</span><span class="s">&quot;500&quot;</span>
</span><span class='line'>      <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>      <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span>
</span><span class='line'>      <span class="na">src=</span><span class="s">&quot;http://service.weibo.com/widget/widget_blog.php?uid=1854716251&amp;height=500&amp;skin=wd_02&amp;showpic=1&quot;</span>
</span><span class='line'>      <span class="nt">&gt;&lt;/iframe&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 markdown 写作]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/01/27/yong-markdown-xie-zuo/"/>
    <updated>2014-01-27T18:14:13+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/01/27/yong-markdown-xie-zuo</id>
    <content type="html"><![CDATA[<p><strong>这是用 octpress + github 写的第一篇博客</strong></p>

<!--more-->


<p>用<code>markdown</code>写作是一个让人很爽快的事情。之前在 cnblogs 时也是特意找了几个
<code>markdown</code>插件。偶然的机会，在<a href="http://kumu-linux.github.io">枯木君</a>的博客中了解到可以用
github 来搭建一个完美支持<code>markdown</code>的博客。</p>

<p>这一篇就作为测试<code>octpress</code>的效果用。</p>
]]></content>
  </entry>
  
</feed>
