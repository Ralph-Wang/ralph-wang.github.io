<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Test Notes By _漏斗]]></title>
  <link href="http://Ralph-Wang.github.io/atom.xml" rel="self"/>
  <link href="http://Ralph-Wang.github.io/"/>
  <updated>2014-02-09T12:34:17+08:00</updated>
  <id>http://Ralph-Wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java线程状态]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/08/javaxian-cheng-zhuang-tai/"/>
    <updated>2014-02-08T11:07:52+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/08/javaxian-cheng-zhuang-tai</id>
    <content type="html"><![CDATA[<p>监控 Java 线程时，首先要关注的就是线程的运行状态。</p>

<p>一般来说，Java 线程有 6 种状态：
1. NEW
2. RUNNABLE
3. WAITING &amp; TIMED_WAITING
4. SLEEP
5. BLOCK
6. TERMINATED</p>

<p>下面，用代码示例一下各个状态</p>

<!--more-->


<h3>1. NEW &amp; TERMINATED</h3>

<p>这两个状态比较特殊，分别出现在线程<strong>运行之前</strong>和线程<strong>运行之后</strong>。</p>

<p>这里所说的<strong>运行</strong>指调用线程的<code>start()</code>方法。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=NT.java'></script>
<noscript><pre><code>public class NT {
  public static void main(String[] args) {
    Thread t = new Thread();
    System.out.println(t.getState());
    t.start(); // call start to start the thread
    try {
      Thread.sleep(1 * 1000L);
    } catch (Exception e) {
      e.printStackTrace();
    }
    System.out.println(t.getState());
  }
}/* output:
NEW
TERMINDATED
*///:~
</code></pre></noscript></div>


<p>虽然没有重写<code>run</code>方法，线程会很快结束。但如果在<code>start()</code>后直接调用<code>getState()</code>的话，仍然会返回<strong>RUNNABLE</strong>，所以耐心的等上一秒吧。</p>

<h3>2. RUNNABLE</h3>

<p>我们开线程的目的就是要让它跑起来，所以这个状态可以说是线程的主要状态。</p>

<p>它表示线程正如我们预期的一样正在运行。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839123.js?file=Runnable.java'></script>
<noscript><pre><code>public class Runnable {
  public static void main(String[] args) {
    Thread t = new Thread(){
      @Override
      public void run() {
        for (;true;) {
          System.out.println(&quot;running&quot;);
        }
      }
    };
    t.setName(&quot;runnable&quot;);
    t.start();
  }
}/* output:
running
running
running
...
*///:~
</code></pre></noscript></div>


<p>运行时，程序会在标准输出里不断输出 <strong>running</strong>。</p>

<p>下面是用 <strong>jvisualvm</strong> 监控到的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-runnable.png" alt="running" /></p>

<p>图中的 <strong>runnable</strong> 线程就是我们在代码中启动的线程。</p>

<h3>3. SLEEP</h3>

<p><strong>休眠</strong>状态下，线程不能被唤醒；必须等到休眠时间结束线程才能回到可执行状态。</p>

<p>让线程进入状态需要调用<code>Thread</code>类的<code>sleep</code>方法。调用时指定好需要休眠的时间，线程就可以美美的睡上一觉了。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8875811.js?file=Sleep.java'></script>
<noscript><pre><code>public class Sleep {
  public static void main(String[] args) {
    Thread t = new Thread() {
      @Override
      public void run() {
        for (;true;) {
          System.out.println(&quot;here&quot;);
          try {
            Thread.sleep(30 * 1000L);
          } catch (Exception e) {
            e.printStackTrace();
          }
        }
      }
    };
    
    t.setName(&quot;sleep&quot;);
    t.start();
  }/* output:
  here
  here
  ...
  *///:~
}
</code></pre></noscript></div>


<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-sleep.png" alt="sleep" /></p>

<p>注：如果用<strong>线程 dump</strong> 查看，会发现 sleep 线程标示的是 <strong>TIMED_WATING</strong></p>

<h3>4.WAITING &amp; TIMED_WAITING</h3>

<p>和休眠类似，等待状态下的线程也没有在运行。但是等待下的线程可以随时被唤醒。</p>

<p><strong>WAITING</strong> 和 <strong>TIMED_WAITING</strong> 都是调用<code>wait</code>方法后的状态。区别在于 <strong>WATING</strong> 没有指定时间，除非被唤醒，否则会一直等下去。而 <strong>TIMED_WAITING</strong>　因为指定了时间，即使不被唤醒，也会在指定时间到达之后回到可执行状态。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839194.js?file=TimedWait.java'></script>
<noscript><pre><code>public class TimedWait {
  public static void main(String[] args) {
    final Object lock = new Object();
    // customer
    Thread t1 = new Thread() {
      @Override
      public void run() {
        int i = 0;
        for (;true;) {
          synchronized(lock) {
            try {
              System.out.println(&quot;wait&quot;);
              lock.wait(20 * 1000L); //wait 20 seconds
            } catch (InterruptedException e) {
              e.printStackTrace();
            }
          }
          System.out.println(&quot;t1: &quot; + i++);
        }
      }
    };

    // producer
    Thread t2 = new Thread() {
      @Override
      public void run() {
        for (;true;) {
          synchronized(lock) {
            for(int i = 0; i &lt; 150000; i++) {
              System.out.println(&quot;t2: &quot; + i);
            }
            lock.notifyAll();
            try {
              lock.wait(2 * 1000L); // wait 2 seconds;
            } catch (InterruptedException e) {
              e.printStackTrace();
            }
          }
        }
      }
    };

    t1.setName(&quot;t1&quot;);
    t2.setName(&quot;t2&quot;);

    t1.start();
    t2.start();
  }
}/* output:
t2: 0
t2: 1
...
t2: 14999
t1: 0
wait
t2: 0
t2: 1
...
*///:~
</code></pre></noscript></div>


<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-wait.png" alt="waiting" /></p>

<p><strong>线程 dump</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-timedwait.png" alt="timed_wating" /></p>

<h3>5.BLOCK</h3>

<p>在线程中，可以使用 <code>sychronized</code> 关键字锁住某些资源，以保证其它线程不能同时访问。如果这时其它线程需要这个资源，就会进入<strong>阻塞</strong>状态。</p>

<p>如果，两个线程同时需要对方锁住的资源，而这些资源又不能被释放，那就会形成死锁。</p>

<p>这里就用死锁来示例<strong>阻塞</strong>状态</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839167.js?file=DeadBlock.java'></script>
<noscript><pre><code>
public class DeadBlock {
  public static void main(String[] args) {
    Knife k = new Knife();
    Hammer h = new Hammer();
    Worker worker = new Worker(k, h, &quot;worker&quot;);
    Handler handler = new Handler(k, h, &quot;handler&quot;);
    worker.start();
    handler.start();
  }
}/* output:
I'm worker and using knife.
I'm handler and using hammer.
*///:~

class Worker extends Thread {
  Knife knife;
  Hammer hammer;
  String name;
  /** constructor */
  public Worker(Knife k, Hammer h, String n) {
    this.knife = k;
    this.hammer = h;
    this.name = n;
  }

  public void run() {
    synchronized(knife){
      try {
        System.out.println(&quot;I'm &quot; + this.name + &quot; and using knife.&quot;);
        Thread.sleep(2);
      } catch (InterruptedException e) {
        e.printStackTrace();
      }

      synchronized(hammer){
        System.out.println(&quot;I'm &quot; + this.name + &quot;, I need hammer&quot;);
      }
    }
  }
}

class Handler extends Thread {
  Knife knife;
  Hammer hammer;
  String name;
  /** constructor */
  public Handler(Knife k, Hammer h, String n) {
    this.knife = k;
    this.hammer = h;
    this.name = n;
  }

  public void run() {
    synchronized(hammer){
      try {
        System.out.println(&quot;I'm &quot; + this.name + &quot; and using hammer.&quot;);
        Thread.sleep(2);
      } catch (InterruptedException e) {
        e.printStackTrace();
      }

      synchronized(knife){
        System.out.println(&quot;I'm &quot; + this.name + &quot;, I need knife&quot;);
      }
    }
  }
}
/** Knife */
class Knife {
}

/** Hammer */
class Hammer {
}
</code></pre></noscript></div>


<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-block.png" alt="deadBlock" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用jvisualvm监控远程java进程]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/06/yong-jvisualvmjian-kong-yuan-cheng-javajin-cheng/"/>
    <updated>2014-02-06T21:48:26+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/06/yong-jvisualvmjian-kong-yuan-cheng-javajin-cheng</id>
    <content type="html"><![CDATA[<p><strong>jvisualvm</strong>是从<strong>jdk1.6</strong>开始添加到JDK包中的图形化监控工具。</p>

<p>开启后可以自动监控本机运行中的java进程。</p>

<p>另外，<strong>jvisualvm</strong>它还可以监控远程机器上java进程的运行状态。</p>

<p>不过，监控远程机器需要在被监控机器上做一些配置：</p>

<!--more-->


<h4>1. 安装JDK</h4>

<p>这一步不多说了</p>

<h4>2. 配置/etc/hosts</h4>

<p>要让<strong>jvisualvm</strong>成功连接到被监控机器上，需要在/etc/hosts文件中将被监控机的主机名绑定到被监控机的IP地址。</p>

<p>通过<code>hostname</code>命令可以获得主机名</p>

<figure class='code'><figcaption><span>/etc/hosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>192.168.192.132 Ralph.Wang
</span></code></pre></td></tr></table></div></figure>


<p><code>hostname -i</code>返回实际的IP地址即绑定成功。</p>

<p>注：<strong>CentOS</strong>中的/etc/hosts默认是没有绑定主机名的IP的，直接添加即可</p>

<h4>3. 运行jstatd</h4>

<p>运行<code>jstatd</code>之前，我们需要配置一个安全策略文件,如下</p>

<div><script src='https://gist.github.com/8844076.js?file=jstatd.all.policy'></script>
<noscript><pre><code>grant codebase &quot;file:${java.home}/../lib/tools.jar&quot; {
   permission java.security.AllPermission;
};
</code></pre></noscript></div>


<p>运行<code>jstatd</code>时需要用<code>-J-Djava.security.policy</code>参数指定策略文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jstatd -J-Djava.security.policy<span class="o">=</span>jstatd.all.policy<span class="o">=</span>./jstatd.all.policy
</span></code></pre></td></tr></table></div></figure>


<h3>4.在jvisualvm中添加远程机</h3>

<p><code>文件</code>&ndash;><code>添加远程主机</code> 输入IP地址即可。</p>

<p>下面是示例图
<img src="http://Ralph-Wang.github.io/blogimgs/jvisualvm-remote.png" alt="jvisualvm监控示例" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress首页只显示摘要]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/06/octopressshou-ye-zhi-xian-shi-zhai-yao/"/>
    <updated>2014-02-06T00:30:36+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/06/octopressshou-ye-zhi-xian-shi-zhai-yao</id>
    <content type="html"><![CDATA[<p>上一篇博客比较长，发现首页居然照样显示了全文</p>

<p>于时查找了下如何只显示摘要</p>

<!--more-->


<p>实现方式很简单:</p>

<ul>
<li><p>在博客文档中添加<code>&lt;!--more--&gt;</code>即可</p></li>
<li><p>添加之后，首页文章后会添加一个<code>read on</code>链接，指向文章页面</p></li>
<li><p>并且只有<code>&lt;!--more--&gt;</code>前的内容人显示到首页</p></li>
</ul>


<p>像这样</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>上一篇博客比较长，发现首页居然照样显示了全文
</span><span class='line'>
</span><span class='line'>于时查找了下如何只显示摘要
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>实现方式很简单:
</span><span class='line'>
</span><span class='line'>* 在博客文档中添加`&lt;!--more--&gt;`即可
</span><span class='line'>
</span><span class='line'>* 添加之后，首页文章后会添加一个`read on`链接，指向文章页面
</span><span class='line'>
</span><span class='line'>* 并且只有`&lt;!--more--&gt;`前的内容人显示到首页</span></code></pre></td></tr></table></div></figure>


<h4>　懒人做法</h4>

<p>修改<code>Rakefile</code>，使写新文章时自动添加一个<code>&lt;!--more--&gt;</code></p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M:%S %z&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&lt;!--more--&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress嵌入新浪微博边栏]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/04/octopressqian-ru-xin-lang-wei-bo-bian-lan/"/>
    <updated>2014-02-04T18:26:31+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/04/octopressqian-ru-xin-lang-wei-bo-bian-lan</id>
    <content type="html"><![CDATA[<p>更换<a href="http://github.com/bkutil/bootstrap-theme"><code>boottrap-theme</code></a>后，边栏只有<strong>最近发表</strong>和<strong>文章分类</strong>两项内容显得有点寒碜。于是想着添加个新浪微博的边栏试试</p>

<!--more-->


<h4>使用微博秀服务</h4>

<p>微博提供的一个小工具。点<a href="http://weibo.com/tool/weiboshow">这里</a>查看。</p>

<p>从这个工具可以得到一个<code>iframe</code>片段如下：</p>

<figure class='code'><figcaption><span>weiboshow</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;iframe</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;550&quot;</span> <span class="na">class=</span><span class="s">&quot;share_self&quot;</span>  <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>  <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span>
</span><span class='line'>  <span class="na">src=</span><span class="s">&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;</span>
</span><span class='line'><span class="s">  width=0&amp;</span>
</span><span class='line'><span class="s">  height=550&amp;</span>
</span><span class='line'><span class="s">  fansRow=2&amp;</span>
</span><span class='line'><span class="s">  ptype=1&amp;</span>
</span><span class='line'><span class="s">  speed=0&amp;</span>
</span><span class='line'><span class="s">  skin=1&amp;</span>
</span><span class='line'><span class="s">  isTitle=1&amp;</span>
</span><span class='line'><span class="s">  noborder=1&amp;</span>
</span><span class='line'><span class="s">  isWeibo=1&amp;</span>
</span><span class='line'><span class="s">  isFans=1&amp;</span>
</span><span class='line'><span class="s">  uid=&amp;</span>
</span><span class='line'><span class="s">  verifier=&amp;</span>
</span><span class='line'><span class="s">dpc=1&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>src中的链接，就是微博秀的页面。</p>

<p>改造一下，变成<code>octopress</code>的边栏片段：</p>

<figure class='code'><figcaption><span>weibo.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;well&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav nav-list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-header&quot;</span><span class="nt">&gt;</span>微博<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;iframe</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;550&quot;</span> <span class="na">class=</span><span class="s">&quot;share_self&quot;</span>  <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                      <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span>
</span><span class='line'>                      <span class="na">src=</span><span class="s">&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;</span>
</span><span class='line'><span class="s">                      width=0&amp;</span>
</span><span class='line'><span class="s">                      height=550&amp;</span>
</span><span class='line'><span class="s">                      fansRow=2&amp;</span>
</span><span class='line'><span class="s">                      ptype=1&amp;</span>
</span><span class='line'><span class="s">                      speed=0&amp;</span>
</span><span class='line'><span class="s">                      skin=1&amp;</span>
</span><span class='line'><span class="s">                      isTitle=1&amp;</span>
</span><span class='line'><span class="s">                      noborder=1&amp;</span>
</span><span class='line'><span class="s">                      isWeibo=1&amp;</span>
</span><span class='line'><span class="s">                      isFans=1&amp;</span>
</span><span class='line'><span class="s">                      uid=1854716251&amp;</span>
</span><span class='line'><span class="s">                      verifier=&amp;</span>
</span><span class='line'><span class="s">                      dpc=1&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>将这个文件保存到<code>custom/asides</code>目录下，并在<code>_config.yml</code>中的<code>default_asides</code>列表中添加<code>custom/asides/weibo.html</code>。</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/weibo.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/recent_posts.html</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="nn">...</span>
</span><span class='line'><span class="c1"># Weibo</span>
</span><span class='line'><span class="l-Scalar-Plain">weibo_uid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1854716251</span>
</span><span class='line'><span class="l-Scalar-Plain">weibo_verifier</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">verifier</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>访问<code>localhost:4000</code>查看一下效果。</p>

<p>注： <code>default_asides</code>列表中各页面的顺序就是边栏显示的顺序</p>

<hr />

<h4>更新：</h4>

<p>我在使用微博秀的过程中并不稳定，有时显示，有时不显示。不显示的时候直接访问URL又是有效的。</p>

<p>于是换一种方式, 新的<code>weibo.html</code></p>

<figure class='code'><figcaption><span>weibo.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;well&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;weibo&quot;</span> <span class="na">class=</span><span class="s">&quot;nav nav-list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-header&quot;</span><span class="nt">&gt;</span>微博<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;iframe</span>
</span><span class='line'>      <span class="na">width=</span><span class="s">&quot;100%&quot;</span>
</span><span class='line'>      <span class="na">height=</span><span class="s">&quot;500&quot;</span>
</span><span class='line'>      <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>      <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span>
</span><span class='line'>      <span class="na">src=</span><span class="s">&quot;http://service.weibo.com/widget/widget_blog.php?uid=1854716251&amp;height=500&amp;skin=wd_02&amp;showpic=1&quot;</span>
</span><span class='line'>      <span class="nt">&gt;&lt;/iframe&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 markdown 写作]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/01/27/yong-markdown-xie-zuo/"/>
    <updated>2014-01-27T18:14:13+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/01/27/yong-markdown-xie-zuo</id>
    <content type="html"><![CDATA[<!--more-->


<p><strong>这是用 octpress + github 写的第一篇博客</strong></p>

<p>用<code>markdown</code>写作是一个让人很爽快的事情。之前在 cnblogs 时也是特意找了几个
<code>markdown</code>插件。偶然的机会，在<a href="http://kumu-linux.github.io">枯木君</a>的博客中了解到可以用
github 来搭建一个完美支持<code>markdown</code>的博客。</p>

<p>这一篇就作为测试<code>octpress</code>的效果用。</p>
]]></content>
  </entry>
  
</feed>
