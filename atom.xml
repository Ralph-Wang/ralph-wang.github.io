<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Test Notes By _漏斗]]></title>
  <link href="http://Ralph-Wang.github.io/atom.xml" rel="self"/>
  <link href="http://Ralph-Wang.github.io/"/>
  <updated>2014-07-17T19:37:59+08:00</updated>
  <id>http://Ralph-Wang.github.io/</id>
  <author>
    <name><![CDATA[_漏斗]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning the Bash Shell 笔记-Debug]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/06/11/learning-the-bash-shell-bi-ji-debug/"/>
    <updated>2014-06-11T10:40:33+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/06/11/learning-the-bash-shell-bi-ji-debug</id>
    <content type="html"><![CDATA[<p>任何开发测试工作都离不开的话题 &mdash; Debug.</p>

<p>bash 脚本自然也不能免俗</p>

<!--more-->


<h2>显示每一步执行的命令</h2>

<p>默认情况下, bash 脚本执行时不会像 Windows 的 bat 一样显示每一次执行的命令.
虽然说这功能在执行时比较难看, 但在 Debug
时可以帮助我们查看脚本是执行到哪一行出现的问题</p>

<p>如果想让 bash 脚本运行时显示每行命令, 则需要在脚本开始添加如下命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -o <span class="o">[</span>noexec|verbose|xtrace<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>参数说明:</p>

<ul>
<li><p><code>noexec</code>  不执行脚本, 只检查语法错误</p></li>
<li><p><code>verbose</code> 显示每一行命令 (开启这个功能后 bash 就和 bat 很像了)</p></li>
<li><p><code>xtrace</code>  比 verbose 更详细的显示, 具体显示信息由 <code>PS4</code> 变量配置</p></li>
</ul>


<h2>几个 fake signal</h2>

<h3>EXIT</h3>

<p>在脚本退出时会触发该信号</p>

<figure class='code'><figcaption><span>exit.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">trap</span> <span class="s1">&#39;echo exiting the script&#39;</span> EXIT
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;starting the script&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/exit.sh
</span><span class='line'>starting the script
</span><span class='line'>exiting the script
</span></code></pre></td></tr></table></div></figure>


<h3>DEBUG</h3>

<p>每一行命令执行前都会触发这个信号, 开启 <code>set -o functrace</code> 后函数内部也会触发</p>

<figure class='code'><figcaption><span>debug.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">trap</span> <span class="s1">&#39;echo execute $LINENO&#39;</span> DEBUG
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">((</span><span class="nv">_i</span><span class="o">=</span>0;_i&lt;2;_i++<span class="o">))</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$_i</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/debug.sh
</span><span class='line'>execute 5
</span><span class='line'>execute 5
</span><span class='line'>execute 7
</span><span class='line'>0
</span><span class='line'>execute 5
</span><span class='line'>execute 5
</span><span class='line'>execute 7
</span><span class='line'>1
</span><span class='line'>execute 5
</span><span class='line'>execute 5
</span></code></pre></td></tr></table></div></figure>


<h3>ERR</h3>

<p>当有命令执行后的返回值不是 0 时触发该信号</p>

<figure class='code'><figcaption><span>err.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">trap</span> <span class="s1">&#39;echo Error with status $?&#39;</span> ERR
</span><span class='line'>
</span><span class='line'><span class="k">function </span>bad
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">return </span>111
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>bad
</span></code></pre></td></tr></table></div></figure>


<p>执行结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/err.sh
</span><span class='line'>Error with status 111
</span></code></pre></td></tr></table></div></figure>


<h3>RETURN</h3>

<p>当用 <code>source</code> 执行脚本返回后触发该信号</p>

<p>若执行 <code>set -o functrace</code>, 则函数返回后也能触发该信号</p>

<figure class='code'><figcaption><span>x.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>return.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">trap</span> <span class="s1">&#39;echo debug occured&#39;</span> DEBUG
</span><span class='line'><span class="nb">trap</span> <span class="s1">&#39;echo return occured&#39;</span> RETURN
</span><span class='line'>
</span><span class='line'><span class="nb">source</span> ./x.sh
</span></code></pre></td></tr></table></div></figure>


<p>执行结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>debug occured
</span><span class='line'>Hello World
</span><span class='line'><span class="k">return </span>occured
</span></code></pre></td></tr></table></div></figure>


<h2>一个简易的 Debugger</h2>

<p>一个 Debugger 需要的功能点:</p>

<ul>
<li><p>断点</p></li>
<li><p>逐步执行</p></li>
<li><p>变量监视</p></li>
<li><p>显示当前执行位置和断点位置</p></li>
<li><p>不需要改动源码即可进行 Debug</p></li>
</ul>


<h2>实现原理:</h2>

<p>利用 <code>DEBUG</code> 信号中断执行. 进而进入 debug 命令行</p>

<h2>核心数组:</h2>

<ul>
<li><p><code>_lines</code> 用来存储所有 Debug 脚本的代码</p></li>
<li><p><code>_linebp</code> 用来存储断点行号</p></li>
</ul>


<p>文件结构:</p>

<blockquote><p>bashdb  # 主脚本, 即驱动器</p>

<p>bashdb.pre # 添加到原脚本头的部分</p>

<p>bashdb.fns # 定义的函数们</p></blockquote>

<figure class='code'><figcaption><span>bashdb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">_dbname</span><span class="o">=</span><span class="k">${</span><span class="nv">0</span><span class="p">##*/</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Bash Debugger Version 1.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">((</span> <span class="nv">$# </span>&lt; 1 <span class="o">))</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;$_dbname Usage: $_dbname filename.&quot;</span> &gt;&amp;2
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">_guineapig</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -r <span class="nv">$_guineapig</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;$_dbname: file &#39;$1&#39; is not readable.&quot;</span> &gt;&amp;2
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">shift</span>
</span><span class='line'>
</span><span class='line'><span class="nv">_tmpdir</span><span class="o">=</span>/tmp
</span><span class='line'><span class="nv">_libdir</span><span class="o">=</span>.
</span><span class='line'><span class="nv">_debugfile</span><span class="o">=</span><span class="nv">$_tmpdir</span>/bashdb.<span class="nv">$$</span> <span class="c"># tmp file for script debugged</span>
</span><span class='line'>
</span><span class='line'>cat <span class="nv">$_libdir</span>/bashdb.pre <span class="nv">$_guineapig</span> &gt; <span class="nv">$_debugfile</span>
</span><span class='line'><span class="nb">exec </span>bash <span class="nv">$_debugfile</span> <span class="nv">$_guineapig</span> <span class="nv">$_tmpdir</span> <span class="nv">$_libdir</span> <span class="s2">&quot;$@&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>关于 <code>exec</code> 命令</p>

<blockquote><p>执行其参数, 用其并替代当前进程. 脚本中在 <code>exec</code> 后的命令都不会执行
在 cli 中执行 exec 后&hellip; 当前 shell 会直接退出</p></blockquote></blockquote>

<figure class='code'><figcaption><span>bashdb.pre</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">_debugfile</span><span class="o">=</span><span class="nv">$0</span>
</span><span class='line'><span class="nv">_guineapig</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>
</span><span class='line'><span class="nv">_tmpdir</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nv">_libdir</span><span class="o">=</span><span class="nv">$3</span>
</span><span class='line'>
</span><span class='line'><span class="nb">shift </span>3
</span><span class='line'>
</span><span class='line'><span class="c"># 将所有函数加载进来</span>
</span><span class='line'><span class="nb">source</span> <span class="nv">$_libdir</span>/bashdb.fns
</span><span class='line'>
</span><span class='line'><span class="nv">_linebp</span><span class="o">=</span>
</span><span class='line'><span class="nb">let </span><span class="nv">_trace</span><span class="o">=</span>0
</span><span class='line'><span class="nb">let </span><span class="nv">_i</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">while </span><span class="nb">read</span>
</span><span class='line'><span class="nb"> </span><span class="k">do</span>
</span><span class='line'><span class="k">      </span>_line<span class="o">[</span><span class="nv">$_i</span><span class="o">]=</span><span class="nv">$REPLY</span>
</span><span class='line'>      <span class="nb">let </span><span class="nv">_i</span><span class="o">=</span><span class="nv">$_i</span>+1
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span> &lt; <span class="nv">$_guineapig</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 退出时清除临时文件</span>
</span><span class='line'><span class="nb">trap </span>_cleanup EXIT
</span><span class='line'>
</span><span class='line'><span class="nb">let </span><span class="nv">_steps</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'><span class="c"># 减掉 bashdb.pre 的行数</span>
</span><span class='line'><span class="nb">trap</span> <span class="s1">&#39;_steptrap $(($LINENO - 32))&#39;</span> DEBUG
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>bashdb.fns</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Debugger 的主要函数 _steptrap</span>
</span><span class='line'><span class="c"># 每一行代码执行前, 这个函数都会被调用</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>_steptrap
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nv">_curlline</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>  <span class="o">((</span> <span class="nv">$trace</span> <span class="o">))</span> <span class="o">&amp;&amp;</span> _msg <span class="s2">&quot;Line $_curlline: ${_lines[$_curlline]}&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">((</span> <span class="nv">$_steps</span> &gt;<span class="o">=</span> 0 <span class="o">))</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">let </span><span class="nv">_steps</span><span class="o">=</span><span class="nv">$_steps</span>-1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># check if there is a breakpoint</span>
</span><span class='line'>  <span class="k">if </span>_at_linenumbp
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">      </span>_msg <span class="s2">&quot;Reached breakpoint at $_curlline&quot;</span>
</span><span class='line'>      _cmdloop
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># check if there is a break condition</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$_brcond&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">eval</span> <span class="nv">$_brcond</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">      </span>_msg <span class="s2">&quot;Break condition $_brcond true at line $_curlline&quot;</span>
</span><span class='line'>      _cmdloop
</span><span class='line'>  
</span><span class='line'>  <span class="c"># check if there are no more steps</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">((</span> <span class="nv">$_steps</span> <span class="o">==</span> 0 <span class="o">))</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">      </span>_msg <span class="s2">&quot;Stopped at line $_curlline&quot;</span>
</span><span class='line'>      _cmdloop
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 命令处理函数 _cmdloop</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>_cmdloop
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nb">local </span>cmd args
</span><span class='line'>
</span><span class='line'>  <span class="k">while </span><span class="nb">read</span> -e -p <span class="s2">&quot;bash&gt; &quot;</span> cmd args
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'><span class="k">      case</span> <span class="nv">$cmd</span> in
</span><span class='line'>          <span class="se">\?</span>|h <span class="o">)</span> <span class="c"># 显示命令菜单</span>
</span><span class='line'>              _menu ;;
</span><span class='line'>          bc <span class="o">)</span> <span class="c"># 设置中断条件</span>
</span><span class='line'>              _setbc <span class="nv">$args</span> ;;
</span><span class='line'>          bp <span class="o">)</span> <span class="c"># 设置断点</span>
</span><span class='line'>              _setbp <span class="nv">$args</span> ;;
</span><span class='line'>          cb <span class="o">)</span> <span class="c"># 清除一个或全部断点</span>
</span><span class='line'>              _clearbp <span class="nv">$args</span> ;;
</span><span class='line'>          ds <span class="o">)</span> <span class="c"># 显示脚本和断点</span>
</span><span class='line'>              _displayscript ;;
</span><span class='line'>          g <span class="o">)</span> <span class="c"># 运行脚本直到断点</span>
</span><span class='line'>              <span class="k">return</span> ;;
</span><span class='line'>          q <span class="o">)</span> <span class="c"># 退出</span>
</span><span class='line'>              <span class="nb">exit</span> ;;
</span><span class='line'>          s <span class="o">)</span> <span class="c"># 执行 N 行, 默认 1 行</span>
</span><span class='line'>              <span class="nb">let </span><span class="nv">_steps</span><span class="o">=</span><span class="k">${</span><span class="nv">args</span><span class="k">:-</span><span class="nv">1</span><span class="k">}</span>
</span><span class='line'>          x <span class="o">)</span> <span class="c"># 开关显示所在行</span>
</span><span class='line'>              _xtrace ;;
</span><span class='line'>          !* <span class="o">)</span> <span class="c"># 执行 shell 命令</span>
</span><span class='line'>              <span class="nb">eval</span> <span class="k">${</span><span class="nv">cmd</span><span class="p">#!</span><span class="k">}</span> <span class="nv">$args</span>;;
</span><span class='line'>          * <span class="o">)</span>
</span><span class='line'>              _msg <span class="s2">&quot;Invalid command: &#39;$cmd&#39;&quot;</span> ;;
</span><span class='line'>      <span class="k">esac</span>
</span><span class='line'><span class="k">  done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 设置断点命令对应函数 _setbp</span>
</span><span class='line'>
</span><span class='line'>functrace _setbp
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="c"># 没有参数就显示断点信息</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$1&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">      </span>_listbp
</span><span class='line'>  <span class="k">elif</span> <span class="o">[</span> <span class="k">$(</span><span class="nb">echo</span> <span class="nv">$1</span> | grep <span class="s1">&#39;^[0-9]*&#39;</span><span class="k">)</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> -n <span class="s2">&quot;${list[$1]&quot;</span> <span class="o">]</span>
</span><span class='line'>      <span class="k">then</span> <span class="c"># 将新断点与旧断点重新排序放入 _linebp</span>
</span><span class='line'>          <span class="nv">_linebp</span><span class="o">=(</span><span class="k">$(</span><span class="nb">echo</span> <span class="k">$(</span> <span class="o">(</span><span class="k">for </span>i in <span class="k">${</span><span class="nv">_linebp</span><span class="p">[@]</span><span class="k">}</span> <span class="nv">$1</span>;<span class="k">do</span>
</span><span class='line'><span class="k">          </span><span class="nb">echo</span> <span class="nv">$i</span>; <span class="k">done)</span> | sort -n<span class="k">)</span> <span class="o">))</span>
</span><span class='line'>      <span class="k">else</span> <span class="c"># 空行不能设置断点</span>
</span><span class='line'>          _msg <span class="s2">&quot;Breakpoints can only be set on non-blank lines&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  else</span>
</span><span class='line'><span class="k">      </span>_msg <span class="s2">&quot;Please specify a numeric line number&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">## 其它函数这里省略</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning the Bash Shell 笔记-杂项]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/06/05/learning-the-bash-shell-bi-ji-za-xiang/"/>
    <updated>2014-06-05T09:49:16+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/06/05/learning-the-bash-shell-bi-ji-za-xiang</id>
    <content type="html"><![CDATA[<p>一些零散的内容</p>

<!--more-->


<h2>getopts</h2>

<p>getopts 主要用来定义和解析脚本支持的命令行选项.</p>

<p>简单用法如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;:ab:c&quot;</span> opt
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  case</span> <span class="nv">$opt</span> in
</span><span class='line'>      a <span class="o">)</span>
</span><span class='line'>          statements <span class="k">for</span> -a
</span><span class='line'>          ;;
</span><span class='line'>      b <span class="o">)</span>
</span><span class='line'>          <span class="nv">$OPTARG</span> is the argument value of -b
</span><span class='line'>          statements <span class="k">for</span> -b
</span><span class='line'>          ;;
</span><span class='line'>      c <span class="o">)</span>
</span><span class='line'>          statements <span class="k">for</span> -c
</span><span class='line'>          ;;
</span><span class='line'>      <span class="se">\?</span> <span class="o">)</span>
</span><span class='line'>          other
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">shift</span> <span class="k">$((</span><span class="nv">$OPTINT</span> <span class="o">-</span> <span class="m">1</span><span class="k">))</span>
</span><span class='line'>
</span><span class='line'>main scripts
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>getopts 第一个字符串中声明支持的选项名 (只能单字符);
如果字符后面加有冒号(:)则表示该选项有对应的选项参数,
参数值会保存到变量<code>OPTARG</code>中</p></li>
<li><p>执行过 getopt 后, 会在变量<code>OPTINT</code>中保存 (选项+选项参数) 的总个数. 用 shift $(($OPTINT &ndash; 1)) 来确保后续代码不受实际选项个数影响</p></li>
<li><p>在声明所支持的选项时, 如果以冒号(:)开头, 可以忽略传入不合法的选项</p></li>
</ul>


<h2>shell 实现极简 make</h2>

<p>没有变量支持什么, 只是解释命令和依赖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c">#set -o verbose</span>
</span><span class='line'>
</span><span class='line'>makecmd<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">read </span>target colon sources
</span><span class='line'>    <span class="k">for </span>src in <span class="nv">$sources</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        if</span> <span class="o">[</span> <span class="nv">$src</span> -nt <span class="nv">$target</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">then</span>
</span><span class='line'><span class="k">            while </span><span class="nb">read </span>cmd
</span><span class='line'>            <span class="k">do</span>
</span><span class='line'><span class="k">                </span><span class="nb">echo</span> <span class="s2">&quot;$cmd&quot;</span>
</span><span class='line'>                <span class="nb">eval</span> <span class="k">${</span><span class="nv">cmd</span><span class="p">#\t</span><span class="k">}</span>
</span><span class='line'>            <span class="k">done</span>
</span><span class='line'><span class="k">            </span><span class="nb">break</span>
</span><span class='line'><span class="nb">        </span><span class="k">fi</span>
</span><span class='line'><span class="k">    done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>makecmd &lt; Makefile
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>只能处理一个命令, 不支持变量什么的</p></li>
<li><p>用 read 从标准输入中读取 target colon sources</p></li>
<li><p>循环判断 sources 中各依赖与 target 修改日期; <code>FILE1 -nt FIlE2</code>, <code>FILE1 -ot
FILE2</code> 用来比较两个文件修改时间</p></li>
<li><p>eval &ldquo;string&rdquo; 将 string 作为 bash 命令解析</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning the Bash Shell 笔记-流控制]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/05/22/learning-the-bash-shell-bi-ji-liu-kong-zhi/"/>
    <updated>2014-05-22T21:19:21+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/05/22/learning-the-bash-shell-bi-ji-liu-kong-zhi</id>
    <content type="html"><![CDATA[<p>但凡是代码就逃不开的流控制话题</p>

<!--more-->


<h2>条件</h2>

<p>bash 中的条件值以数字 0 表示真, 非0 则为假, 并不存在布尔类型</p>

<p>其中有三种条件形式可以得到条件值</p>

<h3>命令的退出状态</h3>

<p>一般来说, Linux 的命令若执行成功, 则退出状态为 0, 不成功则返回 1-255</p>

<blockquote><p><em>diff 命令除外, diff 返回 0 表示两个文件没有差别, 1 表示有差别, 2+
表示发生错误</em></p></blockquote>

<h3>脚本或函数的返回值</h3>

<p>在脚本或函数中, 用 return 表示结束并返回</p>

<p>当然, 在 bash 中只能返回数字类型, 返回字符串的话脚本会出错</p>

<p>另外, return 写返回值的话, 默认返回 0</p>

<blockquote><p>脚本或函数中若没有用 return 返回值时, 则以最后一条命令的退出状态作为返回值</p></blockquote>

<h3>测试 test</h3>

<p>bash 中测试有两种写法</p>

<ul>
<li>test condition</li>
<li>[ condition ] <em>[ ] 两个方括号和中间条件之间必须要有一个空格</em></li>
</ul>


<p>两种写法是等价的, 详细的写法可参考 <code>man test</code></p>

<h2>if..elif..else</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span>condition
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">  </span>statements
</span><span class='line'><span class="o">[</span><span class="k">elif </span>condition
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">  </span>statements<span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="k">else</span>
</span><span class='line'><span class="k">  </span>statements<span class="o">]</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>case</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">case </span>epxr in
</span><span class='line'>  pattern1 <span class="o">)</span>
</span><span class='line'>      statements
</span><span class='line'>      ;;
</span><span class='line'>  pattern2 <span class="o">)</span>
</span><span class='line'>      statements
</span><span class='line'>      ;;
</span><span class='line'>  ...
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>pattern1/2</em> 支持 bash 的通配符, 也支持 | 来表示多模式匹配</p>

<p><code>;;</code> 类似于其它语言中的 break</p>

<p>因为匹配是从上到下的, 所以可以用 <code>*)</code> 来表示 default</p>

<h2>select</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">select case</span> <span class="o">[</span>in caselist<span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span>statements about <span class="nv">$case</span>
</span><span class='line'>  <span class="o">[</span><span class="nb">break</span><span class="o">]</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>用 caselist 里的所有项生成一个简单的选择菜单</p>

<p>statements 中 $case 就是选择的项</p>

<p>完成一次 statements 后, 若没有遇到 break 则会继续下一次 select</p>

<h2>for</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for</span> <span class="o">((</span>expr1;expr2;expr3<span class="o">))</span>
</span><span class='line'>  statements
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>这个比较类似 Java 里的 for</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>i <span class="o">[</span>in list<span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span>statements
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个感觉更像 python 里的 for</p>

<p>若省略 [in list] 的话, 则默认从 $@ 中取值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>i in <span class="o">{</span>start..end..step<span class="o">}</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span>statements
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>bash 4.0 以上才有的语法</p>

<h2>while &amp; until</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">while </span>condition
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span>statements
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">until </span>condition
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span>statements
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>while condition 等价于 until ! condition</p>

<p>两者没有其它区别</p>

<h2>附:</h2>

<p>又一个友好地显示 PATH 的方法</p>

<figure class='code'><figcaption><span>showpath.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">path</span><span class="o">=</span><span class="nv">$PATH</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="nv">$path</span> <span class="o">]</span>;
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">path</span><span class="p">%%:*</span><span class="k">}</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="k">${</span><span class="nv">path</span><span class="p">#*:</span><span class="k">}</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning The Bash Shell 笔记-变量]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/05/15/learning-the-bash-shell-du-shu-bi-ji-bian-liang/"/>
    <updated>2014-05-15T09:35:19+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/05/15/learning-the-bash-shell-du-shu-bi-ji-bian-liang</id>
    <content type="html"><![CDATA[<!--more-->


<h2>$* 和 $@</h2>

<p>这两个变量都可以得到脚本运行得到的所有参数.</p>

<p>默认情况下, 这两个变量没有区别</p>

<figure class='code'><figcaption><span>sample.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$*</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行上面的脚本, 传入多个参数. 得到的两行输出结果是一样的.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/sample.sh 1 2 3
</span><span class='line'>1 2 3
</span><span class='line'>1 2 3
</span></code></pre></td></tr></table></div></figure>


<p>但是, 当给变量 IFS(internal field sperator) 赋上值并用双引号将 <code>$*</code> 和 <code>$@</code>
括起来, 情况就不一样了.</p>

<figure class='code'><figcaption><span>sample2.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">IFS</span><span class="o">=</span>,
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$*&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$@&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候, 在 <code>$*</code> 中不再是以空格分割所有参数, 而是由 IFS 的值 (当前脚本中为逗号)来分割</p>

<p>而 <code>$@</code> 则保持原样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/sample2.sh 1 2 3
</span><span class='line'>1,2,3
</span><span class='line'>1 2 3
</span></code></pre></td></tr></table></div></figure>


<p>当用双引号括起来以后, <code>"$*"</code> 等价于 <code>"$1$IFS$2$IFS$3...$IFS$N"</code></p>

<p>而 <code>"$@"</code> 等价于 <code>"$1" "$2" "$3"... "$N"</code></p>

<h2>String Operator</h2>

<p>对于 shell 变量, 还有一些操作符可以让脚本变得更活</p>

<ul>
<li><p><code>${var:-word}</code>: 如果 var 变量不存在或为 null, 则返回 word. var 变量仍然不存在或为 null</p></li>
<li><p><code>${var:=word}</code>: 如果 var 变量不存在或为 null, 则将 word 赋值给 var, 并返回 var 的新值(word)</p></li>
<li><p><code>${var:?msg}</code>: 如果 var 变量不存在或为 null, 则停止脚本, 并输出信息 <strong>var: msg</strong></p></li>
<li><p><code>${var:+word}</code>: 如果 var 变量存在并不为 null, 则返回 word. 否则, 返回 null</p></li>
<li><p><code>${var:offset:length}</code> 截取变量 var 从 offset 开始长度为 length 的字符串.  offset 从 0 开始. length 为 null 截取剩余全部.</p></li>
</ul>


<figure class='code'><figcaption><span>sample3.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">var</span><span class="k">:-</span><span class="s2">&quot;minus&quot;</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">var</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">var</span><span class="p">:=</span><span class="s2">&quot;equals&quot;</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">var</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">var</span><span class="p">:+</span><span class="s2">&quot;plus&quot;</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">var</span><span class="p">:</span><span class="nv">2</span><span class="p">:</span><span class="nv">2</span><span class="k">}</span> <span class="c">#output ua</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">theVar</span><span class="p">:?</span><span class="s2">&quot;should not be empty&quot;</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出:</p>

<figure class='code'><figcaption><span>sample3.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>minus
</span><span class='line'>
</span><span class='line'>equals
</span><span class='line'>equals
</span><span class='line'>plus
</span><span class='line'>ua
</span><span class='line'>sample3.sh: line 15: theVar: should not be empty
</span></code></pre></td></tr></table></div></figure>


<h2>一个练习</h2>

<p>你收集了一专辑, 并已经统计出了不同歌手的专辑数量, 现在需要找出收集数量前 10 的歌手. 文件格式如下:</p>

<figure class='code'><figcaption><span>file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>5 Depeche Mode
</span><span class='line'>2 Split Enz
</span><span class='line'>3 Simple Minds
</span><span class='line'>1 Vivaldi, Antonio
</span></code></pre></td></tr></table></div></figure>


<p>ok, 实现代码很简单 <code>sort -nr file | head -n 10</code></p>

<p>不过, 书中的解答不得不说更好</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">filename</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="p">:?</span><span class="s2">&quot;filename missing&quot;</span><span class="k">}</span>
</span><span class='line'><span class="nv">howmany</span><span class="o">=</span><span class="k">${</span><span class="nv">2</span><span class="k">:-</span><span class="nv">10</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>sort -nr <span class="nv">$filename</span> | head -n <span class="nv">$howmany</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样脚本化之后, 增加了可读性, 而且也不限于统计前 10.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迂回的监控数据库连接数]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/05/09/yu-hui-de-jian-kong-shu-ju-ku-lian-jie-shu/"/>
    <updated>2014-05-09T09:45:51+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/05/09/yu-hui-de-jian-kong-shu-ju-ku-lian-jie-shu</id>
    <content type="html"><![CDATA[<p>不能通过数据库工具监控到连接数时可用的迂回监控方法</p>

<!--more-->


<h2>原理</h2>

<p>数据库连接底层使用的也是 TCP 协议.</p>

<p>所以当连接到数据库时, 在本地也有打开一个 TCP 端口. 可以通过 nestat 查看</p>

<p>并且每有一个连接, 就会产有一个端口.</p>

<p>所以, 我们只需要数一下 netstat 中打印出来连接到数据库的端口即可</p>

<h2>代码</h2>

<div><script src='https://gist.github.com/2c5f64d45de600237f1c.js'></script>
<noscript><pre><code>#!/bin/sh

function echo_db_connect_count()
{
    current_date=`date '+%Y.%m.%d.%H.%M.%S'`
    netstat -an |awk '{gsub(&quot;::ffff:&quot;,&quot;&quot;); print $5}'|grep &quot;$port&quot; |sort | uniq -c |sed &quot;s/^/$current_date/g&quot;
}

port=$1
step=$2

if [ &quot;$port&quot; == &quot;&quot; ];then
    exit 1
fi

if [ &quot;$step&quot; == &quot;&quot; ];then
    step=1
fi


while true
do
    echo_db_connect_count $port
    sleep $step
done
</code></pre></noscript></div>


<h2>命令分析</h2>

<p>核心就一行, 摘出来看看:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>netstat -an |awk <span class="s1">&#39;{gsub(&quot;::ffff:&quot;,&quot;&quot;); print $5}&#39;</span>|grep <span class="s2">&quot;$port&quot;</span> |sort | uniq -c
</span><span class='line'>|sed <span class="s2">&quot;s/^/$current_date/g&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>各个命令在干什么:</p>

<p><code>netstat</code> 不多说, 打印出所有打开着的端口</p>

<p><code>awk</code> 在这里做一步初步处理, gsub(&ldquo;::ffff:&rdquo;, &ldquo;&rdquo;), 是为了去除 ipv6 格式的 ip 地址.</p>

<p><code>grep</code> 就是为了过滤出想监控的端口号</p>

<p><code>sort</code> 让所有打印出来的远程连接排序, 为下一步 uniq 作铺垫</p>

<p><code>uniq</code> 去重, <code>-c</code> 计算重复的项. 这样就得到连接的总数了</p>

<p><code>sed</code> 既然是监控, 在行首添加上时间.</p>

<p>执行结果的样例:</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/net_watch.png" alt="net_watch" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分析一个 Linux 命令]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/04/14/fen-xi-yi-ge-linux-ming-ling/"/>
    <updated>2014-04-14T22:44:14+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/04/14/fen-xi-yi-ge-linux-ming-ling</id>
    <content type="html"><![CDATA[<p>通过拆解查看 CPU 信息的组合命令, 来学习每个独立命令</p>

<!--more-->


<h2>查看 CPU 型号及数量</h2>

<p>原命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span>
</span></code></pre></td></tr></table></div></figure>


<p>cat 和 grep 就不多说了</p>

<h3>cut:</h3>

<p>help 中的说明是 <strong> Print selected parts of lines from each FILE to standard
output </strong> .  输出所有选中的行</p>

<p><code>-f2</code> 是选中第二列, 换成<code>--fields=2</code>也是可以的.</p>

<p><code>-d:</code> 则表示用冒号作为列分割符, 等价于<code>--delimiter=:</code></p>

<p><strong>其它选项:</strong></p>

<p><code>-s</code> 不包含分割符的不输出</p>

<h3>uniq:</h3>

<p>man 中的说明 <strong> report or omit repeated lines </strong> . 实际就是去除重复行</p>

<p><code>-c</code> 表示在输出行前加上其在原文件中出现的次数</p>

<p><strong>其它选项:</strong></p>

<p><em>和输出相关:</em></p>

<p><code>-d</code> 只输出发生了重复的行. <em>04-24 更新:</em> 重复行只输出一行</p>

<p><code>-D</code> 只输出发生了重复的行. 但输出所有重复行.</p>

<p><code>-u</code> 只输出唯一行</p>

<p><em>和比较相关:</em></p>

<p><code>-fN</code> 前N列不比较. 以空格或TAB为列分割符</p>

<p><code>-sN</code> 前N个字符不比较</p>

<p><code>-wN</code> 最多比较N个字符</p>

<p><code>-i</code> 无视大小写差别. A 与 a 视为一致</p>

<p><em>其它:</em></p>

<p><code>-z</code> 以 0 作为行末</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebDriver 之 Page Object 设计模式]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/04/11/webdriver-zhi-page-object-she-ji-mo-shi/"/>
    <updated>2014-04-11T21:17:47+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/04/11/webdriver-zhi-page-object-she-ji-mo-shi</id>
    <content type="html"><![CDATA[<p>使用 Selenium Webdriver 最常用的设计模式 Page Object 规划页面</p>

<!--more-->


<p>例子页面:</p>

<p><a href="http://ralph-wang.github.io/sample/login_test.html">login_test.html</a></p>

<p>用户名: test 密码: test</p>

<h2>一般写法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
</span><span class='line'>
</span><span class='line'><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://ralph-wang.github.io/sample/login_test.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">username</span> <span class="o">=</span> <span class="s">&#39;test&#39;</span>
</span><span class='line'><span class="n">pwd</span> <span class="o">=</span> <span class="s">&#39;test&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 登录操作</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">&#39;username&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">&#39;pwd&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">&#39;ok&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 验证登录</span>
</span><span class='line'><span class="n">alert</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">switch_to_alert</span><span class="p">()</span>
</span><span class='line'><span class="k">assert</span> <span class="s">&#39;succ&#39;</span> <span class="ow">in</span> <span class="n">alert</span><span class="o">.</span><span class="n">text</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的写法的代码复用和管理都会成为麻烦.</p>

<p>一方面测试值的参数化不方便, 另一方面没有抽象出业务操作来, 可读性能差.</p>

<p>如果需要自动化的页面只有一个时, 可以就这么写. 但业务多起来后代码的维护会非常痛苦</p>

<p>下面就用 Page Object 来重构这个测试</p>

<h2>Page Object 设计模式</h2>

<p>先需要两个基类: <code>BrowserContainer</code>, <code>BasePage</code></p>

<figure class='code'><figcaption><span>Base.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">BrowserContainer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">se</span>    <span class="n">lf</span><span class="p">,</span> <span class="n">driver</span><span class="p">,</span> <span class="n">baseURL</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">driver</span> <span class="o">=</span> <span class="n">driver</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">baseURL</span> <span class="o">=</span> <span class="n">baseURL</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BasePage</span><span class="p">(</span><span class="n">BrowserContainer</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">driver</span><span class="p">,</span> <span class="n">baseURL</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>      <span class="n">BrowserContainer</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">driver</span><span class="p">,</span> <span class="n">baseURL</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span> <span class="c">## 页面路径</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">baseURL</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>BrowserContainer</code> 是一个抽象类, 用来存储 driver 和测试站点的 baseURL</p>

<p><code>BasePage</code> 也是一个抽象类, 继承自 BrowserContainer, 后续所有测试页面都继承自它</p>

<figure class='code'><figcaption><span>Site.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">page.Base</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Site</span><span class="p">(</span><span class="n">page</span><span class="o">.</span><span class="n">Base</span><span class="o">.</span><span class="n">BrowserContainer</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">driver</span><span class="p">,</span> <span class="n">baseURL</span><span class="p">):</span>
</span><span class='line'>      <span class="n">page</span><span class="o">.</span><span class="n">Base</span><span class="o">.</span><span class="n">BrowserContainer</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">driver</span><span class="p">,</span> <span class="n">baseURL</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">getLoginPage</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">LoginPage</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">baseURL</span><span class="p">,</span> <span class="s">&#39;/login_test.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LoginPage</span><span class="p">(</span><span class="n">page</span><span class="o">.</span><span class="n">Base</span><span class="o">.</span><span class="n">BasePage</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">driver</span><span class="p">,</span> <span class="n">baseURL</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>      <span class="n">page</span><span class="o">.</span><span class="n">Base</span><span class="o">.</span><span class="n">BasePage</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">driver</span><span class="p">,</span> <span class="n">baseURL</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">pwd</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">&#39;username&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">&#39;pwd&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">&#39;ok&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Site</code> 是一个工厂类, 用来取得各个测试页面的实例</p>

<p><code>LoginPage</code> 就对应我们的测试页面 <code>/login_test.html</code></p>

<p>这样, 我们可以把环境因素 baseURL 和 项目因素 path 分离, 这样更方便的实现多环境复用</p>

<figure class='code'><figcaption><span>case.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">unittest</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">page.Site</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestLogin</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">site</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">Site</span><span class="o">.</span><span class="n">Site</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="p">,</span>\
</span><span class='line'>              <span class="s">&#39;http://ralph-github.io/sample&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">loginPage</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">getLoginPage</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">testLogin</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">loginPage</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">loginPage</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s">&#39;test&#39;</span><span class="p">,</span> <span class="s">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">alert</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">switch_to_alert</span><span class="p">()</span>
</span><span class='line'>          <span class="k">assert</span> <span class="s">&#39;succ&#39;</span> <span class="ow">in</span> <span class="n">alert</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>          <span class="n">alert</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后我们再用 <code>unittest</code> 模块组织我们的测试用例.</p>

<p>这样我们增加了不少代码, 但用例部分的可读性提升了不少.</p>

<p>并且我们的业务和页面是绑定在一起了, 管理起来也很方便</p>

<p>如果再增加测试页面和测试业务, 我们只需要增加一个页面类并添加一个 Site 的工厂函数即可.</p>

<p>sample 所在的 git:</p>

<p><a href="https://github.com/Ralph-Wang/page_object_sample">page_object_sample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter 安装]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/04/06/jmeter-an-zhuang/"/>
    <updated>2014-04-06T22:17:08+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/04/06/jmeter-an-zhuang</id>
    <content type="html"><![CDATA[<p>跨平台工具赛高</p>

<!--more-->


<h2>安装 jdk</h2>

<p>去 oracle 官网<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">下载</a>相应版本的 jdk</p>

<p>如果没有特别要求, 下载最新版就可以.</p>

<p>完成安装后配置上相应的环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">JAVA_HOME</span><span class="o">=</span>/where/you/install/jdk
</span><span class='line'><span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/lib/dt.jar:<span class="nv">$JAVA_HOME</span>/lib/tools.jar
</span></code></pre></td></tr></table></div></figure>


<p>可以用下面代码测试安装成功与否</p>

<figure class='code'><figcaption><span>Test.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>安装 Jmeter</h2>

<p>去 Apache 官网<a href="http://jmeter.apache.org/download_jmeter.cgi">下载</a> Jmeter</p>

<p>解压得到目录 <code>apache-jmeter-*.*</code> (*.* 为版本号)</p>

<p>将 <code>apache-jmeter-*.*</code> 复制到任意你喜欢的目录</p>

<p>下面这段其实完全不需要 ( 2014-05-07 更新 )</p>

<blockquote><p>配置 Jmeter 环境变量</p>

<p>JMETER_HOME=/where/you/put/apache-jmeter-<em>.</em></p>

<p>CLASSPATH=$CLASSPATH:$JMETER_HOME/lib/logkit-2.0.jar:$JMETER_HOME/lib/jorphan.jar:$JMETER_HOME/lib/ext/ApacheJMeter_core.jar</p>

<p>其实就是在 <code>CLASSPATH</code> 中添加三个 jar 包:</p>

<p>$JMETER_HOME/lib/logkit-2.0.jar</p>

<p>$JMETER_HOME/lib/jorphan.jar</p>

<p>$JMETER_HOME/lib/ext/ApacheJMeter_core.jar</p></blockquote>

<h2>启动 Jmeter</h2>

<p>运行 $JMETER_HOME/bin 目录下的 jmeter (Windows 环境运行 jmeter.bat)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试技术问题解答]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/03/25/mian-shi-wen-ti-jie-da/"/>
    <updated>2014-03-25T19:49:37+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/03/25/mian-shi-wen-ti-jie-da</id>
    <content type="html"><![CDATA[<p>面试时没有完全回答上或有存疑的问题</p>

<!--more-->


<h2>Linux</h2>

<h3>统计文本中某字符串出现次数</h3>

<p>前提: 一行中要查找的字符串可能出现多次.</p>

<p>文本样例:</p>

<figure class='code'><figcaption><span>sample</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ralph, ralph
</span><span class='line'>Hello, ralph, HaHA
</span><span class='line'>No such word
</span><span class='line'>Hey
</span><span class='line'>ralph again.
</span><span class='line'>two times ralph ,ralph
</span></code></pre></td></tr></table></div></figure>


<p>统计文中 <code>ralph</code> 出现的次数</p>

<p>如果确定 ralph 在每行只出现一次的话, 可以通过 <code>cat sample | grep ralph | wc
-l</code>解决</p>

<p>但因为一行里可以关键词可以出现多次, 这种方式会漏掉一些. 所以并不是好的解决方案</p>

<p>遂搜索之.  得如下解法</p>

<h3>方法 1: grep 的 -o 选项</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat sample | grep -o ralph | wc -l
</span></code></pre></td></tr></table></div></figure>


<p>解释:</p>

<p>给 <code>grep</code> 加上 <code>-o</code> 选项后, 它只会打印出匹配到的字符串, 并且每匹配一次就打印一行.</p>

<h3>方法 2: 神器 awk 之 RS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -v <span class="nv">RS</span><span class="o">=</span><span class="s1">&#39;ralph&#39;</span> <span class="s1">&#39;END {print NR-1}&#39;</span> sample
</span></code></pre></td></tr></table></div></figure>


<p>解释:</p>

<p>awk 中 RS 变量为行分隔符, 用目标字符串分隔行, 则总行数 = 出现次数 + 1.</p>

<p>在 END 中访问 NR 则为最后一行的行号, awk 起始行为 1, 所以此时总行数 = NR</p>

<h3>方法 3: 神器 awk 之 gsub</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="s1">&#39;{count+=gsub(/ralph/, &quot;#&quot;)} END {print count}&#39;</span> sample
</span></code></pre></td></tr></table></div></figure>


<p>解释:
awk 中的 <code>gsub</code> 返回文本的替换次数, 对每行的替换次数求和即可.</p>

<p>另外, awk 中的 <code>sub</code> 函数在每行中只完成一次替换.</p>

<h2>Java</h2>

<h3>反射</h3>

<p>参考<a href="http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html">反射案例</a></p>

<h2>MySQL</h2>

<p>MySQL 相关的性能问题, 关于<strong>执行计划</strong>的倒是 OK.</p>

<p>但一直没时间整理下关于慢查询日志的知识点. 所以这几次都只能回答说知道这个概念, 具体的配置参数却不记得了.</p>

<p>在这里整理一下, 权当备忘</p>

<ul>
<li>查看慢查询是否开启</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">variables</span> <span class="k">like</span> <span class="s1">&#39;%slow%&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">|</span> <span class="n">Variable_name</span>       <span class="o">|</span> <span class="n">Value</span>
</span><span class='line'><span class="o">|</span> <span class="n">log_slow_queries</span>    <span class="o">|</span> <span class="n">OFF</span>
</span><span class='line'><span class="o">|</span> <span class="n">slow_launch_time</span>    <span class="o">|</span> <span class="mi">2</span>
</span><span class='line'><span class="o">|</span> <span class="n">slow_query_log</span>      <span class="o">|</span> <span class="n">OFF</span>
</span><span class='line'><span class="o">|</span> <span class="n">slow_query_log_file</span> <span class="o">|</span> <span class="o">***</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">variables</span> <span class="k">like</span> <span class="s1">&#39;long%&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">|</span> <span class="n">Variable_name</span>   <span class="o">|</span> <span class="n">Value</span>    <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">long_query_time</span> <span class="o">|</span> <span class="mi">1</span><span class="p">.</span><span class="mi">000000</span> <span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在 my.cnf 中配置开启慢查询跟踪</li>
</ul>


<figure class='code'><figcaption><span>my.cnf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[mysqld]</span>
</span><span class='line'><span class="na">log-slow-queries</span> <span class="o">=</span> <span class="s">**** # 日志存放目录, 一般放到 MySQL 数据库的地方</span>
</span><span class='line'><span class="na">long-query-time</span> <span class="o">=</span> <span class="s">2 # 超过这个时间(单位:秒) 的查询为慢查询</span>
</span><span class='line'><span class="err">log-queries-not-using-indexes</span> <span class="c1"># 记录下没有使用索引的查询</span>
</span></code></pre></td></tr></table></div></figure>


<p>产生慢查询日志后可以使用 mysqldumpslow 工具进行分析查看了.</p>

<p>接下来的事就交给 <code>explain</code> 吧.</p>

<h2>算法</h2>

<h3>问题 1 链表倒序</h3>

<p>&hellip;面试时, 想到去 clone next.. 为毛当时就没想到多给个变量呢&hellip;</p>

<figure class='code'><figcaption><span>List.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="c1">// 后进先出列表</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">private</span> <span class="n">T</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">private</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>      <span class="cm">/** init a end Node */</span>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">Node</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">item</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/** normal Node */</span>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="n">T</span> <span class="n">item</span><span class="o">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="n">T</span> <span class="nf">getItem</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">getNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setNext</span><span class="o">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEnd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">(</span><span class="n">next</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">item</span> <span class="o">==</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">top</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">List</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">top</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;();</span> <span class="c1">//init a end Node for list</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** push a item to the top */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">top</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">item</span><span class="o">,</span> <span class="n">top</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** pop the top item */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">T</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">T</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">top</span><span class="o">.</span><span class="na">isEnd</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">top</span><span class="o">.</span><span class="na">getItem</span><span class="o">();</span>
</span><span class='line'>      <span class="n">top</span> <span class="o">=</span> <span class="n">top</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** reverse the list */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reverse</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">top</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pre</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">isEnd</span><span class="o">())</span> <span class="o">{</span> <span class="c1">// Empty list</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">top</span><span class="o">.</span><span class="na">setNext</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;());</span> <span class="c1">// a new sentinel</span>
</span><span class='line'>      <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>          <span class="n">cur</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>          <span class="n">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>          <span class="n">cur</span><span class="o">.</span><span class="na">setNext</span><span class="o">(</span><span class="n">pre</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">while</span><span class="o">(!</span><span class="n">next</span><span class="o">.</span><span class="na">isEnd</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">// reset top</span>
</span><span class='line'>      <span class="n">top</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>      <span class="n">l</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">l</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">l</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">l</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&quot;D&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">l</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&quot;e&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">l</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&quot;F&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">l</span><span class="o">.</span><span class="na">reverse</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">res</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">res</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="na">pop</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>算法还是弱项&hellip;</p>

<h3>问题 2 文本替换</h3>

<p>今天太晚了, 明天再继续</p>

<p>&mdash;&ndash;<strong><em> 2014-04-06 更新 </em></strong>&mdash;&ndash;</p>

<p>需求, 字符串或字符数组, 如 <code>AAABBBAAACCADDD</code>, 取出连续的字符, 第N次出现取出连续N个, 不足则跳过</p>

<p>如 AAABBBAAACCADDD &ndash;> ABAACAD</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sub</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">char</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="o">{</span><span class="sc">&#39;A&#39;</span><span class="o">,</span> <span class="sc">&#39;A&#39;</span><span class="o">,</span> <span class="sc">&#39;A&#39;</span><span class="o">,</span> <span class="sc">&#39;B&#39;</span><span class="o">,</span> <span class="sc">&#39;B&#39;</span><span class="o">,</span> <span class="sc">&#39;B&#39;</span><span class="o">,</span><span class="sc">&#39;A&#39;</span><span class="o">,</span> <span class="sc">&#39;A&#39;</span><span class="o">,</span> <span class="sc">&#39;A&#39;</span><span class="o">,</span> <span class="sc">&#39;C&#39;</span><span class="o">,</span>
</span><span class='line'>          <span class="sc">&#39;C&#39;</span><span class="o">,</span> <span class="sc">&#39;A&#39;</span><span class="o">,</span> <span class="sc">&#39;D&#39;</span><span class="o">,</span> <span class="sc">&#39;D&#39;</span><span class="o">,</span> <span class="sc">&#39;D&#39;</span><span class="o">};</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sub</span><span class="o">(</span><span class="n">t</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span><span class="cm">/* output:</span>
</span><span class='line'><span class="cm">     ABAACAD</span>
</span><span class='line'><span class="cm">   */</span><span class="c1">//:~</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">sub</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">charArray</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">res</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">count</span> <span class="o">=</span>
</span><span class='line'>          <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">seq</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">curCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">pre</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">charArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">charArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">pre</span> <span class="o">&amp;&amp;</span> <span class="n">curCount</span> <span class="o">&gt;=</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">charArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">pre</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// recount the new char</span>
</span><span class='line'>              <span class="n">curCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>              <span class="c1">// get the sequence of the char</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">count</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">charArray</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">seq</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">seq</span> <span class="o">=</span> <span class="n">count</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">charArray</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="c1">// cache the char sequence</span>
</span><span class='line'>              <span class="n">count</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">charArray</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">seq</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">+</span> <span class="n">charArray</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>          <span class="n">curCount</span><span class="o">++;</span>
</span><span class='line'>          <span class="n">pre</span> <span class="o">=</span> <span class="n">charArray</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>若使用 <code>String</code> 作为输入, 则用 charAt 方法获取字符</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[索引功能比较 MySQL 与 MongoDB]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/03/21/suo-yin-gong-neng-bi-jiao-mysql-yu-mongodb/"/>
    <updated>2014-03-21T10:37:08+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/03/21/suo-yin-gong-neng-bi-jiao-mysql-yu-mongodb</id>
    <content type="html"><![CDATA[<p>索引是影响数据库性能的重要元素.</p>

<p>这里比较一下 MySQL 与 MongoDB 中索引的基本使用, 也算复习一下这个数据库中的基本概念</p>

<!--more-->


<blockquote><p><em>注: MongoDB 的操作以其自带 mongoshell 为准, 不同语言的 api 操作(传参, 调用)可能会有一些差别</em></p></blockquote>

<h2>准备</h2>

<p>索引总是建立在字段上的, 所以我们这里做准备一张简单的表, 并做一些简单的数据.</p>

<p>MySQL 怎么建表, 插数据就不多说了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="c1">-- 建表</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nf">tbl</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="kt">int</span><span class="p">,</span>
</span><span class='line'>  <span class="n">value</span> <span class="kt">int</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- 插入5条极简数据</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">tbl</span> <span class="k">VALUES</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>MongoDB 不需要显式的创建 集合 (Collection, 与 MySQL 中表是同一级概念)
所以直接插入数据.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span> <span class="nx">_id</span> <span class="o">:</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:</span> <span class="nx">v</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>索引的 CRD</h2>

<h3>创建索引.</h3>

<p>MySQL 创建索引的方式很多, 可以在建表同时直接创建. 也可以在建表后再补.</p>

<p>如果是在建表同时创建, 需要将上面的建表语句修改一下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nf">tbl</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="kt">int</span><span class="p">,</span>
</span><span class='line'>  <span class="n">value</span> <span class="kt">int</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">id</span><span class="p">),</span> <span class="c1">-- 创建主键索引</span>
</span><span class='line'>  <span class="k">KEY</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="c1">-- 创建一般索引</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>建表后则用 <code>ALTER TABLE</code> 或 <code>CREATE INDEX</code> 创建</p>

<p>下面两种方式均可以在 tbl 表的 value 字段上创建一个名为 idx_value 的索引.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="c1">-- ALFTER TABLE 式</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">tbl</span> <span class="k">ADD</span> <span class="k">KEY</span> <span class="nf">idx_value</span> <span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- CREATE INDEX 式</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_value</span> <span class="k">ON</span> <span class="nf">tbl</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>MongoDB 则只留出了一个 createIndex 的接口来创建索引</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">createIndex</span><span class="p">({</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外要注意的是, MongoDB 允许在暂时不存在的集合或不存在的字段上添加索引.</p>

<p>如果集合名或字段字敲错了, mongoshell 可不会报错.</p>

<p>在 mongoshell 中有一个助手方法, <code>ensureIndex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span><span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">ensureIndex</span>
</span><span class='line'><span class="kd">function</span> <span class="p">(</span> <span class="nx">keys</span> <span class="p">,</span> <span class="nx">options</span> <span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">createIndex</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getDB</span><span class="p">().</span><span class="nx">getLastErrorObj</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// nothing returned on success</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到, 其实 <code>ensureIndex</code> 仍然通过调用 <code>createIndex</code> 来完成索引创建</p>

<blockquote><p>其实像 nodejs 或 python 中 MongoDB 的建立索引的接口名称都使用的 ensure. 而不是
create</p></blockquote>

<h3>查看已有索引.</h3>

<p>MySQL 使用 <code>show index</code> 命令即可查看, 同时可以使用 where 子句进行过滤</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">SHOW</span> <span class="k">INDEX</span> <span class="k">FROM</span> <span class="n">tbl</span> <span class="k">WHERE</span> <span class="n">KEY_NAME</span> <span class="o">=</span> <span class="s1">&#39;idx_value&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>MongoDB 则不能进行条件过滤, 只能使用 <code>getIndexes</code> 查看所有的索引信息.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">getIndexes</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>删除索引.</h3>

<p>在 MySQL 中删除索引时, 和创建一样可以用 <code>ALTER TABLE</code> 或 <code>DROP INDEX</code> 两种方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="c1">-- ALTER TABLE 式</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">tbl</span> <span class="k">DROP</span> <span class="k">INDEX</span> <span class="n">idx_value</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- DROP INDEX 式</span>
</span><span class='line'><span class="k">DROP</span> <span class="k">INDEX</span> <span class="n">idx_value</span> <span class="k">ON</span> <span class="n">tbl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 MongoDB 则是允许用 <code>dropIndexes</code> 一次性删除全部索引, 也可以用 <code>dropIndex</code>
删除指定索引</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 删除全部索引</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">dropIndexes</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 通过索引字段删除指定索引</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">dropIndex</span><span class="p">({</span> <span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">});</span>
</span><span class='line'><span class="c1">// 通过索引名称删除指定索引</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">dropIndex</span><span class="p">(</span><span class="s1">&#39;value_1&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>索引在执行计划中的表现</h2>

<h3>没有使用索引的情况</h3>

<p>先来看看没有使用索引时的执行计划是个什么样子.</p>

<p>使用 explain 命令可以获得 MySQL 中 SQL 语句的执行计划.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="n">ref</span>  <span class="o">|</span> <span class="n">rows</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="n">SIMPLE</span>      <span class="o">|</span> <span class="n">tbl</span>   <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="no">NULL</span>          <span class="o">|</span> <span class="no">NULL</span> <span class="o">|</span> <span class="no">NULL</span>    <span class="o">|</span> <span class="no">NULL</span> <span class="o">|</span> <span class="mi">5</span>    <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>type 字段中的 <code>ALL</code> 就表示了这次查询是全表扫描, 而 key_len 字段则明确的告诉我们没有使用索引</p>

<blockquote><p><em>不能相信 key 字段, 因为可能这样: create index `NULL` on tbl(value)</em></p></blockquote>

<p>类似的,MongoDB允许使用 <code>explain</code> 方法获取查询的执行计划</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span><span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">}).</span><span class="nx">explain</span><span class="p">();</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;cursor&quot;</span> <span class="o">:</span> <span class="s2">&quot;BasicCursor&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;isMultiKey&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;n&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;nscannedObjects&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;nscanned&quot;</span> <span class="o">:</span> <span class="mi">5</span>
</span><span class='line'>  <span class="c1">// ... 一些其它字段</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>cursor</code> 的值为 <code>BasicCursor</code>, 已经说明这次查询没有使用索引</p>

<h3>一般情况</h3>

<p>现在, 把索引建立起来, 看看相同查询的执行计划.</p>

<p>MySQL 使用索引查询时的执行计划</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>       <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="n">ref</span>   <span class="o">|</span> <span class="n">rows</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="n">SIMPLE</span>      <span class="o">|</span> <span class="n">tbl</span>   <span class="o">|</span> <span class="n">ref</span>  <span class="o">|</span> <span class="n">idx_value</span>     <span class="o">|</span> <span class="n">idx_value</span> <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>type 显示为 <code>ref</code>, 说明是在使用一般索引查询( 若使用主键索引, 则显示为 <code>const</code>)
rows 字段由之前的 5 变为 1, 扫描行数变少了.
key, key_len 说明了使用了什么索引以及这个索引有多长</p>

<p>MongoDB</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;cursor&quot;</span> <span class="o">:</span> <span class="s2">&quot;BtreeCursor value_1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;isMultiKey&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;n&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;nscannedObjects&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;nscanned&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// 其它字段</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>cursor 值为 <code>BtreeCursor value_1</code>, 表示使用了名为 <code>value_1</code> 的索引进行查询
nscannedObjects 表示最终结果中查询过的对象数, 使用索引之前为 5, 现在变为 1.</p>

<h3>仅查询索引</h3>

<p>MySQL 和 MongoDB 中都有这样一个特性:</p>

<p>查询时, 如果要求返回的字段信息只包含索引字段, 那么将直接从索引中返回值,
不会再进行实表查找</p>

<p>MySQL 中, 如果出现这样的情况, 会在 Extra 字段中显示 <code>using index</code> 信息, 如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">value</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>       <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="n">ref</span>   <span class="o">|</span> <span class="n">rows</span> <span class="o">|</span> <span class="n">Extra</span>                    <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="n">SIMPLE</span>      <span class="o">|</span> <span class="n">tbl</span>   <span class="o">|</span> <span class="n">ref</span>  <span class="o">|</span> <span class="n">idx_value</span>     <span class="o">|</span> <span class="n">idx_value</span> <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">index</span> <span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 MongoDB 中, 则是将 indexOnly 字段置为 <code>true</code>, 并且 <code>nscannedObjects</code> 为 0</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">_id</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">}).</span><span class="nx">explain</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;cursor&quot;</span> <span class="o">:</span> <span class="s2">&quot;BtreeCursor value_1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;isMultiKey&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;n&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;nscannedObjects&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// 说明没有扫描实际对象</span>
</span><span class='line'>  <span class="s2">&quot;nscanned&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;nscannedObjectsAllPlans&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;nscannedAllPlans&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;scanAndOrder&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;indexOnly&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 说明没有返回字段只包含索引字段</span>
</span><span class='line'>  <span class="s2">&quot;nYields&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;nChunkSkips&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;millis&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// 其它字段</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>MongoDB中排序使用索引</h3>

<p>在 MongoDB 中, 除了查询条件可以利用索引以外, 进行排序的相应字段也可以在排序时利用索引.</p>

<p>这点是 MySQL 所不具备的</p>

<p>直接上执行计划.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">find</span><span class="p">().</span><span class="nx">sort</span><span class="p">({</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">}).</span><span class="nx">explain</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;cursor&quot;</span> <span class="o">:</span> <span class="s2">&quot;BtreeCursor value_1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;isMultiKey&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;n&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;nscannedObjects&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;nscanned&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;nscannedObjectsAllPlans&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;nscannedAllPlans&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;scanAndOrder&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;indexOnly&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;nYields&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;nChunkSkips&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;millis&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="p">[</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="s2">&quot;$minElement&quot;</span> <span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>                  <span class="p">},</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="s2">&quot;$maxElement&quot;</span> <span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">]</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;server&quot;</span> <span class="o">:</span> <span class="s2">&quot;AY14031520284347468cZ:27017&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到, 没有任何查询条件, 只进行排序确实是使用了索引.</p>

<p>不同的是, 在 <code>indexBounds</code> 中对索引字段 value 的查找范围是从 $minElement 到 $maxElement.</p>

<h2>索引的强制使用</h2>

<p>因为数据库自动使用索引的选择不见得是最好的. 所以 MySQL 和 MongoDB
都提供了强制使用索引的方法.</p>

<p>MySQL 中 使用 use index 子句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">use</span> <span class="k">index</span> <span class="p">(</span><span class="n">idx_value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>MongoDB 中则使用 hint 方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tbl</span><span class="p">.</span><span class="nx">find</span><span class="p">().</span><span class="nx">hint</span><span class="p">({</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nodejs Buffer性能优势]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/03/15/nodejs-bufferxing-neng-you-shi/"/>
    <updated>2014-03-15T21:24:23+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/03/15/nodejs-bufferxing-neng-you-shi</id>
    <content type="html"><![CDATA[<p>最近在读朴大神的 <code>深入浅出 Nodejs</code>, 其中不乏性能相关话题.</p>

<p>这里选一个出来做个测试</p>

<!--more-->


<h2>准备</h2>

<p>在 Buffer 一章中, 有这么一个测试.</p>

<p>在 Web 服务中, 使用 Buffer 进行数据传输, 效率要比直接使用字符串快.</p>

<p>光看结果还是不太信服, 于是来做个验证.</p>

<p>先上源码:</p>

<figure class='code'><figcaption><span>server1.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">size</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">;</span> <span class="c1">// 10K</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">helloworld</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">helloworld</span> <span class="o">+=</span> <span class="s1">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">helloworld</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>server2.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">size</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">;</span> <span class="c1">// 10K</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">helloworld</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">helloworld</span> <span class="o">+=</span> <span class="s1">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">helloworld</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">helloworld</span><span class="p">);</span> <span class="c1">// 改用 Buffer 进行传输</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">helloworld</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>server1 和 server2 的差别就只有那一句 <code>helloworld = new Buffer(helloworld)</code>.</p>

<p>现在分别启动 server1 和 server2</p>

<p>并用 ab 测试, 同时将结果分别保存到 res1.txt 和 res2.txt</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ab -c 200 -t http://100 10.161.130.110:8888/ &gt; res1.txt
</span><span class='line'>ab -c 200 -t http://100 10.161.130.110:8888/ &gt; res2.txt
</span></code></pre></td></tr></table></div></figure>


<h2>测试结果</h2>

<p>比较一下测试结果</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/node-buffer-perf.png" alt="node-buffer-perf" /></p>

<p>可以看到, 使用 Buffer 后 QPS 和传输率确实有一定提升.</p>

<h2>CPU 利用率</h2>

<p>监控两次测试的 CPU 使用情况并统计: (统计时, 取 CPU 平稳的 6 次结果并计算用户态 CPU 平均值)</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/node-buffer-cpu.png" alt="node-buffer-cpu" /></p>

<p>两次测试中, CPU 利用率均达到了 100%, 但不使用 Buffer 时, 用户态的 CPU 更高一些.</p>

<p>高出来这一部分, 应该就是进行额外的 Buffer/String 转换消耗掉的.</p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;</p>

<p>2014-04-12 更新</p>

<p>awk 脚本中 <code>sum/6</code> 应该改为 <code>sum/NR</code> 这样更通用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 awk 查看 PATH 环境变量]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/03/06/yong-awk-cha-kan-path-huan-jing-bian-liang/"/>
    <updated>2014-03-06T14:18:22+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/03/06/yong-awk-cha-kan-path-huan-jing-bian-liang</id>
    <content type="html"><![CDATA[<!--more-->


<p>查看 PATH 环境变量是件痛苦的事情.</p>

<p>用 <code>echo</code> 直接显示时, 输出只有一行, 查看起来很费神</p>

<p>如下图</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$echo</span> <span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://Ralph-Wang.github.io/blogimgs/path-normal.png" alt="path normal" /></p>

<p>看 <code>awk</code> 用法时, 记得可以用 <code>RS</code> 变量修改行标识, 于是试试</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$echo</span> <span class="nv">$PATH</span> | awk <span class="s1">&#39;BEGIN {RS=&quot;:&quot;} {print $0}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://Ralph-Wang.github.io/blogimgs/path-withawk.png" alt="path with awk" /></p>

<p>确实清晰不少.</p>

<hr />

<h4>2014-05-11 更新</h4>

<p>今天才发现, 其实有更简单的办法&hellip; Orz</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="nv">$PAHT</span> |tr : <span class="s1">&#39;\n&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 jstack 线程定位初体验]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/03/01/yong-jstack-xian-cheng-ding-wei-chu-ti-yan/"/>
    <updated>2014-03-01T22:42:48+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/03/01/yong-jstack-xian-cheng-ding-wei-chu-ti-yan</id>
    <content type="html"><![CDATA[<p>用 top + jstack 定位 java 线程问题</p>

<!--more-->


<h3>1. 需要定位的程序</h3>

<p>首先, 写一个用于计算并输出蜚波那契数列的 java 程序, 大致的输出信息如下.
<img src="http://Ralph-Wang.github.io/blogimgs/thread-fb.png" title="a Fibonacci Thread" alt="Fibonacci" />
这里特意写成<strong>死循环</strong>, 让它不停地去消耗 CPU</p>

<h3>2. 用 top 命令定位进程号</h3>

<p>程序运行起来之后, 就该 <code>top</code> 命令出场了.</p>

<p>直接在命令行中输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$top</span>
</span></code></pre></td></tr></table></div></figure>


<p>看 <code>top</code> 命令的输出
<img src="http://Ralph-Wang.github.io/blogimgs/thread-top.png" title="use top" alt="use top" />
看到消耗 CPU 最高的就是一个 java 进程.</p>

<p>OK, 记下进程号 <strong>100162</strong></p>

<blockquote><p>补充:</p>

<blockquote><p><code>top</code> 添加 -c 参数可以查看到命令的参数信息</p>

<p>这样可以看到 java 具体执行的类, 定位更准确</p></blockquote></blockquote>

<h3>3. 用 top -H -p 命令定位到线程号</h3>

<p>现在, 我们知道消耗 CPU 最高的进程是哪个了.</p>

<p>但我们还不知道具体是哪个线程的问题, 所以不着急用 <code>jstack</code> 去获取 java 进程快照.</p>

<p>再次使用 <code>top</code> 命令, 不过, 这次我们加上 <code>-H -p</code> 参数来查看线程运行情况.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>top -H -p 100162
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注: <em>也可以 <code>top -p &lt;pid&gt;</code> 后再敲 H 打开子线程信息</em></p></blockquote>

<p>这次, 得到如下图的结果:
<img src="http://Ralph-Wang.github.io/blogimgs/thread-topHp.png" title="use top -H -p &lt;pid&gt;" alt="use top -H -p (pid)" /></p>

<p>消耗 CPU 最高的不再是 100162 了. 可以清楚的看到是线程 <strong>100172</strong></p>

<h3>4. 用 jstack 定位到代码行</h3>

<p>下面, 就可以用 <code>jstack</code> 来导出进程的堆栈信息了.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$jstack</span> 100162
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这里不能直接使用 <code>jstack 100172</code>的形式, jstack 似乎只能对<strong>主线程</strong>使用</li>
<li>jstack 不能导出堆栈问题解决: <a href="http://www.haply.info/blog/archives/305">jstack 不能导出堆栈</a></li>
</ul>


<p>然后, 在堆栈信息中找到 nid=0x27bc(100172 的 16 进制) 的线程.</p>

<p>就是下面的 <strong>Thread-0</strong> 线程了</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/thread-jstack.png" title="use jstack" alt="use jstack" /></p>

<p>全是 <code>Fibonacci.calcFibo (testJstack.java:28)</code></p>

<p>定位源码文件 <code>testJstack.java</code> 第 28 行, 最土最慢最二的蜚波那契数列算法&hellip;</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/thread-28.png" title="get the criminal" alt="get the criminal" /></p>

<p>问题定位结束</p>

<p>上完整源码</p>

<div><script src='https://gist.github.com/9290490.js?file=testJstack.java'></script>
<noscript><pre><code>public class testJstack {
    public static void main(String[] args) {
        Thread t = new Thread(new Fibonacci());
        t.start();
    }
}

class Fibonacci implements Runnable {
    public void run() {
        while (true) {
            for (int i = 0; i &lt; 20; i++) {
                System.out.println(calcFibo(i));
            }
        }
    }
    
        /**
     * 最土最慢的蜚波那契计算函数.
     * @return int
     */
    private int  calcFibo(final int n) {

        if (n == 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        } else {
            return calcFibo(n-1) + calcFibo(n-2);
        }
    }
}
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LR 关联之 Alfresco]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/18/lr-guan-lian-zhi-alfresco/"/>
    <updated>2014-02-18T00:39:11+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/18/lr-guan-lian-zhi-alfresco</id>
    <content type="html"><![CDATA[<p>遇到一个比较特别的关联的例子.</p>

<!--more-->


<p>项目是 <strong>Alfresco</strong>
需要开发的脚本业务: 管理员新增用户.</p>

<h3>问题</h3>

<p>录制后, 简单参数化一下运行, 发现最后一步提交数据时, 返回的状态码为 500.</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-errmsg.png" title="Err Msg" alt="Error Message" /></p>

<p>会不会是系统出了什么毛病? 于是去手工操作业务, 却发现一切正常.</p>

<p>再去翻看 LoadRunner 的 Test Result. 发现了好东西.</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-500page.png" title="500 Page" alt="Test Result" /></p>

<p>如上图, 虽然请求返回的状态码是 500, 但返回页面仍是 Alfresco 的页面,</p>

<h3>分析</h3>

<p>状态码 500, 返回页面为系统页面. 这说明 500 的状态码是系统主动返回的.</p>

<p>一般来说, 这种情况都是系统需要验证了某些提交信息,
而这些信息是由前面的某个请求返回的. 回放时这些信息发生了变化, 导致请求失败.</p>

<p>我们需要关联这些信息来保证请求的合法性.</p>

<hr />

<p>首先我们需要找到哪些信息是系统要验证的, 如果有开发配合, 问一嘴就好了.</p>

<p>没有开发配合的话, 就得我们自己找了. 就像现在.</p>

<p>我们先来看请求发出的信息. 首先从请求体里面找</p>

<p>请求体是 <code>json</code> 格式的, 如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>   <span class="s2">&quot;userName&quot;</span><span class="o">:</span><span class="s2">&quot;www2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;password&quot;</span><span class="o">:</span><span class="s2">&quot;www2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;firstName&quot;</span><span class="o">:</span><span class="s2">&quot;www2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;lastName&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;email&quot;</span><span class="o">:</span><span class="s2">&quot;www2@www.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;disableAccount&quot;</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;quota&quot;</span><span class="o">:</span><span class="mi">127893619</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;groups&quot;</span><span class="o">:</span><span class="p">[]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>userName</code> 是用户名, <code>password</code> 是用户密码, <code>firstName</code> 是名字, <code>lastName</code>
是姓氏, <code>email</code> 是邮箱, <code>disableAccount</code> 是禁用选项, <code>quota</code> 是分配容量, <code>groups</code> 是用户所在组</p>

<p>呃&hellip; 每个 key 都有对应的表单字段. 看来需要关联的验证信息并不在请求体中.</p>

<p>那就只有看看请求头了.</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-lr.png" title="Lr Log" alt="LR Log" /></p>

<p>这里发现了一个嫌疑犯: <code>Alfresco-CSRFToken</code></p>

<p>看名字, 应该是用来防止 <code>CSRF</code> 攻击的. 应该是它没错.</p>

<p>我们再用 <code>Fiddler</code> 来看下新请求里, 这个值是否发生了变化.</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-fiddler.png" title="Fiddler" alt="Fiddler" /></p>

<p>果然发生了变化. 这下没错了, 它就是我们需要关联的对象.</p>

<p>然后, 我们要找到系统是什么时候把这个信息发送给我们的.</p>

<p>依次查看各个请求后发现, 在进入用户管理页面时, 返回的请求头里有如下信息</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/alfresco-tocor.png" title="To Correlations" alt="To Correlations" /></p>

<p>由于信息中的特殊符号被 <code>URL编码</code> 了, 导致在前后两个请求中看上去有些不一样.
通过解码我们可以确认, 这里就是关联参数的来源</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">decodeURIComponent</span><span class="p">(</span><span class="s1">&#39;NPizHL2EuHsHN6VMml0sAfezFhPQmT5fynjkx%2fkqP88%3d&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// output: NPizHL2EuHsHN6VMml0sAfezFhPQmT5fynjkx/kqP88=</span>
</span></code></pre></td></tr></table></div></figure>


<h3>解决方案</h3>

<p>添加以下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">web_reg_save_param</span><span class="p">(</span><span class="s">&quot;token&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;LB=CSRFToken=&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;RB=;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;Search=Headers&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">LAST</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// user requests codes</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">web_add_header</span><span class="p">(</span><span class="s">&quot;Alfresco-CSRFToken&quot;</span><span class="p">,</span> <span class="n">url_decode</span><span class="p">(</span><span class="n">lr_eval_string</span><span class="p">(</span><span class="s">&quot;{token}&quot;</span><span class="p">)));</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// submit requests codes</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>TIPS:</p>

<ul>
<li><p>由于不能直接在请求中添加请求头信息, 所以我们需要调用 <code>web_add_header</code>
函数来添加.</p></li>
<li><p>因为系统发送过来的 <code>token</code> 是 <code>URL编码</code> 的字符串, 而提交新增时发送回去的是解码过的. 所以我们在添加 header 时需要进行解码.  这就是 <code>url_decode</code> 函数的作用. 这个函数并不是 LR 自带的函数, 需要自行添加. 源代码及添加方法戳<a href="http://www.51testing.com/html/96/n-832896.html">这里</a></p></li>
</ul>


<hr />

<p>关于 <code>URL编码</code> 问题, 后来又找到一个 LoadRunner 原生的解决方案如下:</p>

<p><a href="http://blog.csdn.net/womengdoushizhongguo/article/details/8517598">http://blog.csdn.net/womengdoushizhongguo/article/details/8517598</a></p>

<p>于是, 新增的代码可以修改为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">web_reg_save_param</span><span class="p">(</span><span class="s">&quot;token&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;LB=CSRFToken=&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;RB=;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;Search=Headers&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">LAST</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// user requests codes</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">web_convert_param</span><span class="p">(</span><span class="s">&quot;token&quot;</span><span class="p">,</span> <span class="s">&quot;SourceEncoding=URL&quot;</span><span class="p">,</span> <span class="s">&quot;TargetEncoding=PLAIN&quot;</span><span class="p">,</span><span class="n">LAST</span> <span class="p">);</span>
</span><span class='line'><span class="n">web_add_header</span><span class="p">(</span><span class="s">&quot;Alfresco-CSRFToken&quot;</span><span class="p">,</span> <span class="n">lr_eval_string</span><span class="p">(</span><span class="s">&quot;{token}&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// submit requests codes</span>
</span></code></pre></td></tr></table></div></figure>


<h2>02.24 更新</h2>

<hr />

<hr />

<p>再往深了想一下, 如果前端通过某种自定义的算法加密的验证信息再返回系统.</p>

<p>那没有开发配合, 这脚本还真没法完成了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为 Octopress 添加 Tag 功能]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/15/wei-octopress-tian-jia-tag-gong-neng/"/>
    <updated>2014-02-15T00:09:14+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/15/wei-octopress-tian-jia-tag-gong-neng</id>
    <content type="html"><![CDATA[<p>对于博客文章来讲, 除了类别外, 另一个重要的标识属性便是<strong>标签</strong>.</p>

<!--more-->


<p>诚如 <code>alswlx</code> 在 <a href="http://blog.log4d.com/2012/05/tag-cloud/">给 octopress 加上标签功能</a>
描述的那样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>分类 和 标签 分别代表了 有序/无序 两种不同的知识归纳方法.
</span><span class='line'>一篇文章只会属于一个分类, 但可以同时拥有多个标签.</span></code></pre></td></tr></table></div></figure>


<p>而原生的 octopress 却不支持标签功能, 所以, 有必要为它添加上这个功能</p>

<p>我选择的解决方案来自:</p>

<p><a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/">为octopress添加tag
Cloud</a></p>

<p>里面涉及到的两个插件都是 robbyedwards 写的, github 仓库附在下面:</p>

<p><a href="https://github.com/robbyedwards/octopress-tag-pages">tag_pages</a></p>

<p><a href="https://github.com/robbyedwards/octopress-tag-cloud">tag_cloud</a></p>

<p>clone 这两个项目, 得到两个相同的目录结构:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>|--plugins
</span><span class='line'>|--source
</span><span class='line'>|--CHANGELOG.md
</span><span class='line'>|--README.md</span></code></pre></td></tr></table></div></figure>


<p>如果你用的是 octopress 原生的主题, 那么直接复制这两个文件夹到 octopress
目录下即可.</p>

<p>如果是自定义主题的话需要做一些修改一下, <code>source</code> 目录下的各个 <code>html</code>
文件来适应你的主题. 既然都玩上自定义主题了,
这里我就是赘述各个文件的修改方法了.</p>

<p>如果你和我一样使用的是 <a href="https://github.com/kAworu/octostrap3">octostrap3</a>, 可以参考一下我的配置
<a href="https://github.com/Ralph-Wang/octo-source">octo-source</a></p>

<p>配置好之后, 在文章中添加标签了.</p>

<p>使用方法就是在文章的头部配置部分添加 tags 属性即可.</p>

<p>如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----
</span><span class='line'>tags: [octopress, 扩展, asides]
</span><span class='line'>categories: octopress
</span><span class='line'>----</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[联想接龙]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/11/lian-xiang-jie-long/"/>
    <updated>2014-02-11T23:18:09+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/11/lian-xiang-jie-long</id>
    <content type="html"><![CDATA[<p><code>你的第一本思维导图操作书</code>中<code>自由联想练习</code>的第一个练习方法</p>

<!--more-->


<p><img src="http://Ralph-Wang.github.io/blogimgs/brain_flow.png" alt="brain_flow" /></p>

<p>由任意一个词开始, 依次联想, 直到填满七个节点</p>

<p>然后, 可以尝试一下回忆想到的这七个节点.</p>

<p>书上用非常夸张的表达说明, 甚至从末尾开始向前回忆也可以完全回忆起来.</p>

<p>原本不是很相信, 试了一下.</p>

<p>我的联想结果如下:</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/my_brain_flow.png" alt="my_brain_flow" /></p>

<p>嗯&hellip; 其实, 这个练习是在下午 5 点左右进行的. 现在是 23:40.</p>

<p>而这图是刚刚按下午的练习填上去的.</p>

<p>不得不拜服!</p>

<p>P.S. 我的联想思路:</p>

<ul>
<li><code>系统</code> &ndash;> <code>操作系统</code>, 因为<code>操作系统</code>是一种<code>软件系统</code></li>
<li><code>操作系统</code> &ndash;> <code>Linux</code>, 因为<code>Linux</code>是著名的开源<code>操作系统</code></li>
<li><code>Linux</code> &ndash;> <code>shell</code>, 因为<code>shell</code>是<code>Linux</code>的用户操作接口</li>
<li><code>shell</code> &ndash;> <code>脚本</code>, 因为<code>shell</code>可以编写<code>脚本</code>运行</li>
<li><code>脚本</code> &ndash;> <code>Python</code>, 因为<code>Python</code>是一种<code>脚本</code>语言</li>
<li><code>Python</code> &ndash;> <code>Java</code>, 因为<code>Java</code>和<code>Python</code>一样是强类型语言</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java之Boxing和Unboxing]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/09/javazhi-boxinghe-unboxing/"/>
    <updated>2014-02-09T22:07:16+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/09/javazhi-boxinghe-unboxing</id>
    <content type="html"><![CDATA[<p>Java中有两大类数据类型： <strong>基本类型</strong>和<strong>引用类型</strong>。</p>

<p>另外地，<strong>基本类型</strong>们都有其对应的<strong>封装类</strong>。</p>

<p>比如： <code>int</code> &ndash;> <code>Integer</code></p>

<!--more-->


<p>将<strong>基本类型</strong>转换成其对应的<strong>封装类</strong>的过程，就叫做装箱(Boxing)。</p>

<p>反之，就叫拆箱(Unboxing)。</p>

<h2>Auto Boxing &amp;&amp; Unboxing</h2>

<p>因为每次显示的装箱、拆箱过于麻烦，从<code>JDK 5</code>开始，Java　提供了自动装箱、拆箱(Auto Boxing &amp; Unboxing)</p>

<p>让下面这样的代码成立。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Integer</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="c1">//Boxing</span>
</span><span class='line'><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span> <span class="c1">//Unboxing</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是在装箱过程中，有个小特点需要注意一下。</p>

<p>当装箱的<code>int</code>类型在 -128~127 之间时，装箱后的引用会指向同一对象。</p>

<p>而不在这范围内的值，每次装箱都会产生一个新对象。</p>

<p>类似的其它基本类型的范围：</p>

<ul>
<li><code>boolean</code> : 装箱后总是指向同一对象</li>
<li><code>long</code> : -128L~127 之间，装箱后指向同一对象</li>
<li><code>float</code> : 总是产生新对象</li>
<li><code>double</code> : 总是产生新对象</li>
</ul>


<p>下面是测试代码：</p>

<div><script src='https://gist.github.com/8900088.js'></script>
<noscript><pre><code>public class Boxing {
  public static void main(String[] args) {
    // boolean
    Boolean b1 = true;
    Boolean b2 = true;
    Boolean b3 = false;
    Boolean b4 = false;

    // int
    Integer i1 = -129;
    Integer i2 = -129;
    Integer i3 = -128;
    Integer i4 = -128;
    Integer i5 = 127;
    Integer i6 = 127;
    Integer i7 = 128;
    Integer i8 = 128;

    // long
    Long l1 = -129L;
    Long l2 = -129L;
    Long l3 = -128L;
    Long l4 = -128L;
    Long l5 = 127L;
    Long l6 = 127L;
    Long l7 = 128L;
    Long l8 = 128L;

    // float
    Float f1 = 0.0f;
    Float f2 = 0.0f;

    // double
    Double d1 = 0.0d;
    Double d2 = 0.0d;

    // output
    System.out.println(&quot;true: &quot; + (b1 == b2));
    System.out.println(&quot;false: &quot; + (b3 == b4));
    System.out.println(&quot;-129: &quot; + (i1 == i2));
    System.out.println(&quot;-129: &quot; + (i1 == i2));
    System.out.println(&quot;-128: &quot; + (i3 == i4));
    System.out.println(&quot;127: &quot; + (i5 == i6));
    System.out.println(&quot;128: &quot; + (i7 == i8));
    System.out.println(&quot;-129L: &quot; + (l1 == l2));
    System.out.println(&quot;-129L: &quot; + (l1 == l2));
    System.out.println(&quot;-128L: &quot; + (l3 == l4));
    System.out.println(&quot;127L: &quot; + (l5 == l6));
    System.out.println(&quot;128L: &quot; + (l7 == l8));
    System.out.println(&quot;0.0f: &quot; + (f1 == f2));
    System.out.println(&quot;0.0d: &quot; + (d1 == d2));
  }
}/* output:
true: true
false: true
-129: false
-129: false
-128: true
127: true
128: false
-129L: false
-129L: false
-128L: true
127L: true
128L: false
0.0f: false
0.0d: false
*///:~
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java线程状态]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/08/javaxian-cheng-zhuang-tai/"/>
    <updated>2014-02-08T11:07:52+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/08/javaxian-cheng-zhuang-tai</id>
    <content type="html"><![CDATA[<p>监控 Java 线程时，首先要关注的就是线程的运行状态。</p>

<!--more-->


<p>一般来说，Java 线程有 6 种状态：</p>

<ol>
<li>NEW</li>
<li>RUNNABLE</li>
<li>WAITING &amp; TIMED_WAITING</li>
<li>SLEEP</li>
<li>TERMINATED</li>
<li>BLOCK</li>
</ol>


<p>下面，用代码示例一下各个状态</p>

<h3>1. NEW &amp; TERMINATED</h3>

<p>这两个状态比较特殊，分别出现在线程<strong>运行之前</strong>和线程<strong>运行之后</strong>。</p>

<p>这里所说的<strong>运行</strong>指调用线程的<code>start()</code>方法。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=NT.java'></script>
<noscript><pre><code>public class NT {
  public static void main(String[] args) {
    Thread t = new Thread();
    System.out.println(t.getState());
    t.start(); // call start to start the thread
    try {
      Thread.sleep(1 * 1000L);
    } catch (Exception e) {
      e.printStackTrace();
    }
    System.out.println(t.getState());
  }
}/* output:
NEW
TERMINDATED
*///:~
</code></pre></noscript></div>


<p>虽然没有重写<code>run</code>方法，线程会很快结束。但如果在<code>start()</code>后直接调用<code>getState()</code>的话，仍然会返回<strong>RUNNABLE</strong>，所以耐心的等上一秒吧。</p>

<h3>2. RUNNABLE</h3>

<p>我们开线程的目的就是要让它跑起来，所以这个状态可以说是线程的主要状态。</p>

<p>它表示线程正如我们预期的一样正在运行。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=Runnable.java'></script>
<noscript><pre><code>public class Runnable {
    public static void main(String[] args) {
        Thread t = new Thread(){
            @Override
            public void run() {
                for (;true;) {
                    System.out.println(&quot;running&quot;);
                }
            }
        };
        t.setName(&quot;runnable&quot;);
        t.start();
    }/* output:
    running
    running
    running
    ...
    *///:~
}
</code></pre></noscript></div>


<p>运行时，程序会在标准输出里不断输出 <strong>running</strong>。</p>

<p>下面是用 <strong>jvisualvm</strong> 监控到的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-runnable.png" alt="running" /></p>

<p>图中的 <strong>runnable</strong> 线程就是我们在代码中启动的线程。</p>

<h3>3. SLEEP</h3>

<p><strong>休眠</strong>状态下，线程不能被唤醒；必须等到休眠时间结束线程才能回到可执行状态。</p>

<p>让线程进入状态需要调用<code>Thread</code>类的<code>sleep</code>方法。调用时指定好需要休眠的时间，线程就可以美美的睡上一觉了。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=Sleep.java'></script>
<noscript><pre><code>public class Sleep {
    public static void main(String[] args) {
        Thread t = new Thread() {
            @Override
            public void run() {
                for (;true;) {
                    System.out.println(&quot;here&quot;);
                    try {
                        Thread.sleep(30 * 1000L);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        };

        t.setName(&quot;sleep&quot;);
        t.start();
    }/* output:
    here
    here
    ...
    *///:~
}
</code></pre></noscript></div>


<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-sleep.png" alt="sleep" /></p>

<p>注：如果用<strong>线程 dump</strong> 查看，会发现 sleep 线程标示的是 <strong>TIMED_WATING</strong></p>

<blockquote><p>&mdash;-更新&mdash;&ndash;  <br/>
但在 <strong>TIMED_WATING</strong> 后会显示 (sleeping) 作为与 wait 调用的区分</p></blockquote>

<h3>4.WAITING &amp; TIMED_WAITING</h3>

<p>和休眠类似，等待状态下的线程也没有在运行。但是等待下的线程可以随时被唤醒。</p>

<p><strong>WAITING</strong> 和 <strong>TIMED_WAITING</strong> 都是调用<code>wait</code>方法后的状态。区别在于 <strong>WATING</strong> 没有指定时间，除非被唤醒，否则会一直等下去。而 <strong>TIMED_WAITING</strong>　因为指定了时间，即使不被唤醒，也会在指定时间到达之后回到可执行状态。</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=TimedWait.java'></script>
<noscript><pre><code>public class TimedWait {
    public static void main(String[] args) {
        final Object lock = new Object();
        // customer
        Thread t1 = new Thread() {
            @Override
            public void run() {
                int i = 0;
                for (;true;) {
                    synchronized(lock) {
                        try {
                            System.out.println(&quot;wait&quot;);
                            lock.wait(20 * 1000L); //wait 20 seconds
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    System.out.println(&quot;t1: &quot; + i++);
                }
            }
        };

        // producer
        Thread t2 = new Thread() {
            @Override
            public void run() {
                for (;true;) {
                    synchronized(lock) {
                        for(int i = 0; i &lt; 150000; i++) {
                            System.out.println(&quot;t2: &quot; + i);
                        }
                        lock.notifyAll();
                        try {
                            lock.wait(2 * 1000L); // wait 2 seconds;
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        };

        t1.setName(&quot;t1&quot;);
        t2.setName(&quot;t2&quot;);

        t1.start();
        t2.start();
    }/* output:
    t2: 0
    t2: 1
    ...
    t2: 14999
    t1: 0
    wait
    t2: 0
    t2: 1
    ...
    *///:~
}
</code></pre></noscript></div>


<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-wait.png" alt="waiting" /></p>

<p><strong>线程 dump</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-timedwait.png" alt="timed_wating" /></p>

<blockquote><p>&mdash;更新&mdash;  <br/>
可以看到在 <strong>TIMED_WATING</strong> 后有显示 (on object monitor)  <br/>
表示调用的是 wait, 而不是 sleep</p></blockquote>

<h3>5.BLOCK</h3>

<p>在线程中，可以使用 <code>sychronized</code> 关键字锁住某些资源，以保证其它线程不能同时访问。如果这时其它线程需要这个资源，就会进入<strong>阻塞</strong>状态。</p>

<p>如果，两个线程同时需要对方锁住的资源，而这些资源又不能被释放，那就会形成死锁。</p>

<p>这里就用死锁来示例<strong>阻塞</strong>状态</p>

<p>代码：</p>

<div><script src='https://gist.github.com/8839097.js?file=DeadBlock.java'></script>
<noscript><pre><code>public class DeadBlock {
    public static void main(String[] args) {
        Knife k = new Knife();
        Hammer h = new Hammer();
        Worker worker = new Worker(k, h, &quot;worker&quot;);
        Handler handler = new Handler(k, h, &quot;handler&quot;);
        worker.start();
        handler.start();
    }
}/* output:
I'm worker and using knife.
I'm handler and using hammer.
*///:~

class Worker extends Thread {
    Knife knife;
    Hammer hammer;
    String name;
    /** constructor */
    public Worker(Knife k, Hammer h, String n) {
        this.knife = k;
        this.hammer = h;
        this.name = n;
    }

    public void run() {
        synchronized(knife){
            try {
                System.out.println(&quot;I'm &quot; + this.name + &quot; and using knife.&quot;);
                Thread.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized(hammer){
                System.out.println(&quot;I'm &quot; + this.name + &quot;, I need hammer&quot;);
            }
        }
    }
}

class Handler extends Thread {
    Knife knife;
    Hammer hammer;
    String name;
    /** constructor */
    public Handler(Knife k, Hammer h, String n) {
        this.knife = k;
        this.hammer = h;
        this.name = n;
    }

    public void run() {
        synchronized(hammer){
            try {
                System.out.println(&quot;I'm &quot; + this.name + &quot; and using hammer.&quot;);
                Thread.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized(knife){
                System.out.println(&quot;I'm &quot; + this.name + &quot;, I need knife&quot;);
            }
        }
    }
}
/** Knife */
class Knife {
}

/** Hammer */
class Hammer {
}
</code></pre></noscript></div>


<p><strong>jvisualvm</strong> 中的情况：</p>

<p><img src="http://Ralph-Wang.github.io/blogimgs/status-block.png" alt="deadBlock" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用jvisualvm监控远程java进程]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/06/yong-jvisualvmjian-kong-yuan-cheng-javajin-cheng/"/>
    <updated>2014-02-06T21:48:26+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/06/yong-jvisualvmjian-kong-yuan-cheng-javajin-cheng</id>
    <content type="html"><![CDATA[<p><strong>jvisualvm</strong>是从<strong>jdk1.6</strong>开始添加到JDK包中的图形化监控工具。</p>

<!--more-->


<p>开启后可以自动监控本机运行中的java进程。</p>

<p>另外，<strong>jvisualvm</strong>它还可以监控远程机器上java进程的运行状态。</p>

<p>不过，监控远程机器需要在被监控机器上做一些配置：</p>

<h4>1. 安装JDK</h4>

<p>这一步不多说了</p>

<h4>2. 配置/etc/hosts</h4>

<p>要让<strong>jvisualvm</strong>成功连接到被监控机器上，需要在/etc/hosts文件中将被监控机的主机名绑定到被监控机的IP地址。</p>

<p>通过<code>hostname</code>命令可以获得主机名</p>

<figure class='code'><figcaption><span>/etc/hosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>192.168.192.132 Ralph.Wang
</span></code></pre></td></tr></table></div></figure>


<p><code>hostname -i</code>返回实际的IP地址即绑定成功。</p>

<p>注：<strong>CentOS</strong>中的/etc/hosts默认是没有绑定主机名的IP的，直接添加即可</p>

<h4>3. 运行jstatd</h4>

<p>运行<code>jstatd</code>之前，我们需要配置一个安全策略文件,如下</p>

<div><script src='https://gist.github.com/8844076.js?file=jstatd.all.policy'></script>
<noscript><pre><code>grant codebase &quot;file:${java.home}/../lib/tools.jar&quot; {
   permission java.security.AllPermission;
};
</code></pre></noscript></div>


<p>运行<code>jstatd</code>时需要用<code>-J-Djava.security.policy</code>参数指定策略文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jstatd -J-Djava.security.policy<span class="o">=</span>jstatd.all.policy
</span></code></pre></td></tr></table></div></figure>


<h3>4.在jvisualvm中添加远程机</h3>

<p><code>文件</code>&ndash;><code>添加远程主机</code> 输入IP地址即可。</p>

<p>下面是示例图
<img src="http://Ralph-Wang.github.io/blogimgs/jvisualvm-remote.png" alt="jvisualvm监控示例" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress首页只显示摘要]]></title>
    <link href="http://Ralph-Wang.github.io/blog/2014/02/06/octopressshou-ye-zhi-xian-shi-zhai-yao/"/>
    <updated>2014-02-06T00:30:36+08:00</updated>
    <id>http://Ralph-Wang.github.io/blog/2014/02/06/octopressshou-ye-zhi-xian-shi-zhai-yao</id>
    <content type="html"><![CDATA[<p>上一篇博客比较长，发现首页居然照样显示了全文</p>

<p>于时查找了下如何只显示摘要</p>

<!--more-->


<p>实现方式很简单:</p>

<ul>
<li><p>在博客文档中添加<code>&lt;!--more--&gt;</code>即可</p></li>
<li><p>添加之后，首页文章后会添加一个<code>read on</code>链接，指向文章页面</p></li>
<li><p>并且只有<code>&lt;!--more--&gt;</code>前的内容人显示到首页</p></li>
</ul>


<p>像这样</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>上一篇博客比较长，发现首页居然照样显示了全文
</span><span class='line'>
</span><span class='line'>于时查找了下如何只显示摘要
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>实现方式很简单:
</span><span class='line'>
</span><span class='line'>* 在博客文档中添加`&lt;!--more--&gt;`即可
</span><span class='line'>
</span><span class='line'>* 添加之后，首页文章后会添加一个`read on`链接，指向文章页面
</span><span class='line'>
</span><span class='line'>* 并且只有`&lt;!--more--&gt;`前的内容人显示到首页</span></code></pre></td></tr></table></div></figure>


<h4>　懒人做法</h4>

<p>修改<code>Rakefile</code>，使写新文章时自动添加一个<code>&lt;!--more--&gt;</code></p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M:%S %z&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&lt;!--more--&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
